

var theHost = "localhost";
// if (window.location.hostname)
    // theHost = window.location.host;

console.log(theHost);

var serverUrl = "http://" + theHost + "/databag/";
var viewer, markerhelper;
var debugUI, extUI, testUI;
var loadTimer;
var stats;

var isMobile = 0;
var uA = navigator.userAgent;
if (uA.indexOf('Android') > -1) {
    isMobile = 1;
} else if (uA.indexOf('iPhone') > -1) {
    isMobile = 2;
} else if (uA.indexOf('Windows Phone') > -1) {
    isMobile = 3;
}

function callbackFinished(result) {

    var loadTimer2 = new Date();
    console.log("Loading: ");
    console.log((loadTimer2.getTime() - loadTimer.getTime()) / 1000);

    document.getElementById("progress").style.display = "none";

    // Various camera modifying before first time render.
    viewer.setInitialView(CLOUD.EnumStandardView.ISO);
    //viewer.zoomAll();
    //viewer.zoomToBuilding(0, 1.15);
    //var customerCamera = '{"name":"persp","position":{"x":61523.042905434006,"y":-14218.305234063004,"z":-33170.582501976765},"target":{"x":14759.051449927416,"y":11510.170631834097,"z":3670.1115872149753},"up":{"x":0,"y":0.000003673205473730751,"z":-0.9999999999932538},"version":1}';
    //viewer.setCamera(customerCamera);

    // loadTimer = new Date();
    // console.log("Rendering: ");
    // console.log((loadTimer.getTime() - loadTimer2.getTime()) / 1000);

    // if (result === undefined) {
    //     console.log("Got exception!");
    // }
    // else if (result.bOutOfLimitation !== undefined) {
    //     console.log("Some meshes are not loaded as the model is too large");
    // }
}

function callbackProgress(evt) {

    var progress = evt.progress;
    //console.log(progress);
    var bar = 250,
        total = progress.total,
        loaded = Math.min(progress.loaded, progress.total);

    if (total)
        bar = Math.floor(bar * loaded / total);

    document.getElementById('bar').style.width = bar + "px";

}

function callbackStartLoading(evt) {

    document.getElementById('bar').style.width = "0px";
    document.getElementById('progress').style.display = "block";

    startTime = new Date();
}

function onWindowResize() {

    var viewport = document.getElementById('viewport');
    viewer.resize(viewport.offsetWidth, viewport.offsetHeight);
}

function init() {

    if (!Detector.webgl) {
        Detector.addGetWebGLMessage();
    }
    var progress = document.getElementById('progress');
    var viewport = document.getElementById('viewport');
    var params = HTTP._get();

    if (null == params) {

        progress.style.display = "none";
        viewport.style.display = "none";

        return;
    }

    stats = new Stats();
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.top = '0px';
    stats.domElement.style.left = '300px';
    stats.domElement.style.zIndex = 100;
    stats.domElement.style.display = 'none';
    viewport.appendChild(stats.domElement);

    var projectId = params.projectId;

    viewer = new CLOUD.Viewer();
    debugUI = new DebugUI(viewer, stats, serverUrl);
    debugUI.addControls();
    debugUI.show(false);



    testUI = new TestUI(viewer,projectId,serverUrl);
    testUI.addControls();
    testUI.show(false);

    var onSelectionChagned = function (evt) {

        if (evt.selectionList) {

            console.log("Current selection set:")
            console.log(evt.selectionList);

            debugUI.setSelections(evt.selectionList);
        } else {
            console.log("Illegal ON_SELECTION_CHANGED event: no selectionList returned");
        }

        //console.log("Elements: ", viewer.getNumOfElements());
        //console.log("Renderables: ", viewer.getNumOfRenderables());
        //console.log("Triangles: ", viewer.getNumOfTriangles());
    };

    var onClickPick = function (evt) {

        var intersect = evt.intersectInfo;

        if (intersect ) {
            debugUI.id = intersect.selectedObjectId;
            debugUI.projectId = intersect.modelId;
            debugUI.intersect = intersect;
            /*
            console.log("Current click with pick: " + intersect.selectedObjectId);
            console.log("mode Id: " + intersect.modelId);
            console.log("screen position: " + evt.screenPos.x.toString() + " " + evt.screenPos.y.toString());
            if (intersect.worldPosition && intersect.worldPosition) {
                console.log("pick point world position: " + intersect.worldPosition.x.toString() + " "
                    + intersect.worldPosition.y.toString() + " " + intersect.worldPosition.z.toString());
                // 获得世界坐标下的包围盒
                console.log("selected object world boundingbox: ");
                console.log(intersect.worldBoundingBox.min);
                console.log(intersect.worldBoundingBox.max);
            }
            */
        } else{
            debugUI.id = "";
            debugUI.projectId = "";
            debugUI.intersect = null;

            if (evt.screenPos) {
                //console.log("screen position: " + evt.screenPos.x.toString() + " " + evt.screenPos.y.toString());
            }
            else {
                console.log("Illegal ON_CLICK_PICK event with invalid data");
            }
        }
    };

    // INITIALIZE
    viewer.init(viewport);

    var IBLManager = viewer.getIBLManager();
    IBLManager.loadIBLConfig("/data/IBLConfig.json");

    var selectionUI = document.getElementById('selection');
    // REGISTER EVENTS
    viewer.registerEventListener(CLOUD.EVENTS.ON_SELECTION_CHANGED, onSelectionChagned);
    viewer.registerEventListener(CLOUD.EVENTS.ON_CLICK_PICK, onClickPick);
    viewer.registerEventListener(CLOUD.EVENTS.ON_LOAD_PROGRESS, callbackProgress);
    viewer.registerEventListener(CLOUD.EVENTS.ON_LOAD_COMPLETE, callbackFinished);
    viewer.registerEventListener(CLOUD.EVENTS.ON_LOAD_START, callbackStartLoading);
    viewer.registerEventListener(CLOUD.EVENTS.ON_EDITOR_UPDATEUI, function (evt) {

        if (evt.data.visible) {
            var data = evt.data;
            selectionUI.style.visibility = "visible";
            selectionUI.style.left = data.left + "px";
            selectionUI.style.top = data.top + "px";
            selectionUI.style.width = data.width + "px";
            selectionUI.style.height = data.height + "px";
            selectionUI.style.opacity = data.dir ? 0.5 : 0.1;
            //selectionUI.style.background = 'transparent';
            //selectionUI.style.border = '2px dashed red';
        } else {
            selectionUI.style.visibility = "hidden";
        }
    });

    viewer.registerEventListener(CLOUD.EVENTS.ON_LOAD_EMPTY_SCENE, function (evt) {
        document.getElementById("progress").style.display = "none";
        alert("Empty scene!");
    });

    viewer.registerEventListener(CLOUD.EVENTS.ON_LOAD_INVALID_SCENE, function (evt) {
        document.getElementById("progress").style.display = "none";
        alert("Invalid scene!");
    });

    viewer.registerEventListener(CLOUD.EVENTS.ON_VERSION_NO_MATCH, function (evt) {

        document.getElementById("progress").style.display = "none";
        alert("The engine version does not match the data version - engine version: " + evt.version.engine + ", data version:" + evt.version.data);
    });

    viewer.registerEventListener(CLOUD.EVENTS.ON_HOVER_PICK, function (evt) {

        // if (evt) {
        //     console.log("hover object:", evt.intersectInfo);
        // }

        
    });

    viewer.registerEventListener(CLOUD.EVENTS.ON_VIEWER_RESTORED, function(evt){
        console.log(evt);
    });
    loadTimer = new Date();

    // LOAD
    viewer.load(projectId, serverUrl);

    window.addEventListener('resize', onWindowResize, false);

    viewer.cameraControl.zoomSpeed = 1.0;

    viewer.setSelectPadCallback(function(intersect) {
        console.log(intersect);
    })
}

function destroy() {
    if (viewer) {
        console.log("---------------- destroy ----------------");
        window.removeEventListener('resize', onWindowResize, false);
        viewer.destroy();
    }
}

window.onload = init;
window.onunload = destroy;