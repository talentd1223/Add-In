function AreaTest(viewer, projectId, serverUrl){

    var items = projectId.split('\\');
    var rootName = items[0];
    var loader = new THREE.FileLoader();
    var scope = this;

    this.loadArea = function(idx){
        if(idx >= scope.areas.length)
            return;

        var area = scope.areas[idx];
        console.log(area);
        loader.load(serverUrl + rootName + "/metadata/roomsboundary/" + area.id + ".json", function(text2){
            var areaLines = JSON.parse(text2);
            console.log(areaLines);

            var node = viewer.getScene().getAreaNode();
            if(node.areaInfo.length == 1){
                node.setAreaInfo(0, areaLines);
            }
            else{
                node.setAreaLineColor({color: 0x000099});
                node.addAreaInfo(areaLines);
            }

            //area.minPt.z += 500;
            area.maxPt.z += 1000;
            viewer.zoomToBBox({min:area.minPt,max:area.maxPt});
            var ids = viewer.getObjectsInBox({min:area.minPt,max:area.maxPt});
            console.log(ids);
            viewer.getFilter().setIsolateList(3, ids);
            viewer.render();
        });
    }

    

    loader.load(serverUrl + rootName + "/metadata/rooms.json", function (text) {
        var areasJson = JSON.parse(text);
        scope.areas = areasJson;

        scope.loadArea(0);
        
    });

}

function ExtrudeBodyTest(viewer, projectId, serverUrl){

    var items = projectId.split('\\');
    var rootName = items[0];
    var loader = new THREE.FileLoader();
    var scope = this;

    this.loadExtrudeBody = function(idx){
        
        if(idx >= scope.areas.length)
            return;

        var area = scope.areas[idx];
        console.log(area);
        loader.load(serverUrl + rootName + "/metadata/roomsboundary/" + area.id + ".json", function(text2){
            var areaLines = JSON.parse(text2);
            console.log(areaLines);

            var scene =  viewer.getScene();
            //可避免同一area重复建立体块
            var name = area.name;
            var group = scene.getExtrudeBodyManager();
            var extrudeLength = 15000;//拉伸长度
            var faceMaterial = group.createMaterial({color:0xffff00 , side: THREE.DoubleSide, transparent: true, opacity: 0.5} );
            var edgeMaterial = group.createMaterial({color:0xff0000 , side: THREE.DoubleSide} );
            group.addNode(name, areaLines, extrudeLength, faceMaterial, edgeMaterial);

            group.setNodeMaterial("Master Bedroom 206", {color:0xff0000 , side: THREE.DoubleSide, transparent: true, opacity: 0.5},{color:0x000000});
            group.removeNodeByName("Bedroom 202");

            area.maxPt.z += 10000;
            viewer.zoomToBBox({min:area.minPt,max:area.maxPt});
            var ids = viewer.getObjectsInBox({min:area.minPt,max:area.maxPt});
            console.log(ids);
            viewer.getFilter().setIsolateList(3, ids);
            viewer.render();

        });
    }


    loader.load(serverUrl + rootName + "/metadata/rooms.json", function (text) {
        var areasJson = JSON.parse(text);
        scope.areas = areasJson;

        scope.loadExtrudeBody(0);
        scope.loadExtrudeBody(1);
        // scope.loadExtrudeBody(5);//ExtrudeBodyNode_Bedroom 202
        // scope.loadExtrudeBody(11);
       
    });
   
}

var TestUI = function (viewer, projectId, serverUrl) {
    "use strict";

    var scope = this;

    this.status = "N";
    this.time = "";
    this.clickElementName = '';
    this.modelLoaded = true;

    var startTime = Date.now();
    var endTime = Date.now();

    var begin = function(name) {
        scope.clickElementName = name;
        scope.status = "N";
        startTime = Date.now();
    };

    var end = function() {
        endTime = Date.now();
        //scope.time = (endTime - startTime) / 1000;
        scope.time = (endTime - startTime);
    };

    viewer.addRenderFinishedCallback(function(){
        scope.status = scope.clickElementName + "-Y";
    });

    var viewHandler = {
        names: ['home01', 'front01', 'right01', 'top01','southEast01', 'northWest01'],
        home01: function () {

            begin('home');

            viewer.setStandardView(CLOUD.EnumStandardView.ISO);

            end();
        },
        front01: function () {
            begin('front');
            viewer.setStandardView(CLOUD.EnumStandardView.Front);
            end();
        },
        right01: function () {
            begin('right');
            viewer.setStandardView(CLOUD.EnumStandardView.Right);
            end();
        },
        top01: function () {
            begin('top');
            viewer.setStandardView(CLOUD.EnumStandardView.Top);
            end();
        },
        southEast01: function () {
            begin('southEast');
            viewer.setStandardView(CLOUD.EnumStandardView.SouthEast);
            end();
        },
        northWest01: function () {
            begin('northWest');
            viewer.setStandardView(CLOUD.EnumStandardView.NorthWest);
            end();
        }
    };

    var modelHandler = {
        names: ['load02','unload02'],
        load02: function () {

            begin('load');
            if(scope.modelLoaded === true) {
                viewer.setStandardView(CLOUD.EnumStandardView.NorthEast);
            }else {
                viewer.load(projectId, serverUrl);
                viewer.render();
                scope.modelLoaded = true;
            }
            //scope.show(false);
            end();
        },
        unload02: function () {

            begin('unload');
            if(scope.modelLoaded === true) {
                viewer.unload(projectId);
                scope.modelLoaded = false;
            }
            //scope.show(false);
            end();
        }
    };

    var featureHandler = {
        names: ['clipON03','clipOFF03', 'fillClipON03', 'fillClipOFF03', 'filterByCategory03',
            'DrawingStyleShading', 'DrawingStyleBoardline', 'DrawingStyleShadingWithLine',
            'EnvMapON', 'EnvMapOFF','promotePrioity', 'promotePriority2'],
        filterCategoryOn: false,
        priorityOn:false,

        clipON03: function () {

            begin('clipON');
            viewer.editorManager.enableTool(viewer, CLOUD.EditToolMode.CLIP_BY_BOX);
            var clipPlanes = viewer.getScene().getClipPlanes();
            clipPlanes.enable(true, true);
            viewer.render();
            end();
        },
        clipOFF03: function () {

            begin('clipOFF');
            viewer.editorManager.enableTool(viewer, CLOUD.EditToolMode.PICK_BY_RECT);
            var clipPlanes = viewer.getScene().getClipPlanes();
            clipPlanes.enable(false, false);
            viewer.render();
            end();
        },
        fillClipON03: function () {

            begin('fillClipON');
            viewer.editorManager.enableTool(viewer, CLOUD.EditToolMode.CLIP_FILL);
            var fillClipPlane = viewer.getScene().getFillClipPlane();
            fillClipPlane.enable(true, true);
            viewer.render();
            end();
        },
        fillClipOFF03: function () {

            begin('fillClipOFF');
            viewer.editorManager.enableTool(viewer, CLOUD.EditToolMode.CLIP_FILL);
            var fillClipPlane = viewer.getScene().getFillClipPlane();
            fillClipPlane.enable(false, false);
            viewer.render();
            end();
        },
        filterByCategory03: function () {

            var categoryIds = [];
            var filter = viewer.getFilter();
            var models = viewer.modelManager.models;

            for (var id in models) {
                if (models.hasOwnProperty(id)) {
                    var model = models[id];
                    var userDataReader = model.loader.userDataReader;
                    for (var i = 0, len = userDataReader.count; i < len; ++i) {
                        var userData = userDataReader.getUserData(i);
                        if (userData) {
                            // 将楼板与墙设置成半透明
                            //"categoryId":"-2000032","categoryName":"楼板"
                            // "categoryId":"-2000011","categoryName":"墙"
                            var categories = userData.categoryId === "-2000032"
                                || userData.categoryId === "-2000011";
                            if (categories === true && categoryIds.indexOf(userData.categoryId) === -1) {
                                categoryIds.push(userData.categoryId);
                            }
                        }
                    }
                }
            }

            if (categoryIds.length < 1) {
                return;
            }

            featureHandler.filterCategoryOn = !featureHandler.filterCategoryOn;
            if (featureHandler.filterCategoryOn) {

                var value = {color: {color: 0xD3D8E9, opacity: 0.6}};
                filter.addToUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "categoryId", categoryIds, value);
                filter.addToUserList(CLOUD.EnumUserType.WITH_BOARDLINE, "categoryId", categoryIds);
                viewer.setDrawingStyle(CLOUD.DrawingStyle.SHADINGWITHLINE);

            } else {

                filter.clearUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "categoryId");
                filter.clearUserList(CLOUD.EnumUserType.WITH_BOARDLINE, "categoryId");
                viewer.setDrawingStyle(CLOUD.DrawingStyle.SHADING);
            }

            viewer.render();
        },

        DrawingStyleShading: function () {
            
            begin('DrawingStyleShading');
            viewer.setDrawingStyle(CLOUD.DrawingStyle.SHADING);
            viewer.render();
            end();
            
        },

        DrawingStyleBoardline: function () {

            begin('DrawingStyleBoardline');
            viewer.setDrawingStyle(CLOUD.DrawingStyle.BOARDLINE);
            viewer.render();
            end();

        },

        DrawingStyleShadingWithLine: function () {

            begin('DrawingStyleShadingWithLine');
            viewer.setDrawingStyle(CLOUD.DrawingStyle.SHADINGWITHLINE);
            viewer.render();
            end();

        },

        EnvMapON: function () {
            
            begin('EnvMapON');
            viewer.loadEnvMap('images/EnvMap');
            viewer.render();
            end();
            
        },

        EnvMapOFF: function () {
            
            begin('EnvMapOFF');
            viewer.closeEnvMap();
            viewer.render();
            end();
            
        },

        promotePrioity:function(){
            var categories = ['-2000011']; // promote 'wall' priority
            viewer.resizePool(10);          // change to small pool size, only outdoor 'wall' is visible.
            viewer.setCategoriesToHighPriority(categories, 1);
            viewer.render();
        },

        promotePriority2: function () {
            var userIds = [];
            var filter = viewer.getFilter();
            var models = viewer.modelManager.models;

            // traverse models and grab all fileIds and hide item by fileIds
            for (var id in models) {
                if (models.hasOwnProperty(id)) {
                    var model = models[id];
                    var sceneReaderArray = model.loader.getSceneReaderArray();
                    var sceneCount = sceneReaderArray ? sceneReaderArray.length : 0;
                    if (sceneCount < 1) {
                        CLOUD.Logger.log("model load not started!");
                        return;
                    }
                    var sceneReader = sceneReaderArray[0];

                    if (!sceneReader) {
                        CLOUD.Logger.log("Empty scene");
                        return;
                    }

                    var userIdReader = model.loader.getUserIdReader();
                    var cellCount = sceneReader.header.cellCount;
                    var limit = 10;
                    for (var i = 0; i < cellCount; ++i) {

                        var cell = sceneReader.getCellInfo(i);

                        for (var j = cell.itemIndex; j < cell.itemCount; ++j) {

                            var item = sceneReader.getItemInfo(j);
                            if (item === undefined) {
                                continue;
                            }

                            // grab some components less than limit.
                            var userId = userIdReader ? userIdReader.getString(item.originalId) : item.originalId;
                            if(userIds.length < limit) {
                                userIds.push(userId);
                            }
                        }
                    }
                }
            }

            if (userIds.length < 1) {
                return;
            }

            featureHandler.priorityOn = !featureHandler.priorityOn;
            if (featureHandler.priorityOn) {
                viewer.resizePool(10);
                filter.addToIdList(CLOUD.EnumIdBasedType.RENDER_PROMOTION, userIds);
            } else {
                viewer.resizePool(1000);
                filter.clearIdList(CLOUD.EnumIdBasedType.RENDER_PROMOTION);
            }

            viewer.render();

        }
    };

    var feature2Handler = {
        names:['area','ExtrudeBody', 'grids', 'selection'],
        area: function(){
            window.areaTest = new AreaTest(viewer, projectId, serverUrl);
        },

        ExtrudeBody: function(){
            window.extrudeBodyTest = new ExtrudeBodyTest(viewer, projectId, serverUrl);
        },

        grids: function(){
            var items = projectId.split('\\');
            var rootName = items[0];
            var loader = new THREE.FileLoader();
            loader.load(serverUrl + rootName + "/metadata/axisgrids.json", function (text) {
                var gridsJson = JSON.parse(text);
                for(var grid = 0, len = gridsJson.grids.length; grid<len; ++grid){
                    var gridlines = gridsJson.grids[grid].gridLines;
                    for(var line = 0, len2 = gridlines.length; line < len2; ++line) {
                        var lineSegments = gridlines[line].lines;
                        var segments = [];
                        for(var i = 0; i < lineSegments.length; ++i) {
                            segments.push([{x:lineSegments[i][0], y:lineSegments[i][1], z:lineSegments[i][2]},
                                {x:lineSegments[i][3], y:lineSegments[i][4], z:lineSegments[i][5]}]);
                        }

                        var node = viewer.getScene().getAreaNode();
                        if(node.areaInfo.length == 1){
                            node.setAreaInfo(0, segments);
                        }
                        else{
                            node.setAreaLineColor({color: 0x000099});
                            node.addAreaInfo(segments);
                        }

                    }
                    break; // only test one floor
                }
                //viewer.getFilter().hideScene();
                viewer.render();
            });

        },
        selection:function() {

            var objIdList = ['1880647', '2104572', '1'];
            viewer.setSelection(objIdList);
            viewer.render();
        }
    };

    var feature3Handler = {
        names:['AxisGridManager'],
        
        AxisGridManager: function(){
            var gridIdx = 1;
            var floorId = "10247715983992645168";
            var items = projectId.split('\\');
            var rootName = items[0];
            var axisGridJsonFileName = floorId+".json";
            var scene =  viewer.getScene();
            var axisGridPath = serverUrl + rootName + "/metadata/axisgrids/"+axisGridJsonFileName;

            var axisGridManager = scene.getAxisGridManager();
            axisGridManager.loadAxisGrid(axisGridPath,gridIdx);

            viewer.getFilter().hideAll();
            viewer.render();
        }
        
    };

    var gui = new dat.GUI();
    // 设置gui面板样式
    gui.domElement.className = 'test-panel';

    this.getGUI = function () {
        return gui;
    };

    this.addControls = function () {
        gui.closed = true;

        gui.add(this, 'status').listen();
        gui.add(this, 'time').listen();

        // Test cases related with camera
        var viewFolder = gui.addFolder('01_View');
        for (var i = 0, len = viewHandler.names.length; i < len; ++i) {
            viewFolder.add(viewHandler, viewHandler.names[i]);
        }

        // Test cases related with model
        var modelFolder = gui.addFolder('02_Model');
        for (var i = 0, len = modelHandler.names.length; i < len; ++i) {
            modelFolder.add(modelHandler, modelHandler.names[i]);
        }
        // Test cases related with visual feature
        var featureFolder = gui.addFolder('03_Feature');
        for (var i = 0, len = featureHandler.names.length; i < len; ++i) {
            featureFolder.add(featureHandler, featureHandler.names[i]);
        }
        // Test cases related with visual feature
        var feature2Folder = gui.addFolder('04_Feature2');
        for (var i = 0, len = feature2Handler.names.length; i < len; ++i) {
            feature2Folder.add(feature2Handler, feature2Handler.names[i]);
        }
        // Test cases related with visual feature
        var feature3Folder = gui.addFolder('04_Feature3');
        for (var i = 0, len = feature3Handler.names.length; i < len; ++i) {
            feature3Folder.add(feature3Handler, feature3Handler.names[i]);
        }
        // 移除css样式
        function removeCssOfPropertyName() {

            var textList = [];
            var i, j, len, len2;

            for (i = 0, len = viewHandler.names.length; i < len; ++i) {
                textList.push(viewHandler.names[i]);
            }

            for (i = 0, len = modelHandler.names.length; i < len; ++i) {
                textList.push(modelHandler.names[i]);
            }

            for (i = 0, len = featureHandler.names.length; i < len; ++i) {
                textList.push(featureHandler.names[i]);
            }

            for (i = 0, len = feature2Handler.names.length; i < len; ++i) {
                textList.push(feature2Handler.names[i]);
            }

            for (i = 0, len = feature3Handler.names.length; i < len; ++i) {
                textList.push(feature3Handler.names[i]);
            }
            var propertyName = document.querySelectorAll(".property-name");

            for (i = 0, len = propertyName.length; i < len; ++i) {

                for (j = 0, len2 = textList.length; j < len2; ++j) {

                    if (propertyName[i].innerHTML === textList[j]) {
                        propertyName[i].className = "";
                    }
                }

            }

        }

        removeCssOfPropertyName();

    };

    this.show = function (bShow) {
        gui.closed = !bShow;
    };
};