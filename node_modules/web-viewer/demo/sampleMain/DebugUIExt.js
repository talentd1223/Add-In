var DebugUIExt = function (viewer) {
    "use strict";

    var scope = this;

    // ----------- view house -- S ----------- //

    var container = document.getElementById('viewport');

    function onWindowResizeForHouse() {
        viewHouseHandler.isEnable && viewHouseHandler.resize(container.offsetWidth, container.offsetHeight, isMobile);
    }

    var viewHouseHandler = {
        house: null,
        isEnable: false,
        init: function (domElement) {
            viewHouseHandler.house = new CLOUD.ViewHouse(viewer);
            viewHouseHandler.house.init(domElement);
        },
        render: function () {
            if (viewHouseHandler.house) {
                viewHouseHandler.house.render();
            }
        },
        enable: function (enable) {

            if (viewHouseHandler.house) {

                if (enable) {

                    //this.isEnable = true;
                    viewHouseHandler.house.enable();

                } else {
                    //this.isEnable = false;
                    viewHouseHandler.house.disable();
                }
            }
        },
        resize: function (width, height, isMobile) {

            if (viewHouseHandler.house) {
                viewHouseHandler.house.resize(width, height, isMobile);
                viewHouseHandler.house.render();
            }
        },
        registerEventListener: function (callback) {
            window.addEventListener('resize', callback, false);
        },
        unregisterEventListener: function (callback) {
            window.removeEventListener('resize', callback, false);
        }
    };

    // ----------- view house -- E ----------- //

    // --------------- 批注测试 S ------------------ //


    var popupHandler = {
        showDetails: function (text) {

            var objTextarea;
            var objDivBox = document.getElementById('divBox');

            if (!objDivBox) {
                objDivBox = document.createElement("div");
                objDivBox.id = "divBox";
                document.body.appendChild(objDivBox);
            }

            // 显示遮盖的层
            var objDeck = document.getElementById("deck");
            if (!objDeck) {
                objDeck = document.createElement("div");
                objDeck.id = "deck";
                document.body.appendChild(objDeck);
            }

            objDeck.className = "showDeck";
            objDeck.style.filter = "alpha(opacity=50)";
            objDeck.style.opacity = 50 / 100;
            objDeck.style.MozOpacity = 50 / 100;

            var objTextarea = document.getElementById("popupText");

            if (!objTextarea) {

                objTextarea = document.createElement("textarea");
                objTextarea.id = "popupText";
                objTextarea.setAttribute('rows', '10');
                objTextarea.setAttribute('cols', '30');
                objTextarea.style.position = 'absolute';
                objTextarea.style.left = '30%';
                objDivBox.appendChild(objTextarea);
            }

            objTextarea.value = text;

            var objBtnOk = document.getElementById("myOk");

            if (!objBtnOk) {
                var objBtnOk = document.createElement("button");
                objBtnOk.id = "myOk";
                objBtnOk.style.position = 'absolute';
                objBtnOk.style.left = '30%';
                objBtnOk.style.bottom = '10%';
                objBtnOk.style.width = '100px';
                objBtnOk.style.height = '30px';
                objBtnOk.innerText = 'ok';
                objBtnOk.onclick = function () {
                    popupHandler.closeDetails();
                };

                objDivBox.appendChild(objBtnOk);
            }

            var objBtnCancel = document.getElementById("myCancel");

            if (!objBtnCancel) {
                var objBtnCancel = document.createElement("button");
                objBtnCancel.id = "myCancel";
                objBtnCancel.style.position = 'absolute';
                objBtnCancel.style.right = '30%';
                objBtnCancel.style.bottom = '10%';
                objBtnCancel.style.width = '100px';
                objBtnCancel.style.height = '30px';
                objBtnCancel.innerText = 'cancel';
                objBtnCancel.onclick = function () {
                    popupHandler.cancelDetails();
                };

                objDivBox.appendChild(objBtnCancel);
            }

            // 改变样式
            document.getElementById('divBox').className = 'showDlg';

            // 调整位置至居中
            popupHandler.adjustLocation();
        },

        closeDetails: function () {

            var popupText = document.getElementById('popupText');
            var text = popupText.value;

            document.getElementById('divBox').className = 'hideDlg';
            document.getElementById("deck").className = "hideDeck";

            annotationHandler.annotation3D.helper.setTextFromPopupBox(text);
        },

        cancelDetails: function () {

            var popupText = document.getElementById('popupText');

            document.getElementById('divBox').className = 'hideDlg';
            document.getElementById("deck").className = "hideDeck";

            annotationHandler.annotation3D.helper.unsetTextFromPopupBox();
        },

        adjustLocation: function () {

            var obox = document.getElementById('divBox');
            if (obox != null && obox.style.display != "none") {
                var w = 600;
                var h = 500;
                var oLeft, oTop;

                if (parent.window.innerWidth) {
                    oLeft = parent.window.pageXOffset + (parent.window.innerWidth - w) / 2 + "px";
                    oTop = parent.window.pageYOffset + (parent.window.innerHeight - h) / 2 + "px";
                }
                else {
                    var dde = document.documentElement;
                    oLeft = dde.scrollLeft + (dde.offsetWidth - w) / 2 + "px";
                    oTop = dde.scrollTop + (dde.offsetHeight - h) / 2 + "px";
                }

                obox.style.left = oLeft;
                obox.style.top = oTop;
            }

        }
    };

    var annotationData = {
        "camera": {
            "position": {
                "x": -391.99480995775264, "y": 391.9953116243204, "z": 496.6202512745534
            },
            "target": {
                "x": 0.0002987737534567714, "y": 0.00019894274568343917, "z": 104.6251372925957
            },
            "up": {
                "x": 0, "y": 1, "z": 0
            }
        },
        "filter": "{\"basicIds\":{\"2\":{\"1199299530629312.1591581\":true}},\"isolateIds\":{},\"frozenIds\":{},\"overrideByIds\":{},\"overrideByData\":{},\"userHiddenIds\":{},\"conditions\":{},\"isolateConditions\":{},\"sceneState\":0,\"camera\":{\"position\":{\"x\":-391.99480995775264,\"y\":391.9953116243204,\"z\":496.6202512745534},\"target\":{\"x\":0.0002987737534567714,\"y\":0.00019894274568343917,\"z\":104.6251372925957},\"up\":{\"x\":0,\"y\":1,\"z\":0}}}",
        "obj": [{
            "id": "1",
            "shapeType": 0,
            "position": {"x": 71.23688256237529, "y": -45.67894523081469, "z": 684.5485614469458},
            "size": {"width": 8.710042465764252, "height": 12},
            "rotation": 0.37814228621831986,
            "shapePoints": "",
            "originSize": null,
            "style": {
                "stroke-width": 3,
                "stroke-color": "#ff0000",
                "stroke-opacity": 1,
                "fill-color": "#ff0000",
                "fill-opacity": 0,
                "font-family": "Arial",
                "font-size": 16,
                "font-style": "",
                "font-weight": ""
            },
            "text": ""
        }, {
            "id": "2",
            "shapeType": 0,
            "position": {"x": 64.36193479050013, "y": -50.50249681253055, "z": 684.5485607706719},
            "size": {"width": 14.608815223680157, "height": 12},
            "rotation": 4.605922878604875,
            "shapePoints": "",
            "originSize": null,
            "style": {
                "stroke-width": 3,
                "stroke-color": "#ff0000",
                "stroke-opacity": 1,
                "fill-color": "#ff0000",
                "fill-opacity": 0,
                "font-family": "Arial",
                "font-size": 16,
                "font-style": "",
                "font-weight": ""
            },
            "text": ""
        }, {
            "id": "3",
            "shapeType": 3,
            "position": {"x": 78.5830967473488, "y": -44.90274148582472, "z": 684.5485614609383},
            "size": {"width": 10.81140929008211, "height": 5.7660845207562375},
            "rotation": 0,
            "shapePoints": "",
            "originSize": null,
            "style": {
                "stroke-width": 3,
                "stroke-color": "#ff0000",
                "stroke-opacity": 1,
                "fill-color": "#ff0000",
                "fill-opacity": 0,
                "font-family": "Arial",
                "font-size": 16,
                "font-style": "",
                "font-weight": ""
            },
            "text": ""
        }]
    };

    var annotationHandler = {};

    annotationHandler.annotation3D = {
        names: ['editBegin', 'editEnd', 'save', 'load', 'loadV3', 'clear', 'setBackgroundColor', 'captureScreen'],
        // helper: new CLOUD.Extensions.AnnotationHelper3D(viewer, {popupCallback: popupHandler.showDetails}),
        helper: new CLOUD.Extensions.AnnotationHelper3D(viewer),
        state: 0,
        annotationList: null,
        strokeColorState: 0,
        fontSizeState: 0,
        annotationStyle: {
            'stroke-width': 3,
            'stroke-color': '#ff0000'
        },

        // 开始编辑
        editBegin: function () {
            var helper = annotationHandler.annotation3D.helper;
            helper.editAnnotationBegin();
            scope.show(false);
        },

        // 结束编辑
        editEnd: function () {
            var helper = annotationHandler.annotation3D.helper;
            helper.editAnnotationEnd();
            scope.show(false);
        },

        // 保存
        save: function () {
            var helper = annotationHandler.annotation3D.helper;
            helper.annotationList = helper.getAnnotationInfoList();
            scope.show(false);
        },

        // 加载
        load: function () {
            var helper = annotationHandler.annotation3D.helper;

            if (helper.annotationList) {
                helper.loadAnnotations(helper.annotationList);
            }

            scope.show(false);
        },

        loadV3:function () {

            var helper = annotationHandler.annotation3D.helper;
            var jsonStr = JSON.stringify(annotationData);
            var jsonObj = viewer.convertAnnotationsToV3(jsonStr);
            var annotationInfoList = jsonObj.obj;
            var cameraStr = JSON.stringify(jsonObj.camera);

            viewer.setCamera(cameraStr,true, function () {
                helper.loadAnnotations(annotationInfoList);
            });

            scope.show(false);

        },

        clear: function () {
            var helper = annotationHandler.annotation3D.helper;

            helper.clearAnnotations();

            scope.show(false);
        },

        // 设置背景
        setBackgroundColor: function () {
            var startColor = "#6A8DE7";
            var stopColor = "#D6EEFA";
            var helper = annotationHandler.annotation3D.helper;
            helper.setAnnotationBackgroundColor(startColor, stopColor);
            scope.show(false);
        },

        // 截屏
        captureScreen: function () {

            var helper = annotationHandler.annotation3D.helper;
            // 在新窗口中显示图片
            var win = window.open();

            function snapshot(dataUrl) {

                if (dataUrl) {
                    // 在新窗口中显示图片
                    // var win = window.open();
                    win.document.write('<!DOCTYPE html><html lang="en">');
                    win.document.write('<head><meta charset="utf-8"><title>Cloud Viewer - Screen Shot</title>');
                    win.document.write('<link href="../css/main.css" rel="stylesheet" /></head>');
                    win.document.write('<div class="viewport"><div><img src="' + dataUrl + '" /> </div>');
                    win.document.write('</html>');
                    win.document.close();
                }
            }

            helper.captureAnnotationsScreenSnapshot(undefined, snapshot);

        }

    };

    annotationHandler.annotationDWG = {
        names: ['createDwg', 'destroyDwg', 'editBegin', 'editEnd', 'save', 'load', 'setBackgroundColor', 'captureScreen'],
        helper: new CLOUD.Extensions.AnnotationHelper2D(),
        state: 0,
        annotationList: null,
        annotationStyle: {
            'stroke-width': 3,
            'stroke-color': '#ff0000'
        },
        dwgContainer: null,
        dwgAnnotationContainer: null,
        dwgDiv: null,
        _createDwgContainer: function () {
            if (!annotationHandler.annotationDWG.dwgContainer) {

                var borderWidth = 1;
                var borderColor = 'rgb(0, 0, 255)';
                annotationHandler.annotationDWG.dwgContainer = document.createElement("div");
                annotationHandler.annotationDWG.dwgContainer.id = 'mod-dwg';
                annotationHandler.annotationDWG.dwgContainer.style.position = 'absolute';
                annotationHandler.annotationDWG.dwgContainer.style.width = '100%';
                annotationHandler.annotationDWG.dwgContainer.style.height = '100%';
                annotationHandler.annotationDWG.dwgContainer.style.top = "0";
                annotationHandler.annotationDWG.dwgContainer.style.left = "0";
                annotationHandler.annotationDWG.dwgContainer.style.border = borderWidth + 'px solid ' + borderColor;
                annotationHandler.annotationDWG.dwgContainer.style.background = '#000';
                annotationHandler.annotationDWG.dwgContainer.style.overflow = 'hidden';

                annotationHandler.annotationDWG.dwgAnnotationContainer = document.createElement("div");
                annotationHandler.annotationDWG.dwgAnnotationContainer.id = 'mod-dwg-2';
                annotationHandler.annotationDWG.dwgAnnotationContainer.style.position = 'absolute';
                annotationHandler.annotationDWG.dwgAnnotationContainer.style.width = '100%';
                annotationHandler.annotationDWG.dwgAnnotationContainer.style.height = '100%';
                annotationHandler.annotationDWG.dwgAnnotationContainer.style.top = "0";
                annotationHandler.annotationDWG.dwgAnnotationContainer.style.left = "0";
                annotationHandler.annotationDWG.dwgAnnotationContainer.style.border = borderWidth + 'px solid ' + borderColor;
                annotationHandler.annotationDWG.dwgAnnotationContainer.style.background = '#000';
                annotationHandler.annotationDWG.dwgAnnotationContainer.style.overflow = 'hidden';
                annotationHandler.annotationDWG.dwgAnnotationContainer.style.opacity = 0.4;
            }
        },
        _loadDwg: function () {
            if (!annotationHandler.annotationDWG.dwgDiv) {
                var borderWidth = 1;
                var borderColor = 'rgb(255, 0, 0)';
                annotationHandler.annotationDWG.dwgDiv = document.createElement("div");
                annotationHandler.annotationDWG.dwgDiv.style.border = borderWidth + 'px solid ' + borderColor;
            }

            if (annotationHandler.annotationDWG.dwgContainer) {

                if (!annotationHandler.annotationDWG.dwgDiv.parentNode) {
                    annotationHandler.annotationDWG.dwgContainer.appendChild(annotationHandler.annotationDWG.dwgDiv);
                }

                var imgList = annotationHandler.annotationDWG.dwgDiv.children;

                if (imgList) {

                    while (imgList.length) {
                        var img = imgList[0];
                        img.parentNode.removeChild(img)
                    }
                }

                var img1 = document.createElement("img");
                img1.alt = "Model_0_0";
                img1.src = "../images/dwg/Model_0_0.png";
                img1.style.width = "512px";
                img1.style.height = "512px";
                img1.style.top = "256px";
                img1.style.left = "256px";
                img1.style.position = 'absolute';

                var img2 = document.createElement("img");
                img2.alt = "Model_0_1";
                img2.src = "../images/dwg/Model_0_1.png";
                img2.style.width = "512px";
                img2.style.height = "512px";
                img2.style.top = "256px";
                img2.style.left = "768px";
                img2.style.position = 'absolute';

                var img3 = document.createElement("img");
                img3.alt = "Model_1_0";
                img3.src = "../images/dwg/Model_1_0.png";
                img3.style.width = "512px";
                img3.style.height = "512px";
                img3.style.top = "768px";
                img3.style.left = "256px";
                img3.style.position = 'absolute';

                var img4 = document.createElement("img");
                img4.alt = "Model_1_1";
                img4.src = "../images/dwg/Model_1_1.png";
                img4.style.width = "512px";
                img4.style.height = "512px";
                img4.style.top = "768px";
                img4.style.left = "768px";
                img4.style.position = 'absolute';

                annotationHandler.annotationDWG.dwgDiv.appendChild(img1);
                annotationHandler.annotationDWG.dwgDiv.appendChild(img2);
                annotationHandler.annotationDWG.dwgDiv.appendChild(img3);
                annotationHandler.annotationDWG.dwgDiv.appendChild(img4);
            }

            var helper = annotationHandler.annotationDWG.helper;
            helper.setDomContainer(annotationHandler.annotationDWG.dwgAnnotationContainer);
        },
        _unloadDwg: function () {
            if (annotationHandler.annotationDWG.dwgDiv.parentNode) {

                var imgList = annotationHandler.annotationDWG.dwgDiv.children;

                if (imgList) {

                    while (imgList.length) {
                        var img = imgList[0];
                        img.parentNode.removeChild(img)
                    }
                }

                annotationHandler.annotationDWG.dwgDiv.parentNode.removeChild(annotationHandler.annotationDWG.dwgDiv);
            }
        },
        _removeDwgContainer: function () {
            if (annotationHandler.annotationDWG.dwgContainer && annotationHandler.annotationDWG.dwgContainer.parentNode) {
                var parentNode = annotationHandler.annotationDWG.dwgContainer.parentNode;
                parentNode.removeChild(annotationHandler.annotationDWG.dwgContainer);
                parentNode.removeChild(annotationHandler.annotationDWG.dwgAnnotationContainer);
            }
        },
        _appendDwgContainer: function (parent) {
            if (annotationHandler.annotationDWG.dwgContainer && !annotationHandler.annotationDWG.dwgContainer.parentNode) {
                parent.appendChild(annotationHandler.annotationDWG.dwgContainer);
                parent.appendChild(annotationHandler.annotationDWG.dwgAnnotationContainer);
            }
        },
        createDwg: function () {
            var parent = document.querySelector("#viewport");
            annotationHandler.annotationDWG._createDwgContainer();
            annotationHandler.annotationDWG._appendDwgContainer(parent);
            annotationHandler.annotationDWG._loadDwg();
            scope.show(false);
        },
        destroyDwg: function () {
            annotationHandler.annotationDWG._unloadDwg();
            annotationHandler.annotationDWG._removeDwgContainer();
            scope.show(false);
        },
        // 开始编辑
        editBegin: function () {
            var absBasePoint = {x: 400, y: 400};
            var screenBasePoint = {x: 400, y: 400};
            var zoomFactor = {x: 1.0, y: 1.0};
            var helper = annotationHandler.annotationDWG.helper;

            helper.setEditCallback(function (domElement) {
                viewer.editorManager.unregisterDomEventListeners(domElement);
            }, function (domElement) {
                viewer.editorManager.registerDomEventListeners(domElement);
            });

            helper.editAnnotationBegin(absBasePoint, screenBasePoint, zoomFactor);
            scope.show(false);
        },

        // 结束编辑
        editEnd: function () {
            var helper = annotationHandler.annotationDWG.helper;
            helper.editAnnotationEnd();
            scope.show(false);
        },

        // 保存
        save: function () {
            var helper = annotationHandler.annotationDWG.helper;
            annotationHandler.annotationDWG.annotationList = helper.getAnnotationInfoList();
            scope.show(false);
        },

        // 加载
        load: function () {
            var helper = annotationHandler.annotationDWG.helper;
            var absBasePoint = {x: 400, y: 400};
            var screenBasePoint = {x: 400, y: 400};
            var zoomFactor = {x: 1.0, y: 1.0};

            if (annotationHandler.annotationDWG.annotationList) {
                helper.loadAnnotations(annotationHandler.annotationDWG.annotationList, absBasePoint, screenBasePoint, zoomFactor);
            }

            scope.show(false);
        },

        // 设置背景
        setBackgroundColor: function () {
            var startColor = "#6A8DE7";
            var stopColor = "#D6EEFA";
            var helper = annotationHandler.annotationDWG.helper;
            helper.setAnnotationBackgroundColor(startColor, stopColor);
            scope.show(false);
        },

        // 截屏
        captureScreen: function () {
            var win = window.open();

            var snapshotCallback = function (dataUrl) {
                var img = new Image();
                img.onload = function () {
                    img.onload = null;
                    win.document.body.appendChild(img);
                };
                img.onerror = function () {
                    img.onerror = null;
                    if (window.console.log) {
                        window.console.log("Not loaded image from canvas.toDataURL");
                    } else {
                        alert("Not loaded image from canvas.toDataURL");
                    }
                };

                img.src = dataUrl;
            };

            html2canvas(annotationHandler.annotationDWG.dwgContainer, {
                logging: true,
                onrendered: function (canvas) {
                    var dataUrl = canvas.toDataURL("image/png");
                    var helper = annotationHandler.annotationDWG.helper;
                    //dataUrl = helper.captureAnnotationsScreenSnapshot(dataUrl);
                    //snapshotCallback(dataUrl);
                    helper.captureAnnotationsScreenSnapshot(dataUrl, snapshotCallback);
                }
            });

            scope.show(false);
        }

    };

    // --------------- 批注测试 E ------------------ //

    // --------------- 标记测试 S ------------------ //

    var markerCallback = {
        clickMarkerCallback: function (marker) {
            if (marker) {
                console.log(marker);
                viewer.setSelection([marker.userId]);

                var zoomBox = marker.boundingBox;
                var refBox = markerHandler.helper.getMarkersBoundingBox();
                var direction = refBox.center().sub(zoomBox.center());
                viewer.zoomToBBoxByDirection(zoomBox, direction);
            }
        },
        renderMarkerCB: function () {
            markerHandler.helper.renderMarkers();
        },
        resizeMarkerCB: function () {
            markerHandler.helper.resizeMarkers();
        }
    };

    viewer.addCallbacks("render", markerCallback.renderMarkerCB);
    viewer.addCallbacks("resize", markerCallback.resizeMarkerCB);

    var markerHandler = {
        names: ['saveMarkers', 'loadMarkers', 'loadMarkersFromFile', 'zoomToSelectedMarkers'],
        helper: new CLOUD.Extensions.MarkerHelper(viewer),
        enableMakeMarker: false,
        markerInfoList: null,
        saveMarkers: function () {
            var helper = markerHandler.helper;
            markerHandler.markerInfoList = helper.getMarkerInfoList();
            scope.show(false);
        },
        loadMarkers: function () {
            if (markerHandler.markerInfoList) {
                var helper = markerHandler.helper;
                helper.setMarkerClickCallback(markerCallback.clickMarkerCallback);
                helper.loadMarkers(markerHandler.markerInfoList);
            }

            scope.show(false);
        },
        loadMarkersFromFile: function () {

            var loader = new THREE.XHRLoader();
            var helper = markerHandler.helper;

            // loader.setCrossOrigin(true);
            loader.load("../data/json/checkPoint.json", function (text) {

                var markerInfoList = [];
                var jsonObjList = JSON.parse(text);

                for (var i = 0, len = jsonObjList.length; i < len; i++) {

                    var userId = jsonObjList[i].componentId;

                    var position = {
                        x: jsonObjList[i].location.position.x,
                        y: jsonObjList[i].location.position.y,
                        z: jsonObjList[i].location.position.z
                    };
                    var boundingBox = new THREE.Box3();
                    boundingBox.max.x = jsonObjList[i].location.boundingBox.max.x;
                    boundingBox.max.y = jsonObjList[i].location.boundingBox.max.y;
                    boundingBox.max.z = jsonObjList[i].location.boundingBox.max.z;
                    boundingBox.min.x = jsonObjList[i].location.boundingBox.min.x;
                    boundingBox.min.y = jsonObjList[i].location.boundingBox.min.y;
                    boundingBox.min.z = jsonObjList[i].location.boundingBox.min.z;
                    var state = 0;

                    var info = {
                        id: userId + "_" + i,
                        userId: userId,
                        shapeType: 0,
                        position: position,
                        boundingBox: boundingBox,
                        state: state
                    };

                    markerInfoList.push(info);
                }

                helper.setMarkerClickCallback(markerCallback.clickMarkerCallback);
                helper.loadMarkers(markerInfoList);
                viewer.render();

            });

            scope.show(false);
        },
        zoomToSelectedMarkers: function () {

            var helper = markerHandler.helper;
            helper.zoomToSelectedMarkers();
            scope.show(false);
        }

    };

    // --------------- 标记测试 E ------------------ //

    var miniMapCallback = {

        renderCB: function () {
            miniMapHandler.helper.renderMiniMap();
        }
    };

    viewer.addCallbacks("render", miniMapCallback.renderCB);

    var onShowAxisGridInfo = function (evt) {
        var intersect = evt.intersectInfo;

        var selectedObjectId = intersect ? intersect.selectedObjectId : null;
        var helper = miniMapHandler.helper;

        if (!selectedObjectId) {
            viewer.showPickedInformation(null);
            return;
        }

        if (miniMapHandler.isCreateMiniMap) {
            helper.getAxisGridInfoByIntersect(intersect);
        }

        if (intersect.innnerDebugging) {
            viewer.showPickedInformation(evt);
        } else {
            viewer.showPickedInformation(null);
        }
    };

    viewer.registerEventListener(CLOUD.EVENTS.ON_CLICK_PICK, onShowAxisGridInfo);

    var axisMaxLevel = Demo.Data.miniMap.Maps.length - 1;
    var axisLevel = Math.round(axisMaxLevel / 2);
    var miniMapHandler = {
        names: ['createMiniMap', 'destroyMiniMap', 'createMiniMapSnapshot', 'destroyMiniMapSnapshot', 'flyByAxisGridNumber', 'addCustomEvent'],
        helper: new CLOUD.Extensions.MiniMapHelper(viewer),
        axisGridJsonObj: Demo.Data.axisGrid,
        axisGirdMaxLevel: axisMaxLevel,
        axisLevel: axisLevel,
        showGrid: false,
        closeMiniMap: false,
        showSnapshot: true,
        isCreateMiniMap: false,
        isCreateMiniMapSnapshot: false,
        miniMapDomContainer: null,
        miniMapSnapshotDomContainer: null,
        gridWidth: 600,
        gridHeight: 480,
        startMouse: {x:0, y: 0},
        mousePressed: false,
    _createMiniMapDomContainer: function () {
            CLOUD.MiniMap.crtMinimapType = 0;    
            var borderWidth = 1;
            var borderColor = 'rgb(0, 0, 255)';
            miniMapHandler.miniMapDomContainer = document.createElement("div");
            miniMapHandler.miniMapDomContainer.style.position = 'absolute';
            miniMapHandler.miniMapDomContainer.style.left = '20px';
            miniMapHandler.miniMapDomContainer.style.bottom = '100px';
            miniMapHandler.miniMapDomContainer.style.border = borderWidth + 'px solid ' + borderColor;
        },
        _removeMiniMapDomContainer: function () {
            if (miniMapHandler.miniMapDomContainer) {
                document.body.removeChild(miniMapHandler.miniMapDomContainer);
            }
        },
        _appendMiniMapDomContainer: function () {
            if (miniMapHandler.miniMapDomContainer) {
                document.body.appendChild(miniMapHandler.miniMapDomContainer);
            }
        },
        _createMiniMapSnapshotDomContainer: function () {
            CLOUD.MiniMap.crtMinimapType = 1;
            var borderWidth = 1;
            var borderColor = 'rgb(0, 0, 255)';
            miniMapHandler.miniMapSnapshotDomContainer = document.createElement("div");
            miniMapHandler.miniMapSnapshotDomContainer.style.position = 'absolute';
            miniMapHandler.miniMapSnapshotDomContainer.style.right = '20px';
            miniMapHandler.miniMapSnapshotDomContainer.style.top = '400px';
            miniMapHandler.miniMapSnapshotDomContainer.style.border = borderWidth + 'px solid ' + borderColor;
        },
        _removeMiniMapSnapshotDomContainer: function () {
            if (miniMapHandler.miniMapSnapshotDomContainer) {
                document.body.removeChild(miniMapHandler.miniMapSnapshotDomContainer);
            }
        },
        _appendMiniMapSnapshotDomContainer: function () {
            if (miniMapHandler.miniMapSnapshotDomContainer) {
                document.body.appendChild(miniMapHandler.miniMapSnapshotDomContainer);
            }
        },
        _callbackMiniMapCameraChanged: function (evt) {
            if (evt) {
                console.log("callbackMiniMapCameraChanged->", "isInScene:" + evt.isInScene + "," + evt.axis.infoX + "," + evt.axis.infoY);
            }
        },
        _callbackMiniMapClickOnAxisGrid: function (evt) {
            if (evt) {
                console.log("callbackMiniMapClickOnAxisGrid->", [evt.numeralName, evt.abcName, evt.offsetX, evt.offsetY]);
            }
        },
        createMiniMap: function () {

            if (miniMapHandler.isCreateMiniMap) {
                return;
            }

            var helper = miniMapHandler.helper;

            miniMapHandler._createMiniMapDomContainer();
            miniMapHandler._appendMiniMapDomContainer();

            var axisGridJsonObj = Demo.Data.axisGrid;
            var floorPlaneJsonObj = Demo.Data.miniMap.Maps[1];

            helper.setAxisGridData(axisGridJsonObj);
            helper.setFloorPlaneData(floorPlaneJsonObj);

            // 初始小地图
            helper.createMiniMap("m1", miniMapHandler.miniMapDomContainer, null, null, null, miniMapHandler._callbackMiniMapCameraChanged, null);
            helper.generateAxisGrid("m1");
            helper.generateFloorPlane("m1", false);
            helper.showAxisGrid("m1", false);

            miniMapHandler.isCreateMiniMap = true;

        },
        destroyMiniMap: function () {
            var helper = miniMapHandler.helper;
            helper.destroyMiniMap("m1");
            miniMapHandler.isCreateMiniMap = false;
        },
        createMiniMapSnapshot: function () {

            if (miniMapHandler.isCreateMiniMapSnapshot) {
                return;
            }

            var helper = miniMapHandler.helper;
            var defaultStyle = {
                position: "absolute",
                display: "block",
                top: "0px",
                right: "20px",
                outline: "#0000FF dotted thin"
            };

            miniMapHandler._createMiniMapSnapshotDomContainer();
            miniMapHandler._appendMiniMapSnapshotDomContainer();

            helper.createMiniMap("m2", miniMapHandler.miniMapSnapshotDomContainer, 600, 480, defaultStyle, null, miniMapHandler._callbackMiniMapClickOnAxisGrid);
            helper.enableAxisGridEvent("m2", false);
            //helper.enableMiniMapCameraNode("m2", false);
            // 测试先设置平面图，再设置轴网的情况
            helper.generateFloorPlane("m2", true);
            helper.generateAxisGrid("m2");
            helper.showAxisGrid("m2", true);

            miniMapHandler.isCreateMiniMapSnapshot = true;

        },
        destroyMiniMapSnapshot: function () {
            var helper = miniMapHandler.helper;
            helper.destroyMiniMap("m2");
            miniMapHandler.isCreateMiniMapSnapshot = false;
        },
        flyByAxisGridNumber: function () {

            var helper = miniMapHandler.helper;
            var abcName = 'C', numeralName = "2";

            var rt = helper.flyByAxisGridNumber('m2', abcName, numeralName);

            if (!rt) {
                console.log("failure");
            }
        },
        resize:function() {

            var helper = miniMapHandler.helper;
            var width = miniMapHandler.gridWidth;
            var height = miniMapHandler.gridHeight;
            var maps = helper.getMiniMaps();

            for (var name in maps) {
                var map = maps[name];
                map.resize(width, height);
            }
        },
        _updateCuttingBox: function (start, end) {

            var cuttingBoxEl = document.getElementById('cuttingBox');

            if (!cuttingBoxEl) {
                cuttingBoxEl = document.createElement("div");
                cuttingBoxEl.id = "cuttingBox";
                document.body.appendChild(cuttingBoxEl);
            }

            cuttingBoxEl.style.visibility = "visible";
            cuttingBoxEl.style.position = 'absolute';
            cuttingBoxEl.style.left = start.x + "px";
            cuttingBoxEl.style.top = start.y + "px";
            cuttingBoxEl.style.width = (end.x - start.x) + "px";
            cuttingBoxEl.style.height = (end.y - start.y) + "px";
            cuttingBoxEl.style.opacity = 0.5;
            cuttingBoxEl.style.background = 'yellow';
            cuttingBoxEl.style.border = '1px dashed red';
        },
        _hiddenCuttingBox: function () {
            var cuttingBoxEl = document.getElementById('cuttingBox');
            if (cuttingBoxEl) {
                cuttingBoxEl.style.visibility = "hidden";
            }
        },
        addCustomEvent:function () {
            var helper = miniMapHandler.helper;
            helper.addDomEventListeners('m1', function (event) {
                miniMapHandler.startMouse.x = event.clientX;
                miniMapHandler.startMouse.y =event.clientY;
                miniMapHandler.mousePressed = true;
            }, function (event) {
                if (miniMapHandler.mousePressed) {
                    var start = miniMapHandler.startMouse;
                    var end = {x: event.clientX, y: event.clientY};
                    miniMapHandler._updateCuttingBox(start, end);
                }
            },function (event) {
                if (miniMapHandler.mousePressed) {
                    miniMapHandler.mousePressed = false;
                    miniMapHandler._hiddenCuttingBox();
                    var start = miniMapHandler.startMouse;
                    var end = {x: event.clientX, y: event.clientY};
                    var box = helper.getCuttingBox('m1', start, end);
                    viewer.zoomToBBox(box);
                }
            })
        }

    };
    // Measure

    var measureCallback = {
        renderCB: function () {
            measureHandler.helper.update();
        },
        resizeCB: function () {
            measureHandler.helper.resize();
        },
        pickedCB: function (ids) {

            viewer.setSelection(ids);

            if (ids.length > 1) {
                console.log(ids);
            }
            filter.makeSelectedOthersTranslucent();
            viewer.render();

        }
    };

    viewer.addCallbacks("render", measureCallback.renderCB);
    viewer.addCallbacks("resize", measureCallback.resizeCB);

    var measureHandler = {
        names: ['activate', 'deactivate', 'reset', 'setStyle', 'resetStyle'],
        helper: new CLOUD.Extensions.MeasureHelper(viewer, {pickedCallback: measureCallback.pickedCB}),
        activate: function () {
            measureHandler.helper.activate();
            scope.show(false);
        },
        deactivate: function () {
            measureHandler.helper.deactivate();
            scope.show(false);
        },
        reset: function () {
            measureHandler.helper.reset();
            scope.show(false);
        },
        setStyle: function () {

            var style = {
                'stroke-width': 2,
                'stroke-color': '#00ff00',
                'stroke-opacity': 1.0,
                'fill-color': '#ff0000',
                'fill-opacity': 0.5,
                'font-family': 'Arial',
                'font-size': 16,
                'font-style': '',
                'font-weight': ''
            };

            measureHandler.helper.setStyle(style);
            scope.show(false);

        },

        resetStyle: function () {

            var style = CLOUD.Extensions.MeasureMark.getDefaultStyle();
            measureHandler.helper.setStyle(style);
            scope.show(false);

        }
    };

    var gui = new dat.GUI();

    // 设置gui面板样式
    gui.domElement.className = '';
    gui.domElement.style.position = 'absolute';
    gui.domElement.style.background = '#106068';
    gui.domElement.style.top = '50px';
    gui.domElement.style.left = '1%';
    gui.domElement.style.textAlign = 'center';

    this.addControls = function () {
        gui.closed = true;

        var annotationFolder = gui.addFolder('Annotation 3D');
        for (var i = 0, len = annotationHandler.annotation3D.names.length; i < len; ++i) {
            annotationFolder.add(annotationHandler.annotation3D, annotationHandler.annotation3D.names[i]);
        }

        annotationFolder.add(annotationHandler.annotation3D, 'state', 0, 6).step(1).name('state').listen()
            .onChange(
                function (value) {
                    var type = CLOUD.Extensions.Annotation.shapeTypes.ARROW;

                    switch (value) {
                        case 0:
                            type = CLOUD.Extensions.Annotation.shapeTypes.ARROW;
                            break;
                        case 1:
                            type = CLOUD.Extensions.Annotation.shapeTypes.RECTANGLE;
                            break;
                        case 2:
                            type = CLOUD.Extensions.Annotation.shapeTypes.CIRCLE;
                            break;
                        case 3:
                            type = CLOUD.Extensions.Annotation.shapeTypes.CROSS;
                            break;
                        case 4:
                            type = CLOUD.Extensions.Annotation.shapeTypes.CLOUD;
                            break;
                        case 5:
                            type = CLOUD.Extensions.Annotation.shapeTypes.TEXT;
                            break;
                        case 6:
                            type = CLOUD.Extensions.Annotation.shapeTypes.CLOUDEX;
                            break;
                        default :
                            type = CLOUD.Extensions.Annotation.shapeTypes.ARROW;
                            break;
                    }

                    var helper = annotationHandler.annotation3D.helper;
                    helper.setAnnotationType(type);
                }
            );

        annotationFolder.add(annotationHandler.annotation3D, 'fontSizeState', 0, 2).step(1).name('font size').listen()
            .onChange(
                function (value) {

                    var fontSize = 16;

                    switch (value) {
                        case 0:
                            fontSize = 16;
                            break;
                        case 1:
                            fontSize = 24;
                            break;
                        case 2:
                            fontSize = 32;
                            break;

                    }

                    var helper = annotationHandler.annotation3D.helper;
                    annotationHandler.annotation3D.annotationStyle['font-size'] = fontSize;
                    helper.setAnnotationStyle(annotationHandler.annotation3D.annotationStyle, true);
                }
            );

        annotationFolder.add(annotationHandler.annotation3D, 'strokeColorState', 0, 5).step(1).name('color').listen()
            .onChange(
                function (value) {

                    var strokeColor = '#ff0000';

                    switch (value) {
                        case 0:
                            strokeColor = '#ff0000';
                            break;
                        case 1:
                            strokeColor = '#00ff00';
                            break;
                        case 2:
                            strokeColor = '#0000ff';
                            break;
                        case 3:
                            strokeColor = '#ffff00';
                            break;
                        case 4:
                            strokeColor = '#ff00ff';
                            break;
                        case 5:
                            strokeColor = '#00ffff';
                            break;
                    }

                    var helper = annotationHandler.annotation3D.helper;
                    annotationHandler.annotation3D.annotationStyle['stroke-color'] = strokeColor;
                    helper.setAnnotationStyle(annotationHandler.annotation3D.annotationStyle, true);
                }
            );

        // dwg 批注
        var dwgFolder = gui.addFolder('DWG');
        for (var i = 0, len = annotationHandler.annotationDWG.names.length; i < len; ++i) {
            dwgFolder.add(annotationHandler.annotationDWG, annotationHandler.annotationDWG.names[i]);
        }

        dwgFolder.add(annotationHandler.annotationDWG, 'state', 0, 5).step(1).name('state').listen()
            .onChange(
                function (value) {
                    var type = CLOUD.Extensions.Annotation.shapeTypes.ARROW;

                    switch (value) {
                        case 0:
                            type = CLOUD.Extensions.Annotation.shapeTypes.ARROW;
                            break;
                        case 1:
                            type = CLOUD.Extensions.Annotation.shapeTypes.RECTANGLE;
                            break;
                        case 2:
                            type = CLOUD.Extensions.Annotation.shapeTypes.CIRCLE;
                            break;
                        case 3:
                            type = CLOUD.Extensions.Annotation.shapeTypes.CROSS;
                            break;
                        case 4:
                            type = CLOUD.Extensions.Annotation.shapeTypes.CLOUD;
                            break;
                        case 5:
                            type = CLOUD.Extensions.Annotation.shapeTypes.TEXT;
                            break;
                        default :
                            type = CLOUD.Extensions.Annotation.shapeTypes.ARROW;
                            break;
                    }

                    var helper = annotationHandler.annotationDWG.helper;
                    helper.setAnnotationType(type);
                }
            );


        // marker
        var markerFolder = gui.addFolder('Marker');
        for (var i = 0, len = markerHandler.names.length; i < len; ++i) {
            markerFolder.add(markerHandler, markerHandler.names[i]);
        }

        // miniMap
        var miniMapFolder = gui.addFolder('Mini-Map');
        for (var i = 0, len = miniMapHandler.names.length; i < len; ++i) {
            miniMapFolder.add(miniMapHandler, miniMapHandler.names[i]);
        }

        miniMapFolder.add(miniMapHandler, 'gridWidth', 200, 1000).step(10).name('Width').listen()
            .onChange(
                function (value) {

                    miniMapHandler.gridWidth = value;
                    miniMapHandler.resize();
                }
            );

        miniMapFolder.add(miniMapHandler, 'gridHeight', 200, 1000).step(10).name('Height').listen()
            .onChange(
                function (value) {
          
                    miniMapHandler.gridHeight = value;
                    miniMapHandler.resize();
                    
                }
            );

        // viewHouse
        var viewHouseFolder = gui.addFolder('ViewHouse');
        viewHouseFolder.add(viewHouseHandler, 'isEnable').name('enable').listen()
            .onChange(
                function (value) {

                    if (value) {

                        if (!viewHouseHandler.house) {

                            viewHouseHandler.init(container);
                            viewer.addRenderCallback(function () {
                                viewHouseHandler.render();
                            });
                        }

                        viewHouseHandler.enable(true);
                        viewHouseHandler.registerEventListener(onWindowResizeForHouse);

                        viewer.render();

                    } else {

                        if (viewHouseHandler.house) {
                            viewHouseHandler.enable(false);
                            viewHouseHandler.unregisterEventListener(onWindowResizeForHouse);

                            viewer.render();
                        }

                    }

                }
            );


        // Measure
        var measureFolder = gui.addFolder('Measure');
        for (var i = 0, len = measureHandler.names.length; i < len; ++i) {
            measureFolder.add(measureHandler, measureHandler.names[i]);
        }

        // 移除css样式
        function removeCssOfPropertyName() {

            var textList = [];
            var i, j, len, len2;

            for (i = 0, len = annotationHandler.annotation3D.names.length; i < len; ++i) {
                textList.push(annotationHandler.annotation3D.names[i]);
            }

            for (i = 0, len = annotationHandler.annotationDWG.names.length; i < len; ++i) {
                textList.push(annotationHandler.annotationDWG.names[i]);
            }

            for (i = 0, len = markerHandler.names.length; i < len; ++i) {
                textList.push(markerHandler.names[i]);
            }

            for (i = 0, len = miniMapHandler.names.length; i < len; ++i) {
                textList.push(miniMapHandler.names[i]);
            }

            for (i = 0, len = measureHandler.names.length; i < len; ++i) {
                textList.push(measureHandler.names[i]);
            }

            var propertyName = document.querySelectorAll(".property-name");

            for (i = 0, len = propertyName.length; i < len; ++i) {

                for (j = 0, len2 = textList.length; j < len2; ++j) {

                    if (propertyName[i].innerHTML === textList[j]) {
                        propertyName[i].className = "";
                    }
                }

            }

        }

        removeCssOfPropertyName();
    };

    this.show = function (bShow) {
        gui.closed = !bShow;
    };
};
