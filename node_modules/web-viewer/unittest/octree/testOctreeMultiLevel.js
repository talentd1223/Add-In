var OctreeNeighborTestMultiLevelHelper = function() {
	this.camera = new CLOUD.Camera(800, 600, 45, 0.1, CLOUD.GlobalData.SceneSize * 20.0);
	var target = new THREE.Vector3(0, 0, 0);

	this.setCamera = function(position, target) {
		var dir = new THREE.Vector3();
		dir.subVectors(target, position);
		this.camera.LookAt(target, dir, THREE.Object3D.DefaultUp);
		this.camera.getFrustum();
	}

	this.oId = 0;
	this.createOctant = function(node, min, max, octType) {
        node.center = new THREE.Vector3(0.5 * (max.x + min.x),
            0.5 * (max.y + min.y), 0.5 * (max.z + min.z));

		node.min = new THREE.Vector3();
		node.max = new THREE.Vector3();
		node.min.copy(min);
		node.max.copy(max);

        var x = max.x - min.x;
        var y = max.y - min.y;
        var z = max.z - min.z;
        node.size = x * x + y * y + z * z;

		node.octType = octType;

		if (node.depth == 2) {
			return;
		}

		var i;
		var child;
		var childMin = new THREE.Vector3();
		var childMax = new THREE.Vector3();
		var length = max.x - min.x;
		var childLength = length / 2;
		for (i=0; i<8; i++) {
			// skip some cell to test more complicated case
			if ((node.depth == 0 && (i ==0 || i == 3)) ||
				 (node.depth == 1 && ((i == 2 || i == 3)))
				) {
				continue;
			}

			child = new CLOUD.Loader.OctreeNode(this.oId++, node.depth+1);
			if (i%2 == 0) { // RIGHT
				childMax.x = node.center.x + childLength;
				childMin.x = node.center.x;
			}
			else { // LEFT
				childMax.x = node.center.x;
				childMin.x = node.center.x - childLength;
			}

			var j = i % 4;
			if (j < 2) { // UP
				childMax.y = node.center.y + childLength;
				childMin.y = node.center.y;
			}
			else { // DOWN
				childMax.y = node.center.y;
				childMin.y = node.center.y - childLength;
			}

			if (i < 4) { // FRONT
				childMax.z = node.center.z + childLength;
				childMin.z = node.center.z;
			}
			else { // BACK
				childMax.z = node.center.z;
				childMin.z = node.center.z - childLength;
			}

			this.createOctant(child, childMin, childMax, i);
			node.add(child);
		}

		node.updateMaxDepth();
	};

	this.createOctree = function () {
		var root = new CLOUD.Loader.OctreeNode(this.oId++, 0);
		var min = new THREE.Vector3(-16000, -16000, -16000);
		var max = new THREE.Vector3(16000, 16000, 16000);
        this.createOctant(root, min, max, 0);

		return root;
    };

	this.octreeRoot = this.createOctree();
};

QUnit.test( "octree face neighbor multi level - peer neighbor", function( assert ) {
	var helper = new OctreeNeighborTestMultiLevelHelper();

	// set camera
	var position = new THREE.Vector3(4000, -4000, 200);
	var target = new THREE.Vector3(4000, -4000, 0);
	helper.setCamera(position, target);

	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

	octUtil.outputOctree(octUtil.root, -1);

	// octant id: 12, face toward: B  - neighbor face : 31 (level 2)
	octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 3, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 12, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[2].octantId, 0, "Octants id that contains camera" );

	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 1, "Neighbor octant number");
	assert.equal(octants[0].octantId, 31, "Neighbor octant id");
});

QUnit.test( "octree face neighbor multi level - neighbor in diff depth", function( assert ) {
	var helper = new OctreeNeighborTestMultiLevelHelper();

	// set camera
	var position = new THREE.Vector3(12000, -12000, 1000);
	var target = new THREE.Vector3(12000, -12000, 0);
	helper.setCamera(position, target);

	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

	// octant id: 13, face toward: B  - no neighbor // Note: face 29 at level 1
	octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 3, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 13, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[2].octantId, 0, "Octants id that contains camera" );

	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 1, "Neighbor octant number");
	assert.equal(octants[0].octantId, 29, "Neighbor octant id");
});

QUnit.test( "octree face neighbor multi level - 1", function( assert ) {
	var helper = new OctreeNeighborTestMultiLevelHelper();

	// set camera
	var position = new THREE.Vector3(4000, -1000, -12000);
	var target = new THREE.Vector3(4000, 0, -12000);
	helper.setCamera(position, target);

	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

	// octant id: 33, face toward: U  - neighbor face : 21
	octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 3, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 33, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 29, "Octants id that contains camera" );
	assert.equal(containedOctants[2].octantId, 0, "Octants id that contains camera" );

	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 1, "Neighbor octant number");
	assert.equal(octants[0].octantId, 21, "Neighbor octant id");
});

QUnit.test( "octree face neighbor multi level - no neighbor 1", function( assert ) {
	var helper = new OctreeNeighborTestMultiLevelHelper();

	// set camera
	var position = new THREE.Vector3(11000, -4000, 4000);
	var target = new THREE.Vector3(12000, -4000, 4000);
	helper.setCamera(position, target);

	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

	// octant id: 11, face toward: R  - neighbor face : no
	octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 3, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 11, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[2].octantId, 0, "Octants id that contains camera" );

	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 0, "Neighbor octant number");
});

QUnit.test( "octree face neighbor multi level - peer neighbor 2", function( assert ) {
	var helper = new OctreeNeighborTestMultiLevelHelper();

	// set camera
	var position = new THREE.Vector3(1000, -4000, 4000);
	var target = new THREE.Vector3(1000, -4000, 4000);
	helper.setCamera(position, target);

	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

	// octant id: 12, face toward: L  - neighbor face : no
	octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 3, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 12, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[2].octantId, 0, "Octants id that contains camera" );

	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 0, "Neighbor octant number");
});

QUnit.test( "octree edge neighbor multi level - no peer neighbor", function( assert ) {
	var helper = new OctreeNeighborTestMultiLevelHelper();

	// set camera
	var position = new THREE.Vector3(1000, -1000, 12000);
	var target = new THREE.Vector3(0, 0, 12000);
	helper.setCamera(position, target);
	
	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

	// octant 10 toward LU - octant 1 at diff depth (no neighbor at same depth)
    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 3, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 10, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[2].octantId, 0, "Octants id that contains camera" );

	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 1, "Neighbor octant number");
	assert.equal(octants[0].octantId, 1, "Neighbor octant id");
});

QUnit.test( "octree edge neighbor multi level - peer neighbor", function( assert ) {
	var helper = new OctreeNeighborTestMultiLevelHelper();

	// set camera
	var position = new THREE.Vector3(1000, -4000, 4000);
	var target = new THREE.Vector3(0, 0, 4000);
	helper.setCamera(position, target);

	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

	// octant 12 toward LU - neighbor octant 6
    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 3, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 12, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[2].octantId, 0, "Octants id that contains camera" );

	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 1, "Neighbor octant number");
	assert.equal(octants[0].octantId, 6, "Neighbor octant id");
});

QUnit.test( "octree vertex neighbor multi level - no vertex neighbor", function( assert ) {
	var helper = new OctreeNeighborTestMultiLevelHelper();

	// set camera
	var position = new THREE.Vector3(100, -100, 14000);
	var target = new THREE.Vector3(0, 0, 16000);
	helper.setCamera(position, target);
	
	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

	// octant 10 toward LUF - edge neighbor octant 6 in diff level (no neighbor at same depth)
    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 3, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 10, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[2].octantId, 0, "Octants id that contains camera" );

	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 1, "Neighbor octant number");
	assert.equal(octants[0].octantId, 1, "Neighbor octant id");
});

QUnit.test( "octree vertex neighbor multi level - 1", function( assert ) {
	var helper = new OctreeNeighborTestMultiLevelHelper();

	// set camera
	var position = new THREE.Vector3(-1000, 15000, 1000);
	var target = new THREE.Vector3(0, 16000, 0);
	helper.setCamera(position, target);

	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

	// octant 4 toward RUB - neighbor octant 17, 23
    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 3, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 4, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 1, "Octants id that contains camera" );
	assert.equal(containedOctants[2].octantId, 0, "Octants id that contains camera" );

	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 2, "Neighbor octant number");
	assert.equal(octants[0].octantId, 17, "Neighbor octant id");
	assert.equal(octants[1].octantId, 23, "Neighbor octant id");
});

QUnit.test( "octree vertex neighbor multi level - 2", function( assert ) {
	var helper = new OctreeNeighborTestMultiLevelHelper();

	// set camera
	var position = new THREE.Vector3(-1000, 1000, 1000);
	var target = new THREE.Vector3(0, 0, 0);
	helper.setCamera(position, target);

	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

	// octant 6 toward RDB - neighbor octant 12, 31, 37
    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 3, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 6, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 1, "Octants id that contains camera" );
	assert.equal(containedOctants[2].octantId, 0, "Octants id that contains camera" );

	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 5, "Neighbor octant number");
	assert.equal(octants[0].octantId, 12, "Neighbor octant id");
	assert.equal(octants[1].octantId, 15, "Neighbor octant id");
	assert.equal(octants[2].octantId, 22, "Neighbor octant id");
	assert.equal(octants[3].octantId, 31, "Neighbor octant id");
	assert.equal(octants[4].octantId, 37, "Neighbor octant id");
});
