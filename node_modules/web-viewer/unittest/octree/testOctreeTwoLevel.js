var OctreeNeighborTestHelper = function() {
	this.camera = new CLOUD.Camera(800, 600, 45, 0.1, CLOUD.GlobalData.SceneSize * 20.0);
	var target = new THREE.Vector3(0, 0, 0);
	
	
	this.setCamera = function(position, target) {
		var dir = new THREE.Vector3();
		dir.subVectors(target, position);
		this.camera.LookAt(target, dir, THREE.Object3D.DefaultUp);
		this.camera.getFrustum();
	}
	
	this.oId = 0;
	this.createOctant = function(node, min, max, octType) {
        node.center = new THREE.Vector3(0.5 * (max.x + min.x),
            0.5 * (max.y + min.y), 0.5 * (max.z + min.z));

		node.min = new THREE.Vector3();
		node.max = new THREE.Vector3();
		node.min.copy(min);
		node.max.copy(max);

        var x = max.x - min.x;
        var y = max.y - min.y;
        var z = max.z - min.z;
        node.size = x * x + y * y + z * z;

		node.octType = octType;
		
		
		if (node.depth == 1) {
			return;
		}
		
		var i;
		var child;
		var childMin = new THREE.Vector3();
		var childMax = new THREE.Vector3();
		var length = max.x - min.x;
		var childLength = length / 2;
		for (i=0; i<8; i++) {
			child = new CLOUD.Loader.OctreeNode(this.oId++, node.depth+1);
			if (i%2 == 0) { // RIGHT
				childMax.x = node.center.x + childLength;
				childMin.x = node.center.x;
			}
			else { // LEFT
				childMax.x = node.center.x;
				childMin.x = node.center.x - childLength;
			}
			
			var j = i % 4;
			if (j < 2) { // UP
				childMax.y = node.center.y + childLength;
				childMin.y = node.center.y;
			}
			else { // DOWN
				childMax.y = node.center.y;
				childMin.y = node.center.y - childLength;
			}
			
			if (i < 4) { // FRONT
				childMax.z = node.center.z + childLength;
				childMin.z = node.center.z;
			}
			else { // BACK
				childMax.z = node.center.z;
				childMin.z = node.center.z - childLength;
			}
			
			this.createOctant(child, childMin, childMax, i);
			node.add(child);
		}

		node.updateMaxDepth();
	};

	this.createOctree = function () {
		var root = new CLOUD.Loader.OctreeNode(this.oId++, 0);
		var min = new THREE.Vector3(-10000, -10000, -10000);
		var max = new THREE.Vector3(10000, 10000, 10000);
        this.createOctant(root, min, max, 0);
		
		return root;
    };
	
	this.octreeRoot = this.createOctree();
};


QUnit.test( "octree face neighbor two level", function( assert ) {
	var helper = new OctreeNeighborTestHelper();
	
	// set camera
	var position = new THREE.Vector3(-10, -2500, -2500);
	var target = new THREE.Vector3(0, -2500, -2500);
	helper.setCamera(position, target);
	
	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);
	
	octUtil.outputOctree(octUtil.root, -1);

    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;
	
	assert.equal(containedOctants.length, 2, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 0, "Octants id that contains camera" );
	
	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 1, "Neighbor octant number");
	assert.equal(octants[0].octantId, 7, "Neighbor octant id");
});

QUnit.test( "octree face neighbor two level - no neighbor", function( assert ) {
	var helper = new OctreeNeighborTestHelper();
	
	// set camera
	var position = new THREE.Vector3(-9990, -7500, -7500);
	var target = new THREE.Vector3(-10000, -7500, -7500);
	helper.setCamera(position, target);
	
	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 2, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 0, "Octants id that contains camera" );
	
	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 0, "Neighbor octant number");

	assert.ok( 1 == "1", "Passed!" );
});

QUnit.test( "octree edge neighbor two level - 1", function( assert ) {
	var helper = new OctreeNeighborTestHelper();
	
	// set camera
	var position = new THREE.Vector3(-1000, -5000, -8000);
	var target = new THREE.Vector3(0, -5000, -10000);
	helper.setCamera(position, target);
	
	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;
	
	assert.equal(containedOctants.length, 2, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 0, "Octants id that contains camera" );
	
	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 1, "Neighbor octant number");
	assert.equal(octants[0].octantId, 7, "Neighbor octant id");
});

QUnit.test( "octree edge neighbor two level - 2", function( assert ) {
	var helper = new OctreeNeighborTestHelper();
	
	// set camera
	var position = new THREE.Vector3(-1000, -1000, -7500);
	var target = new THREE.Vector3(0, 0, -7500);
	helper.setCamera(position, target);
	
	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;
	
	assert.equal(containedOctants.length, 2, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 0, "Octants id that contains camera" );
	
	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 3, "Neighbor octant number");
	assert.ok(octants[0].octantId === 5, "Neighbor octant id");
	assert.ok(octants[1].octantId === 6, "Neighbor octant id");
	assert.ok(octants[2].octantId === 7, "Neighbor octant id");
});

QUnit.test( "octree edge neighbor two level - no neighbor", function( assert ) {
	var helper = new OctreeNeighborTestHelper();
	
	// set camera
	var position = new THREE.Vector3(-9990, -9500, -7500);
	var target = new THREE.Vector3(-10000, -10000, -7500);
	helper.setCamera(position, target);
	
	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 2, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 8, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 0, "Octants id that contains camera" );
	
	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 0, "Neighbor octant number");
});

QUnit.test( "octree vertex neighbor two level - 1", function( assert ) {
	var helper = new OctreeNeighborTestHelper();
	
	// set camera
	var position = new THREE.Vector3(1000, 1000, 1000);
	var target = new THREE.Vector3(0, 0, 0);
	helper.setCamera(position, target);
	
	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;
	
	assert.equal(containedOctants.length, 2, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 1, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 0, "Octants id that contains camera" );
	
	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 7, "Neighbor octant number");
	assert.equal(octants[0].octantId, 2, "Neighbor octant id");
	assert.equal(octants[1].octantId, 3, "Neighbor octant id");
	assert.equal(octants[2].octantId, 4, "Neighbor octant id");
	assert.equal(octants[3].octantId, 5, "Neighbor octant id");
	assert.equal(octants[4].octantId, 6, "Neighbor octant id");
	assert.equal(octants[5].octantId, 7, "Neighbor octant id");
	assert.equal(octants[6].octantId, 8, "Neighbor octant id");
});

QUnit.test( "octree vertex neighbor two level - 2", function( assert ) {
	var helper = new OctreeNeighborTestHelper();
	
	// set camera
	var position = new THREE.Vector3(100, 9900, 100);
	var target = new THREE.Vector3(0, 10000, 0);
	helper.setCamera(position, target);
	
	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;
	
	assert.equal(containedOctants.length, 2, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 1, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 0, "Octants id that contains camera" );
	
	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 3, "Neighbor octant number");
	assert.ok(octants[0].octantId === 2, "Neighbor octant id");
	assert.ok(octants[1].octantId === 5, "Neighbor octant id");
	assert.ok(octants[2].octantId === 6, "Neighbor octant id");
});

QUnit.test( "octree vertex neighbor two level - no neighbor", function( assert ) {
	var helper = new OctreeNeighborTestHelper();
	
	// set camera
	var position = new THREE.Vector3(9000, 9000, 9000);
	var target = new THREE.Vector3(10000, 10000, 10000);
	helper.setCamera(position, target);
	
	var octUtil = new CLOUD.OctantNeighborUtil(helper.camera, helper.octreeRoot);

    octUtil.findContainNode(octUtil.root);
    var containedOctants = octUtil.containedOctants;

	assert.equal(containedOctants.length, 2, "Octants number that contains camera" );
	assert.equal(containedOctants[0].octantId, 1, "Octants id that contains camera" );
	assert.equal(containedOctants[1].octantId, 0, "Octants id that contains camera" );
	
	var octants = octUtil.findNeighborNode();
	assert.equal(octants.length, 0, "Neighbor octant number");
});
