
// test cases of QUnit are running simultaneously and asynchronous,
// and a global filter is used, so we cannot write multiple test case to test
// the selection API.
// After change the filter to support multiple instance, please separate test case
// for each API method

QUnit.test( "selection API", function( assert ) {
    var viewer = new CLOUD.Viewer();

    var eventNumEmitted = 0;
    var onSelectionChagned = function (evt) {

        if (evt.selectionList) {

            eventNumEmitted++;
        } else {
            console.log("Illegal ON_SELECTION_CHANGED event: no selectionList returned");
        }
    };

    viewer.registerEventListener(CLOUD.EVENTS.ON_SELECTION_CHANGED, onSelectionChagned);

	var objList = ["0", "1", "2"];
	viewer.addToSelection(objList);
    viewer.addToSelection(objList);

    var result = viewer.getSelection();
    assert.deepEqual(result, objList, "test addToSelection");
    assert.equal(eventNumEmitted, 1, "test event number");

    var removeList = ["2", "3", "4"];
    viewer.removeFromSelection(removeList);
    result = viewer.getSelection();
    assert.deepEqual(result, ["0", "1"], "test removeFromSelection");
    assert.equal(eventNumEmitted, 2, "test event number");

    viewer.setSelection(["1", "3", "4"]);
    result = viewer.getSelection();
    assert.deepEqual(result, ["1", "3", "4"], "test setSelection");
    assert.equal(eventNumEmitted, 3, "test event number");

    viewer.setSelection(["1", "3", "4"]);
    assert.equal(eventNumEmitted, 3, "test event number");

    viewer.setSelection([]);
    result = viewer.getSelection();
    assert.equal(result.length, 0, "test setSelection");
    assert.equal(eventNumEmitted, 4, "test event number");

    viewer.clearSelection();
    assert.equal(eventNumEmitted, 4, "test event number");

    viewer.addToSelection(objList);
    viewer.clearSelection();
    result = viewer.getSelection();
    assert.equal(result.length, 0, "test clearSelection");
    assert.equal(eventNumEmitted, 6, "test event number");
});
