var FilterTestHelper = function() {

    var createObjects = function() {
        var objNum = 10;
        var objects = [];
        for (var i = 0; i < objNum; i++) {
            var object = {};
            object.name = i.toString();
            object.userData = {};
            object.userData.categoryId = (i % 3).toString();
            object.userData.levelName = (i % 4).toString();
            object.userData.specialty = (i % 2).toString();
            object.userData.sceneId = i.toString();
            //object.userData.name = (i + 100).toString();
            objects[i] = object;
        }

        return objects;
    };

    this._objectList = createObjects();
    this._customTagIndex = 2;
    var obj = this._objectList[this._customTagIndex];
    obj.customTag = true;

    this.getCustomTagObjectIndex = function() {
        return this._customTagIndex;
    };

    this.getObjects = function() {
        return this._objectList;
    }
};

var filterTestCheckResult = function(assert, objects, filterFunc, expected, label) {

    var visibleObjs = {};
    var visibleCount = 0;
    for (var i = 0; i < objects.length; i++) {
        if (filterFunc(objects[i])) {
            visibleObjs[i] = true;
            visibleCount++;
        }
    }
    assert.equal(visibleCount, expected.length, label + " number");
    for (i = 0; i < expected.length; i++) {
        assert.equal(visibleObjs[expected[i]], true, label + " index");
    }
};

var filterTestCheckMaterial = function(assert, objects, filter, expectedIds, expectedMaterial, label) {

    var matchObjs = {};
    var matchCount = 0;
    for (var i = 0; i < objects.length; i++) {
        var material = filter._getOverrideMaterial(objects[i]);
        if ((expectedMaterial === null && material === null) ||
            (expectedMaterial && material && (material.name === expectedMaterial.name))) {
            matchObjs[i] = true;
            matchCount++;
        }
    }
    assert.equal(matchCount, expectedIds.length, label + " number");
    for (i = 0; i < expectedIds.length; i++) {
        assert.equal(matchObjs[expectedIds[i]], true, label + " index");
    }
};
