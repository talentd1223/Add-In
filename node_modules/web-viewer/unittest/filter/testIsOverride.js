
QUnit.test( "test hasOverride 1-no filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object");

});

QUnit.test( "test hasOverride 3-override filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [1, 5, 8, 9];
    filter.addToOverrideList("test1", ids, "scene");
    var expected = [1, 5, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 1");

    ids = [8, 9];
    filter.removeFromOverrideList("test2", ids);
    expected = [1, 5, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 2");

    ids = [8, 9];
    filter.removeFromOverrideList("test1", ids);
    expected = [1, 5];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 3");

    ids = [1, 2, 7];
    filter.addToOverrideList("test2", ids, "abc");
    expected = [1, 2, 5, 7];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 4");

    ids = [5, 8];
    filter.setOverrideList("test2", ids, "selected");
    expected = [1, 5, 8];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 5");

    filter.clearOverrideList("test2");
    expected = [1, 5];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 6");

    ids = [0, 3];
    filter.setOverrideList("test1", ids, "noThisMaterial");
    expected = [0, 3];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 7");

    filter.clearAllOverrideList();
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 8");

    // test addToOverrideListByColor() for override filter
    //
    ids = [1, 4];
    filter.addToOverrideListByColor("test1", ids, undefined);
    expected = [1, 4];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 9");

    filter.clearAllOverrideList();
    filter.addToOverrideListByColor("test1", ids, null);
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 10");

    var color = {};
    filter.clearAllOverrideList();
    filter.addToOverrideListByColor("test1", ids, color);
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 11");

    color.color = [0.0, 1.0, 0.0];
    filter.clearAllOverrideList();
    filter.addToOverrideListByColor("test1", ids, color);
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 12");

    color.opacity = 1.0;
    filter.clearAllOverrideList();
    filter.addToOverrideListByColor("test1", ids, color);
    expected = [1, 4];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object - 13 ");

    ids = [2];
    filter.setOverrideListByColor("test1", ids, color);
    expected = [2];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object");
});

QUnit.test( "test hasOverride 4- user override filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var keys = [1, 3];
    filter.addToUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "levelName", keys, "scene");
    var expected = [1, 3, 5, 7, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    keys = [1];
    filter.removeFromUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "levelName", keys);
    expected = [3, 7];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    filter.clearUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "levelName");
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    keys = [2];
    filter.setUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "levelName", keys, "scene");
    expected = [2, 6];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    filter.clearUserListByType(CLOUD.EnumUserType.OVERRIDE_DATA);
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    filter.setUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "levelName", keys, "scene");
    filter.clearAllUserList();
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

});

QUnit.test( "test hasOverride 5- condition override filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var condition = [{condition:{levelName:'0'}, material: 'scene'}, {condition:{specialty:'1'}, material:'selection'}];
    filter.setConditions(CLOUD.EnumConditionType.OVERRIDE, condition);
    var expected = [0, 1, 3, 4, 5, 7, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    filter.clearConditions(CLOUD.EnumConditionType.OVERRIDE);
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    condition = [{condition:{levelName:'1'}, material: 'scene'}, {condition:{specialty:'0'}, material:'selection'}];
    filter.setConditions(CLOUD.EnumConditionType.OVERRIDE, condition);

    expected = [0, 1, 2, 4, 5, 6, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    filter.clearAllConditions();
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    condition = undefined;
    filter.setConditions(CLOUD.EnumConditionType.OVERRIDE, condition);
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

});

QUnit.test( "test hasOverride 6- condition translucent others filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var condition = [{specialty : 1}, {levelName: 0}, {levelName : 1}];
    filter.setConditions(CLOUD.EnumConditionType.TRANSLUCENT_OTHERS, condition);
    var expected = [0, 1, 3, 4, 5, 7, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    filter.clearConditions(CLOUD.EnumConditionType.TRANSLUCENT_OTHERS);
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    condition = [{specialty : 0}, {levelName: 0}, {levelName : 1}, {a : 2}];
    filter.setConditions(CLOUD.EnumConditionType.TRANSLUCENT_OTHERS, condition);

    expected = [0, 1, 2, 4, 5, 6, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    filter.clearAllConditions();
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

    condition = undefined;
    filter.setConditions(CLOUD.EnumConditionType.TRANSLUCENT_OTHERS, condition);
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "user override object");

});

QUnit.test( "test hasOverride 7- isolate condition translucent others filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var condition = [{specialty : 1}, {levelName: 1}, {levelName : 2}];
    filter.setIsolateConditions(condition, CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS);

    var expected = [0, 4, 8];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "isolate condition object");

    filter.clearIsolateConditions(CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS);
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "isolate condition object");

    condition = [{specialty : 0}, {levelName: 1}, {levelName : 2}, {a : 2}];
    filter.setIsolateConditions(condition, CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS);
    expected = [3, 7];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "isolate condition object");

    filter.clearIsolateConditions(CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS);
    expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "isolate condition object");

});

QUnit.test( "test hasOverride 8- multiple conditions", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var keys = [0];
    filter.addToUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "levelName", keys, "scene");

    var condition = [ {levelName: 1}, {levelName: 2}];
    filter.setIsolateConditions(condition, CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS);

    var expected = [0, 3, 4, 7, 8];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object");
});

QUnit.test( "test hasOverride 9- multiple conditions", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var color = {color : [0.0, 1.0, 0.0], opacity : 1.0};
    ids = [2];
    filter.setOverrideListByColor("test1", ids, color);

    var condition = [{condition:{levelName:'1'}, material: 'scene'}, {condition:{specialty:'1'}, material:'selection'}];
    filter.setConditions(CLOUD.EnumConditionType.OVERRIDE, condition);

    var expected = [1, 2, 3, 5, 7, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._hasOverrideMaterial.bind(filter), expected, "override object");
});
