
QUnit.test( "test isVisible 0-no filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var expectHiddenIds = [];

    filterTestCheckResult(assert, helper.getObjects(), filter._isHiddenFileId.bind(filter), expectHiddenIds, "visible file id");

});

QUnit.test( "test isHiddenFileId 1-visible", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [1, 2, 5, 7, 9, 11];
    filter.addToIdList(CLOUD.EnumIdBasedType.FILE_VISIBLE, ids);

    var expectHiddenIds = [0, 3, 4, 6, 8];
    filterTestCheckResult(assert, helper.getObjects(), filter._isHiddenFileId.bind(filter), expectHiddenIds, "visible file id");

});

QUnit.test( "test isHiddenFileId 2-hidden", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [1, 2, 5, 7, 9, 11];
    filter.addToIdList(CLOUD.EnumIdBasedType.FILE_HIDDEN, ids);

    var expectHiddenIds = [1, 2, 5, 7, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isHiddenFileId.bind(filter), expectHiddenIds, "visible file id");

});

QUnit.test( "test isHiddenFileId 3-multiple condition", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [1, 2, 3, 4, 7, 8, 11];
    filter.addToIdList(CLOUD.EnumIdBasedType.FILE_VISIBLE, ids);

    var ids = [1, 2, 5, 7, 9, 11];
    filter.addToIdList(CLOUD.EnumIdBasedType.FILE_HIDDEN, ids);

    var expectHiddenIds = [0, 1, 2, 5, 6, 7, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isHiddenFileId.bind(filter), expectHiddenIds, "visible file id");

});