

QUnit.test( "test isSelectable 0-no filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var expected = [];
    var objects = helper.getObjects();
    for (var i = 0; i < objects.length; i++) {
        expected.push(i);
    }

    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable object");

});

QUnit.test( "test isSelectable 1-sceneState", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();
    filter.setSceneState(CLOUD.EnumSceneState.TRANSLUCENT);

    var expected = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable object");

});

QUnit.test( "test isSelectable 2--frozen", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [0, 2, 3, 5, 8, 9, 12];
    filter.addToFrozenList(ids);
    var expected = [1, 4, 6, 7];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable 2-1");

    ids = [1, 6, 11];
    filter.addToFrozenList(ids);
    expected = [4, 7];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable 2-2");

    ids = [2, 6, 11];
    filter.removeFromFrozenList(ids);
    expected = [2, 4, 6, 7];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable 2-3");

    filter.clearFrozenList();
    expected = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable 2-4");

    ids = [2, 7, 11];
    filter.setFrozenList(ids);
    expected = [0, 1, 3, 4, 5, 6, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable 2-5");

});

QUnit.test( "test isSelectable 2.5--frozen condition", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var condition = [{specialty : 1}, {levelName: 2}, {levelName : 3}];
    filter.setFrozenConditions(condition);

    var expected = [0, 4, 8];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable condition 1");

    filter.clearFrozen();
    expected = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable condition 2");

});

QUnit.test( "test isSelectable 3--translucent", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [0, 2, 3, 5, 8, 9, 12];
    filter.addToIdList(CLOUD.EnumIdBasedType.TRANSLUCENT, ids);

    var expected = [1, 4, 6, 7];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable object");

});

QUnit.test( "test isSelectable 4--translucent others", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [0, 2, 3, 5, 8, 9, 12];
    filter.addToIdList(CLOUD.EnumIdBasedType.TRANSLUCENT_OTHERS, ids);

    var expected = [0, 2, 3, 5, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable object");

});

QUnit.test( "test isSelectable 5--condition translucent others", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var condition = [{specialty : 1}, {levelName: 2}, {levelName : 3}];
    filter.setConditions(CLOUD.EnumConditionType.TRANSLUCENT_OTHERS, condition);

    var expected = [1, 2, 3, 5, 6, 7, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable object");

});

QUnit.test( "test isSelectable 6--isolate translucent", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [2, 3, 4, 7, 8, 9, 10, 11];
    filter.addToIsolateList(CLOUD.EnumIsolateState.TRANSLUCENT, ids);

    var expected = [0, 1, 5, 6];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable object");

});

QUnit.test( "test isSelectable 7--isolate translucent others", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [2, 3, 4, 7, 8, 9, 10, 11];
    filter.addToIsolateList(CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS, ids);

    var expected = [2, 3, 4, 7, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable object");

});

QUnit.test( "test isSelectable 8--isolate condition translucent others", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var condition = [{specialty : 1}, {levelName: 1}, {levelName : 2}];
    filter.setIsolateConditions(condition, CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS);

    var expected = [1, 2, 3, 5, 6, 7, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable object");

});

QUnit.test( "test isSelectable 9--multiple condition", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [0, 5, 8, 12];
    filter.addToFrozenList(ids);
    //var expected = [1, 2, 3, 4, 6, 7, 9];

    ids = [0, 2, 3, 5, 8, 9, 12];
    filter.addToIdList(CLOUD.EnumIdBasedType.TRANSLUCENT_OTHERS, ids);
    //var expected = [2, 3, 9];

    ids = [2, 11];
    filter.addToIsolateList(CLOUD.EnumIsolateState.TRANSLUCENT, ids);
    //var expected = [3, 9];

    var condition = [{specialty : 1}, {levelName: 1}, {levelName : 2}];
    filter.setIsolateConditions(condition, CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS);

    var expected = [3, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable object");

});


QUnit.test( "test isSelectable 10--multiple condition", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [0, 2, 9, 12];
    filter.addToIdList(CLOUD.EnumIdBasedType.TRANSLUCENT, ids);
    //var expected = [1, 3, 4, 5, 6, 7, 8];

    var condition = [{specialty : 1}, {levelName: 2}, {levelName : 3}];
    filter.setConditions(CLOUD.EnumConditionType.TRANSLUCENT_OTHERS, condition);
    //var expected = [1, 3, 5, 6, 7];

    ids = [2, 3, 4, 7, 8, 9, 10, 11];
    filter.addToIsolateList(CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS, ids);

    var expected = [3, 7];
    filterTestCheckResult(assert, helper.getObjects(), filter._isSelectable.bind(filter), expected, "selectable object");

});
