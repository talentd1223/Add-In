
QUnit.test( "test isVisible 1-no filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clear();
    var expectVisibleIds = [];
    var objects = helper.getObjects();
    for (var i = 0; i < objects.length; i++) {
        expectVisibleIds.push(i);
    }

    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "visible object");

});

QUnit.test( "test isVisible 2-sceneState", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clear();
    filter.setSceneState(CLOUD.EnumSceneState.HIDDEN);

    var expectVisibleIds = [];
    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "hide scene object");

});

QUnit.test( "test isVisible 3-basic hidden", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clear();

    var ids = [0, 2, 3, 4, 8, 9, 12];
    filter.addToIdList(CLOUD.EnumIdBasedType.HIDDEN, ids);

    var expectVisibleIds = [1, 5, 6, 7];
    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "basic hidden object");

});

QUnit.test( "test isVisible 4-basic visible", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clear();

    var ids = [0, 2, 3, 4, 8, 9, 12];
    filter.addToIdList(CLOUD.EnumIdBasedType.VISIBLE, ids);

    var expectVisibleIds = [0, 2, 3, 4, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "basic visible object");

});

QUnit.test( "test isVisible 5-user hidden", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clear();

    var userHiddenList = {specialty : {0 : true}, levelName : {0: true, 3: true, 5: true}};

    filter.addToUserList(CLOUD.EnumUserType.HIDDEN_DATA, "specialty", [0], true);
    filter.addToUserList(CLOUD.EnumUserType.HIDDEN_DATA, "levelName", [0, 3, 5], true);
    var expectVisibleIds = [1, 5, 9];

    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "user hidden object");

});

QUnit.test( "test isVisible 6-condition hidden others", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clear();

    var condition = [{specialty : 1}, {levelName: 2}, {levelName : 3}];
    filter.setConditions(CLOUD.EnumConditionType.HIDDEN_OTHERS, condition);
    var expectVisibleIds = [1, 2, 3, 5, 6, 7, 9];

    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "condition hidden others object");

});

QUnit.test( "test isVisible 7-isolate hidden", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clear();

    var ids = [2, 3, 4, 7, 8, 9, 10, 11];
    filter.addToIsolateList(CLOUD.EnumIsolateState.HIDDEN, ids);
    var expectVisibleIds = [0, 1, 5, 6];

    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "isolate hidden object");
});

QUnit.test( "test isVisible 8-isolate hidden others", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clear();

    var ids = [2, 3, 9, 10, 11];
    filter.addToIsolateList(CLOUD.EnumIsolateState.HIDDEN_OTHERS, ids);
    var expectVisibleIds = [2, 3, 9];

    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "isolate hidden other object");
});

QUnit.test( "test isVisible 9--isolate condition hidden others", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clear();

    var condition = [{specialty : 1}, {levelName: 1}, {levelName : 3}];
    filter.setIsolateConditions(condition, CLOUD.EnumIsolateState.HIDDEN_OTHERS);

    var expectVisibleIds = [1, 3, 5, 7, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "isolate condition hidden others object");

});

// more test case for multiple filter condition
QUnit.test( "test isVisible 10--multiple condition", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clear();

    var expectVisibleIds;
    var ids = [0, 2, 3, 5, 8, 9, 12];
    filter.addToIdList(CLOUD.EnumIdBasedType.VISIBLE, ids);

    expectVisibleIds = [0, 2, 3, 5, 8, 9];
    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "multiple condition hidden object");

    ids = [2, 4, 7, 8, 9, 10, 11];
    filter.addToIsolateList(CLOUD.EnumIsolateState.HIDDEN, ids);

    //expectVisibleIds = [0, 1, 2, 5, 6];
    expectVisibleIds = [0, 3, 5];
    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "multiple condition hidden object");

    var condition = [{specialty : 1}, {levelName: 1}, {levelName : 3}];
    filter.setIsolateConditions(condition, CLOUD.EnumIsolateState.HIDDEN_OTHERS);

    expectVisibleIds = [3, 5];
    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "multiple condition hidden object");

    //var userHiddenList = {specialty : {0 : true}, levelName : {0: true, 3: true, 5: true}};
    filter.addToUserList(CLOUD.EnumUserType.HIDDEN_DATA, "specialty", [0], true);
    filter.addToUserList(CLOUD.EnumUserType.HIDDEN_DATA, "levelName", [0, 3, 5], true);

    expectVisibleIds = [5];
    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "multiple condition hidden object");

});

QUnit.test( "test isVisible 11--multiple condition", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clear();

    var ids = [0, 2, 4, 8, 9, 12];
    filter.addToIdList(CLOUD.EnumIdBasedType.HIDDEN, ids);

    var ids = [2, 3, 7, 8, 9, 10, 11];
    filter.addToIsolateList(CLOUD.EnumIsolateState.HIDDEN_OTHERS, ids);

    var expectVisibleIds = [3, 7];
    filterTestCheckResult(assert, helper.getObjects(), filter._isVisible.bind(filter), expectVisibleIds, "multiple condition hidden object");

});
