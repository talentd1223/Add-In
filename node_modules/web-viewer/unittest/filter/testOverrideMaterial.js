
QUnit.test( "test override material 1-no filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var expected = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expected, null, "override material");

});

QUnit.test( "test override material 2-sceneState", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();
    filter.setSceneState(CLOUD.EnumSceneState.TRANSLUCENT);

    var materialSelector = new CLOUD.MaterialSelector();

    var expectedIds = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    var expectedMaterial = materialSelector.get('scene');
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "scene state material");

});

QUnit.test( "test override material 4-isolate translucent", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [2, 3, 4, 7, 8, 9, 10, 11];
    filter.addToIsolateList(CLOUD.EnumIsolateState.TRANSLUCENT, ids);

    var expectedIds = [2, 3, 4, 7, 8, 9];
    var expectedMaterial = filter.getIsolateMaterial();
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "isolate translucent material");
});

QUnit.test( "test override material 5-isolate translucent others", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var ids = [2, 3, 4, 7, 8, 9, 10, 11];
    filter.addToIsolateList(CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS, ids);

    var expectedIds = [0, 1, 5, 6];
    var expectedMaterial = filter.getIsolateMaterial();
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "isolate translucent others material");
});

QUnit.test( "test override material 6- isolate condition translucent others filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var expectedMaterial = filter.getIsolateMaterial();
    var condition = [{specialty : 1}, {levelName: 1}, {levelName : 2}];
    filter.setIsolateConditions(condition, CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS);

    var expectedIds = [0, 4, 8]; //[1, 2, 3, 5, 6, 7, 9];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.clearIsolateConditions(CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS);
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    condition = [{specialty : 0}, {levelName: 1}, {levelName : 2}, {a : 2}];
    filter.setIsolateConditions(condition, CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS);
    expectedIds = [3, 7]; //[0, 1, 2, 4, 5, 6, 8, 9];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.clearIsolateConditions(CLOUD.EnumIsolateState.TRANSLUCENT_OTHERS);
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

});


QUnit.test( "test override material 7- condition translucent others filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var materialSelector = new CLOUD.MaterialSelector();

    var expectedMaterial = materialSelector.get('scene');
    var condition = [{specialty : 1}, {levelName: 0}, {levelName : 1}];
    filter.setConditions(CLOUD.EnumConditionType.TRANSLUCENT_OTHERS, condition);
    var expectedIds = [2, 6]; //[0, 1, 3, 4, 5, 7, 8, 9];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.clearConditions(CLOUD.EnumConditionType.TRANSLUCENT_OTHERS);
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    condition = [{specialty : 0}, {levelName: 0}, {levelName : 1}, {a : 2}];
    filter.setConditions(CLOUD.EnumConditionType.TRANSLUCENT_OTHERS, condition);

    expectedIds = [3, 7]; //[0, 1, 2, 4, 5, 6, 8, 9];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.clearAllConditions();
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    condition = undefined;
    filter.setConditions(CLOUD.EnumConditionType.TRANSLUCENT_OTHERS, condition);
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");
});

QUnit.test( "test override material 8- translucent filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var materialSelector = new CLOUD.MaterialSelector();

    var expectedMaterial = materialSelector.get('scene');
    var ids = [0, 2, 3, 5, 8, 9, 12];
    filter.addToIdList(CLOUD.EnumIdBasedType.TRANSLUCENT, ids);

    var expectedIds = [0, 2, 3, 5, 8, 9];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");
});

QUnit.test( "test override material 9- translucent others filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var materialSelector = new CLOUD.MaterialSelector();

    var expectedMaterial = materialSelector.get('scene');
    var ids = [0, 2, 3, 5, 8, 9, 12];
    filter.addToIdList(CLOUD.EnumIdBasedType.TRANSLUCENT_OTHERS, ids);

    var expectedIds = [1, 4, 6, 7];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");
});

QUnit.test( "test override material 11-override filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var materialSelector = new CLOUD.MaterialSelector();

    var defaultMaterial = materialSelector.get(materialSelector.getDefaultMaterialName());
    var expectedMaterial = materialSelector.get('scene');
    var ids = [1, 5, 8, 9];
    filter.addToOverrideList("test1", ids, "scene");
    var expectedIds = [1, 5, 8, 9];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    ids = [8, 9];
    filter.removeFromOverrideList("test2", ids);
    expectedIds = [1, 5, 8, 9];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    ids = [8, 9];
    filter.removeFromOverrideList("test1", ids);
    expectedIds = [1, 5];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    ids = [1, 2, 7];
    filter.addToOverrideList("test2", ids, "abc");
    expectedIds = [1, 5];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");
    expectedMaterial = defaultMaterial;
    expectedIds = [2, 7];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    expectedMaterial = materialSelector.get('scene');
    ids = [5, 8];
    filter.setOverrideList("test2", ids, "selection");
    expectedIds = [1, 5];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");
    expectedMaterial = materialSelector.get('selection');
    expectedIds = [8];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.clearOverrideList("test2");
    expectedIds = [1, 5];
    expectedMaterial = materialSelector.get('scene');
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    expectedMaterial = defaultMaterial;
    ids = [0, 3];
    filter.setOverrideList("test1", ids, "noThisMaterial");
    expectedIds = [0, 3];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.clearAllOverrideList();
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    // test addToOverrideListByColor() for override filter
    //
    /*
    expectedMaterial = defaultMaterial;
    ids = [1, 4];
    filter.addToOverrideListByColor("test1", ids, undefined);
    expectedIds = [1, 4];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.clearAllOverrideList();
    filter.addToOverrideListByColor("test1", ids, null);
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    var color = {};
    filter.clearAllOverrideList();
    filter.addToOverrideListByColor("test1", ids, color);
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    color.color = [0.0, 1.0, 0.0];
    filter.clearAllOverrideList();
    filter.addToOverrideListByColor("test1", ids, color);
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");
*/
    var color = {};
    color.color = [0.0, 1.0, 0.0];
    expectedMaterial = {};
    color.opacity = 1.0;
    expectedMaterial.name = materialSelector.add(color);
    ids = [1, 4];
    filter.clearAllOverrideList();
    filter.addToOverrideListByColor("test1", ids, color);
    expectedIds = [1, 4];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    ids = [3];
    filter.setOverrideListByColor("test1", ids, color);
    expectedIds = [3];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");
});

QUnit.test( "test override material 12- user override filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var materialSelector = new CLOUD.MaterialSelector();

    var expectedMaterial = materialSelector.get('scene');
    var keys = [1, 3];
    filter.addToUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "levelName", keys, "scene");
    var expectedIds = [1, 3, 5, 7, 9];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    keys = [1];
    filter.removeFromUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "levelName", keys);
    expectedIds = [3, 7];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.clearUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "levelName");
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    keys = [2];
    filter.setUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "levelName", keys, "scene");
    expectedIds = [2, 6];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.clearUserListByType(CLOUD.EnumUserType.OVERRIDE_DATA);
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.setUserList(CLOUD.EnumUserType.OVERRIDE_DATA, "levelName", keys, "scene");
    filter.clearAllUserList();
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

});

QUnit.test( "test override material 13- condition override filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var materialSelector = new CLOUD.MaterialSelector();

    var expectedMaterial = materialSelector.get("scene");
    var condition = [{condition:{levelName:'0'}, material: 'scene'}, {condition:{specialty:'1'}, material:'selection'}];
    filter.setConditions(CLOUD.EnumConditionType.OVERRIDE, condition);
    var expectedIds = [0, 4, 8];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");
    expectedIds = [1, 3, 5, 7, 9];
    expectedMaterial = materialSelector.get("selection");
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.clearConditions(CLOUD.EnumConditionType.OVERRIDE);
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    condition = [{condition:{levelName:'1'}, material: 'scene'}, {condition:{specialty:'0'}, material:'selection'}]
    filter.setConditions(CLOUD.EnumConditionType.OVERRIDE, condition);

    expectedIds = [1, 5, 9];
    expectedMaterial = materialSelector.get("scene");
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");
    expectedIds = [0, 2, 4, 6, 8];
    expectedMaterial = materialSelector.get("selection");
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    filter.clearAllConditions();
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

    condition = undefined;
    filter.setConditions(CLOUD.EnumConditionType.OVERRIDE, condition);
    expectedIds = [];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");

});

QUnit.test( "test override material 14- frozen filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var materialSelector = new CLOUD.MaterialSelector();

    var ids = [0, 2, 3, 5, 8, 9, 12];
    filter.addToFrozenList(ids);

    ids = [1, 4, 8, 9];
    filter.addToOverrideList("test1", ids, "scene");

    var expectedIds = [0, 2, 3, 5, 6, 7, 8, 9];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, null, "material");

    var expectedMaterial = materialSelector.get("scene");
    expectedIds = [1, 4];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material");
});

QUnit.test( "test override material 15- frozen condition filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var materialSelector = new CLOUD.MaterialSelector();

    var ids = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    filter.addToOverrideList("test1", ids, "scene");

    var condition = [{specialty : 0}, {levelName: 2}, {levelName : 3}];
    filter.setFrozenConditions(condition);

    var expectedIds = [0, 2, 3, 4, 6, 7, 8];
    expectedMaterial = null;
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 1 - 1");

    expectedIds = [1, 5, 9];
    expectedMaterial = materialSelector.get("scene");
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 1 - 2");

    filter.clearFrozen();
    expectedIds = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    expectedMaterial = materialSelector.get("scene");
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 1 - 3");
});

QUnit.test( "test override material 16- multiple override filter", function( assert ) {
    var helper = new FilterTestHelper();

    var filter = new CLOUD.FilterManager();
    filter.clearAll();

    var materialSelector = new CLOUD.MaterialSelector();

    // 1, current filter list: override condition
    //
    var expectedMaterial = materialSelector.get("darkRed");
    var condition = [{condition: {levelName: '0'}, material: 'darkRed'}, {
        condition: {specialty: '1'},
        material: 'lightBlue'
    }];
    filter.setConditions(CLOUD.EnumConditionType.OVERRIDE, condition);
    var expectedIds = [0, 4, 8];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 1 - 1");

    expectedIds = [1, 3, 5, 7, 9];
    expectedMaterial = materialSelector.get("lightBlue");
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 1 - 2");

    // 2, current filter list: override condition, translucent isolate;
    //
    var ids = [2, 3, 4, 7, 9, 10, 11];
    filter.addToIsolateList(CLOUD.EnumIsolateState.TRANSLUCENT, ids);

    expectedIds = [2, 3, 4, 7, 9];
    expectedMaterial = filter.getIsolateMaterial();
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 2 - 1");

    expectedMaterial = materialSelector.get("darkRed");
    expectedIds = [0, 8];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 2 - 2");

    expectedMaterial = materialSelector.get("lightBlue");
    expectedIds = [1, 5];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 2 - 2");

    expectedMaterial = null;
    expectedIds = [6];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 2 - 2");

    // 3, current filter list: override condition, translucent isolate, translucent others
    //
    ids = [0, 2, 3, 5, 6, 8, 9, 12];
    filter.addToIdList(CLOUD.EnumIdBasedType.TRANSLUCENT_OTHERS, ids);

    expectedIds = [1, 4, 7];
    expectedMaterial = materialSelector.get('scene');
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 3 - 1");

    expectedIds = [2, 3, 9];
    expectedMaterial = filter.getIsolateMaterial();
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 3 - 2");

    expectedMaterial = materialSelector.get("darkRed");
    expectedIds = [0, 8];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 3 - 3");

    expectedMaterial = materialSelector.get("lightBlue");
    expectedIds = [5];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 3 - 4");

    expectedMaterial = null;
    expectedIds = [6];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 3 - 5");

    // 4, current filter list: override condition, translucent isolate, translucent others
    //

    expectedMaterial = materialSelector.get("darkRed");
    expectedIds = [0, 8];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 4 - 1");

    // 5, current filter list: override condition, override, selected translucent isolate, translucent others
    //

    ids = [1, 5, 8, 9];
    filter.addToOverrideList("test1", ids, "black");

    expectedIds = [1, 4, 7];
    expectedMaterial = materialSelector.get('scene');
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 5 - 1");

    expectedIds = [2, 3, 9];
    expectedMaterial = filter.getIsolateMaterial();
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 5 - 2");

    expectedMaterial = materialSelector.get("darkRed");
    expectedIds = [0];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 5 - 3");

    expectedMaterial = materialSelector.get("black");
    expectedIds = [5, 8];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 5 - 5");

    expectedMaterial = null;
    expectedIds = [6];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 5 - 6");

    // 6, current filter list: override condition, override, selected, frozen, translucent isolate, translucent others
    //
    var ids = [0, 2, 6, 12];
    filter.addToFrozenList(ids);

    expectedIds = [1, 4, 7];
    expectedMaterial = materialSelector.get('scene');
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 6 - 1");

    expectedIds = [2, 3, 9];
    expectedMaterial = filter.getIsolateMaterial();
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 6 - 2");

    expectedMaterial = null;
    expectedIds = [0, 6];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 6 - 3");

    expectedMaterial = materialSelector.get("black");
    expectedIds = [5, 8];
    filterTestCheckMaterial(assert, helper.getObjects(), filter, expectedIds, expectedMaterial, "material 6 - 5");
});