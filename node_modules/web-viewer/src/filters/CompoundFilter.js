
CLOUD.FilterResultMode = {
    MATCH_RETURN_TRUE    : 0,
    MATCH_RETURN_FALSE   : 1,
    NOMATCH_RETURN_TRUE  : 2,
    NOMATCH_RETURN_FALSE : 3
};

CLOUD.CompoundFilter = function (ret) {
    // latest filter is added to the last of the list 
    this._activeFilterList = [];

    // key is filter id, value is the parse mode to filter result
    this._filterResultModes = {};

    // default return value when check object with the filter
    this._defaultRetValue = ret;

    // priority for filter
    // if not set, the last added filter has the highest priority
    this._filterPriority = null;
};

CLOUD.CompoundFilter.prototype.setFilterMode = function(modes) {
	this._filterResultModes = modes;
};

CLOUD.CompoundFilter.prototype.setFilterPriority = function(priority) {
    this._filterPriority = priority;
};

CLOUD.CompoundFilter.prototype.addBaseFilter = function(filter) {
    var activeList = this._activeFilterList;
    var i = activeList.indexOf(filter);

    if (this._filterPriority === null) {
        if (i === -1) {
            // append the filter to the last of the list
            activeList.push(filter);
        }
        else if (i !== activeList.length - 1) {

            // if the filter is in the list and not in the last, remove it at first
            activeList.splice(i, 1);

            // append the filter to the last of the list
            activeList.push(filter);
        }
    }
    else {
        if (activeList.length === 0) {
            activeList.push(filter);
        }
        else {
            if (i !== -1 && i !== activeList.length - 1) {
                // if the filter is in the list and not in the last, remove it at first
                activeList.splice(i, 1);
            }

            var priority = this._filterPriority[filter.getType()];
            // find proper position according to priority
            for (var li = 0, len = activeList.length; li < len; li++) {
                if (this._filterPriority[activeList[li].getType()] > priority) {
                    activeList.splice(li, 0, filter);
                    break;
                }
            }

            if (li === len) {
                activeList.push(filter);
            }
        }
    }
};

CLOUD.CompoundFilter.prototype.removeBaseFilter = function(filter) {
    // remove the filter from list
    var i = this._activeFilterList.indexOf(filter);
    if(i !== -1) {
        this._activeFilterList.splice(i, 1);
    }
};

CLOUD.CompoundFilter.prototype.isEmpty = function() {
    return this._activeFilterList.length === 0;
};

CLOUD.CompoundFilter.prototype.hasFilterNotIn = function(other) {
    var filterList = this._activeFilterList;

    for (var i = filterList.length - 1; i >= 0; i--) {
        var filter = filterList[i];
        if (other._filterResultModes[filter.getType()] === undefined) {
            return true;
        }
    }

    return false;
};

CLOUD.CompoundFilter.prototype.apply = function(object) {
    var scope = this;
    var parseMode = CLOUD.FilterResultMode;
    var filter;
    for (var i = scope._activeFilterList.length - 1; i >= 0; i--) {
        filter = scope._activeFilterList[i];
        switch (scope._filterResultModes[filter.getType()]) {
            case parseMode.MATCH_RETURN_TRUE :
                if (filter.match(object)) return true;
                break;

            case parseMode.MATCH_RETURN_FALSE :
                if (filter.match(object)) return false;
                break;

            case parseMode.NOMATCH_RETURN_TRUE :
                if (!filter.match(object)) return true;
                break;

            case parseMode.NOMATCH_RETURN_FALSE :
                if (!filter.match(object)) return false;
                break;

        }
    }

    return scope._defaultRetValue;
};

CLOUD.CompoundFilter.prototype.getApplyFilterId = function(object) {
    var scope = this;
    var parseMode = CLOUD.FilterResultMode;
    var filter;
    for (var i = scope._activeFilterList.length - 1; i >= 0; i--) {
        filter = scope._activeFilterList[i];
        switch (scope._filterResultModes[filter.getType()]) {
            case parseMode.MATCH_RETURN_TRUE :
            case parseMode.MATCH_RETURN_FALSE :
                if (filter.match(object)) return filter.getType();
                break;

            case parseMode.NOMATCH_RETURN_TRUE :
            case parseMode.NOMATCH_RETURN_FALSE :
                if (!filter.match(object)) return filter.getType();
                break;

        }
    }

    return -1;
};
