
// base class for all filters
//
CLOUD.BasicFilter = function (type, name) {
    this._type = type;
    this._name = name;
    this._enabled = false;
    this._items = {};

    this._relatedCompoundFilterList = [];
};

CLOUD.BasicFilter.prototype.getType = function() {
    return this._type;
};

CLOUD.BasicFilter.prototype.getName = function() {
    return this._name;
};

CLOUD.BasicFilter.prototype.get = function() {
    return this._items;
};


CLOUD.BasicFilter.prototype.getAll = function () {

    return this._items;
};

CLOUD.BasicFilter.prototype.clearAll = function() {
    var scope = this;
    scope._items = {};

    if (scope._enabled) {
        scope._enabled = false;
        scope.enableStateChanged();
    }
};

CLOUD.BasicFilter.prototype.clear = function() {
    this.clearAll();
};

CLOUD.BasicFilter.prototype.isEmpty = function() {
    return !this._enabled;
};

CLOUD.BasicFilter.prototype.forceEnable = function() {
    if (!this._enabled) {
        this._enabled = true;
        this.enableStateChanged();
    }
}

CLOUD.BasicFilter.prototype.setByData = function (data) {
    var scope = this;

    function isEmpty(obj) {

        // null and undefined are "empty"
        if (obj == null) return true;

        // If it isn't an object at this point
        if (typeof obj !== "object") return true;

        // Otherwise, does it have any properties of its own?
        // Note that this doesn't handle
        // toString and valueOf enumeration bugs in IE < 9
        for (var key in obj) {
            if (obj.hasOwnProperty( key)) return false;
        }

        return true;
    }

    if (isEmpty(data)) {
        scope._items = {};

        if (scope._enabled) {
            scope._enabled = false;
            scope.enableStateChanged();
        }
    }
    else {
        scope._items = data;

        if (!scope._enabled) {
            scope._enabled = true;
            scope.enableStateChanged();
        }
    }
};

// require to override this method in child classes
CLOUD.BasicFilter.prototype.match = function(object) {
    return false;
};

CLOUD.BasicFilter.prototype.registerToCompoundFilter = function(compoundFilter) {
    this._relatedCompoundFilterList.push(compoundFilter);
};

CLOUD.BasicFilter.prototype.enableStateChanged = function() {
    var scope = this;

    for (var i = 0, len = scope._relatedCompoundFilterList.length; i < len; i++) {
        scope._enabled ? scope._relatedCompoundFilterList[i].addBaseFilter(scope) :
                                scope._relatedCompoundFilterList[i].removeBaseFilter(scope);
    }
};

/***************************************************************
 *
 ***************************************************************/

CLOUD.BasicIdFilter = function (type, name) {
    CLOUD.BasicFilter.call(this, type, name);
};

CLOUD.BasicIdFilter.prototype = Object.create(CLOUD.BasicFilter.prototype);
CLOUD.BasicIdFilter.prototype.constructor = CLOUD.BasicIdFilter;

CLOUD.BasicIdFilter.prototype.add = function(ids) {
    var scope = this;
    var items = scope._items;

    if (ids && ids.length > 0) {
        for (var i = 0, len = ids.length; i < len; ++i) {
            items[ids[i]] = true;
        }

        if (!scope._enabled) {
            scope._enabled = true;
            scope.enableStateChanged();
        }
    }
};

CLOUD.BasicIdFilter.prototype.remove = function(ids) {
    var scope = this;
    var items = scope._items;

    if (ids && ids.length > 0) {
        for (var i = 0, len = ids.length; i < len; ++i) {

            var id = ids[i];

            if (items.hasOwnProperty(id)) {
                delete items[id];
            }

        }

        if (items.length === 0 && scope._enabled) {
            scope._enabled = false;
            scope.enableStateChanged();
        }
    }
};


CLOUD.ListFilter = function (type, name) {
    CLOUD.BasicFilter.call(this, type, name);
};

CLOUD.ListFilter.prototype = Object.create(CLOUD.BasicFilter.prototype);
CLOUD.ListFilter.prototype.constructor = CLOUD.ListFilter;

CLOUD.ListFilter.prototype.remove = function(name, keys) {
    var scope = this;
    var item = scope._items[name];

    if (item && keys && keys.length > 0) {
        for (var i = 0, len = keys.length; i < len; ++i) {

            var key = keys[i];

            if (item.hasOwnProperty(key)) {
                delete item[key];
            }

        }

        if (CLOUD.Utils.isEmptyObject(scope._items) && scope._enabled) {
            scope._enabled = false;
            scope.enableStateChanged();
        }
    }
};

CLOUD.ListFilter.prototype.add = function (name, keys, value) {
    var scope = this;

    var items = scope._items;
    var item = items[name];

    if (keys && keys.length > 0) {
        if (value === undefined) {
            value = true;
        }

        if (!item) {
            item = items[name] = {};
        }

        for (var i = 0, len = keys.length; i < len; ++i) {
            item[keys[i]] = value;
        }

        if (!scope._enabled) {
            scope._enabled = true;
            scope.enableStateChanged();
        }
    }
};

CLOUD.ListFilter.prototype.clear = function (name) {
    var scope = this;
    var items = scope._items;

    if (items.hasOwnProperty(name)) {

        delete items[name];
        //_items[name] = {};

        if (CLOUD.Utils.isEmptyObject(items) && scope._enabled) {
            scope._enabled = false;
            scope.enableStateChanged();
        }
    }
};

CLOUD.UserListFilter = function (type, name) {
    CLOUD.BasicFilter.call(this, type, name);
};

CLOUD.UserListFilter.prototype = Object.create(CLOUD.ListFilter.prototype);
CLOUD.UserListFilter.prototype.constructor = CLOUD.UserListFilter;

CLOUD.UserListFilter.prototype.match = function(object) {

    return this.getMatchItem(object) !== null;
};

CLOUD.UserListFilter.prototype.getMatchItem = function(object) {
    var items = this._items;
    var userData = object.userData;
    if (userData) {
        for (var name in items) {
            var item = items[name];
            var key = userData[name];

            if (key && item[key] !== undefined) {
                return item[key];
            }
        }
    }

    return null;
};

CLOUD.OverrideListFilter = function(type, name) {
    CLOUD.BasicFilter.call(this, type, name);
};

CLOUD.OverrideListFilter.prototype = Object.create(CLOUD.ListFilter.prototype);
CLOUD.OverrideListFilter.prototype.constructor = CLOUD.OverrideListFilter;

CLOUD.OverrideListFilter.prototype.match = function(object) {

    return this.getMatchItem(object) !== null;
};

CLOUD.OverrideListFilter.prototype.getMatchItem = function(object) {
    var items = this._items;
    var id = object.name;
    for (var name in items) {

        var item = items[name];
        if (item[id]) {

            return item[id];
        }
    }

    return null;
};

CLOUD.ConditionFilter = function (type, name) {
    CLOUD.BasicFilter.call(this, type, name);
};

CLOUD.ConditionFilter.prototype = Object.create(CLOUD.BasicFilter.prototype);
CLOUD.ConditionFilter.prototype.constructor = CLOUD.ConditionFilter;

CLOUD.ConditionFilter.prototype.match = function (object) {

    function matchConditions (conditions, userData) {

        // 多个数组取并集
        var isMatch;
        for (var i = 0, len = conditions.length; i < len; ++i) {
            isMatch = true;
            var condition = conditions[i];
            for (var attr in condition) {
                if (condition[attr] != userData[attr]) {
                    isMatch = false;
                    break;
                }
            }

            if (isMatch) {
                return true;
            }
        }

        return false;
    }

    var userData = object.userData;
    if (userData) {

        return matchConditions(this._items, userData);
    }

    return false;
};

CLOUD.MultiConditionFilter = function (type, name) {
    CLOUD.BasicFilter.call(this, type, name);
};

CLOUD.MultiConditionFilter.prototype = Object.create(CLOUD.BasicFilter.prototype);
CLOUD.MultiConditionFilter.prototype.constructor = CLOUD.MultiConditionFilter;


CLOUD.MultiConditionFilter.prototype.match = function (object) {

    return this.getMatchItem(object) !== null;
};

CLOUD.MultiConditionFilter.prototype.getMatchItem = function(object) {
    var conditions = this._items;
    var userData = object.userData;

    var isMatch;
    if (userData) {

        var len = conditions.length;
        for (var i = 0; i < len; ++i) {
            var item = conditions[i];
            var condition = item.condition;
            isMatch = true;
            for (var attr in condition) {

                if (condition[attr] != userData[attr]) {
                    isMatch = false;
                    break;
                }

            }

            if (isMatch) {
                return item;
            }

        }
    }

    return null;
};

/***************************************************************
 *
 ***************************************************************/
CLOUD.FileIdFilter = function (type, name) {
    CLOUD.BasicIdFilter.call(this, type, name);
};

CLOUD.FileIdFilter.prototype = Object.create(CLOUD.BasicIdFilter.prototype);
CLOUD.FileIdFilter.prototype.constructor = CLOUD.FileIdFilter;

CLOUD.FileIdFilter.prototype.match = function(object) {

    // TODO: [Secondary way] extracting 'sceneId' run timely.
    // from node's userId (fileId.meshId). remove this when getting better choice.
    // Assumption (Wanda Project): Node's userId is encoded by sceneId.meshId,
    // review VAAS-252 for details.
    var userId = object.name;
    if(userId) {
        var idx = userId.indexOf('.');
        if (idx  !== -1) {
            var fileId = userId.substring(0, idx);
            return this._items[fileId] ? true : false;
        }
    }

    // TODO: [Expected Way]filtering by userData keyword 'sceneId'
    //       But the 'sceneId' was not serialized into userData
    //       because of potential huge disk size.
    //       userData was shared among items, so they can not be override at run time.
    var userData = object.userData;
    if (userData) {

        var fileId = userData.sceneId;
        if (fileId) {
            return this._items[fileId] ? true : false;
        }
    }

    return false;
};

CLOUD.GeneralIdFilter = function (type, name) {
    CLOUD.BasicIdFilter.call(this, type, name);
};

CLOUD.GeneralIdFilter.prototype = Object.create(CLOUD.BasicIdFilter.prototype);
CLOUD.GeneralIdFilter.prototype.constructor = CLOUD.GeneralIdFilter;


CLOUD.GeneralIdFilter.prototype.match = function(object) {
    return this._items[object.name] ? true : false;
};
