CLOUD.FilterManagerIO = function () {

    //保存当前过滤器状态
    this.saveState = function (filterManager) {
        var retObject = [];
        var actionList = filterManager.getFilterActionList();
        for(var i=0;i<actionList.length;i++){
            var tempObject = {};
            tempObject["className"] = actionList[i].getClassName();
            tempObject["flag"] = actionList[i].flag;
            tempObject["ids"] = actionList[i].ids;
            tempObject["conditions"] = actionList[i].conditions;
            tempObject["isolateHide"] = actionList[i].isolateHide;
            retObject.push(tempObject);
        }
        return {
            actions:retObject,
            sceneState:filterManager.getSceneState(),
            version:"1.0" 
        };
    };

    this.createAction = function(className,action){
        var retAction = null;
        switch(className){
            case "IsolateIdsFA":
                retAction = new CLOUD.IsolateIdsFA(action.isolateHide);
                retAction.ids = action.ids;
                break;
            case "VisibleIdsFA":
                retAction = new CLOUD.VisibleIdsFA(action.flag,true);
                retAction.ids = action.ids;
                break;
            case "OverrideIdsFA":
                retAction = new CLOUD.OverrideIdsFA(action.flag,action.material,true);
                retAction.ids = action.ids;
                break;
            case "TransparentIdsFA":
                retAction = new CLOUD.TransparentIdsFA(action.flag,false);
                retAction.ids = action.ids;
                break;
            case "VisibleConditionFA":
                retAction = new CLOUD.VisibleConditionFA(action.flag,true);
                retAction.conditions = action.conditions;
                break;
            case "OverrideConditionFA":
                retAction = new CLOUD.OverrideConditionFA(action.flag,true);
                retAction.conditions = action.conditions;
                break;
            case "TransparentConditionFA":
                retAction = new CLOUD.TransparentConditionFA(action.flag,false);
                retAction.conditions = action.conditions;
                break;
            case "IsolateConditionFA":
                retAction = new CLOUD.IsolateConditionFA(action.isolateHide);
                retAction.conditions = action.conditions;
                break;
            default :
                CLOUD.Logger.warn("Warning: Not supported filterAction '" + className + "'");
                break;
        }
        return retAction;
    };
    this.createActionByOldFilter = function(filterName){
        var retAction = null;
        switch(filterName){
            case "CONDITION_OVERRIDE":
                retAction = new CLOUD.OverrideConditionFA(true,obj[attr]);
                retAction.conditions = obj[attr];
                break;
            case "CONDITION_TRANSLUCENT_OTHERS":
                retAction = new CLOUD.TransparentConditionFA(false,false);
                retAction.conditions = obj[attr];
                break;
            case "FROZENCONDITIONFILTER":
                retAction = new CLOUD.TransparentConditionFA(true,true);
                retAction.conditions = obj[attr];
                break;
            case "FROZENFILTER":
                retAction = new CLOUD.TransparentIdsFA(true,true);
                retAction.conditions = obj[attr];
                break;
            case "ISOLATE_CONDITION_HIDEEN_OTHERS":
                retAction = new CLOUD.IsolateConditionFA(true); 
                retAction.conditions = obj[attr];
                break;
            case "ISOLATE_CONDITION_TRANSLUCENT_OTHERS":
                retAction = new CLOUD.IsolateConditionFA(false);
                retAction.conditions = obj[attr];
                break;
            case "ISOLATE_HIDDEN_OTHERS":
                retAction = new CLOUD.IsolateIdsFA(true);
                retAction.ids = obj[attr];
                break;
            case "ISOLATE_TRANSLUCENT_OTHERS":
                retAction = new CLOUD.IsolateIdsFA(false);
                retAction.ids = obj[attr];
                break;
            case "OVERRIDEFILTER":
                retAction = new CLOUD.OverrideIdsFA(true,obj[attr]);
                break;
            case "TRANSLUCTANT":
                retAction = new CLOUD.TransparentIdsFA(true,false);
                retAction.ids = obj[attr];
                break;
            case "TRANSLUCTANT_OTHERS":
                retAction = new CLOUD.TransparentIdsFA(false,false);
                retAction.ids = obj[attr];
                break;
            case "VISIBLE":
                retAction = new CLOUD.VisibleIdsFA(true,true);
                retAction.ids = obj[attr];
                break;
            default:
                CLOUD.Logger.warn("Warning: Not supported filter '" + filterMap[attr] + "'");
                break;
        }
        return retAction;
    };
    //恢复过滤器状态(兼容旧版本数据)
    this.loadState = function (obj,filterManager) {

        //clear action list and reset object state
        filterManager.clearFilterActionList();
        filterManager.getObjectInfoManager().resetAll();

        //load action list
        if (obj.hasOwnProperty("version")) {
            if (obj.version == "1.0") {
                var actions = obj.actions;
                for(var i=0;i<actions.length;i++){
                    var className = actions[i].className;
                    var newAction = this.createAction(className,actions[i]);
                    filterManager.pushBack(newAction);
                }
            }
            else if(obj.version == "0.4"){
                var filterMap = {};
                var basicFilterList = filterManager._filterImpl.getBasicFilterList();
                for (var i = 0, len = basicFilterList.length; i < len; i++) {
                    filterMap[basicFilterList[i].getName()] = i;
                }
                for (var attr in obj) {
                    if (attr === "sceneState" || attr === "version") {
                        continue;
                    }
                    if (filterMap.hasOwnProperty(attr)) {
                        var newAction = this.createActionByOldFilter(obj[attr]);
                        filterManager.pushBack(newAction);
                    }
                }
            }
        }
        filterManager.setSceneState(obj.sceneState);
    };
};