

///******************FilterAction Base Class********************/
CLOUD.FilterAction = function () {
    this.className = "FilterAction";
};
CLOUD.FilterAction.prototype.getClassName = function() {
    return this.className;
};
//override 更新ObjectInfoManager的状态
CLOUD.FilterAction.prototype.applyFilter = function(objectInfoManager) {
    //Do nothing
};


///******************IdsFilterAction Derived Class********************/
CLOUD.IdsFilterAction = function () {
    CLOUD.FilterAction.call(this);
    this.className = "IdsFilterAction";
    this.ids = [];
};
CLOUD.IdsFilterAction.prototype = Object.create(CLOUD.FilterAction.prototype);
CLOUD.IdsFilterAction.prototype.arrayToMap = function(array){
    var map = {};
    for(var i=0;i<array.length;i++){
        var id = array[i];
        map[id] = id;
    }
    return map;
};
CLOUD.IdsFilterAction.prototype.constructor = CLOUD.IdsFilterAction;
///******************VisibleIdsFA Derived Class********************/
CLOUD.VisibleIdsFA = function (flag,isVisible) {
    CLOUD.IdsFilterAction.call(this);
    this.className = "VisibleIdsFA";
    this.flag = flag;
    this.isVisible = isVisible;
};
CLOUD.IdsFilterAction.prototype.setIds = function(ids){
    this.ids = ids;
};
CLOUD.VisibleIdsFA.prototype = Object.create(CLOUD.IdsFilterAction.prototype);
CLOUD.VisibleIdsFA.prototype.constructor = CLOUD.VisibleIdsFA;

CLOUD.VisibleIdsFA.prototype.applyFilter = function(objectInfoManager){

    if(this.flag===true){
        for(var i=0;i<this.ids.length;i++){
            objectInfoManager.setVisible(this.ids[i],this.isVisible);
        }
    }
    else{
        var idsInMap = this.arrayToMap(this.ids);
        var objectMap = objectInfoManager.getObjectsMap();
        for(var id in objectMap){
            if(!idsInMap.hasOwnProperty(id)){
                objectInfoManager.setVisible(id,this.isVisible);
            }
        }
    } 
};
///******************OverrideIdsFA Derived Class********************/
CLOUD.OverrideIdsFA = function (flag,material) {
    CLOUD.IdsFilterAction.call(this);
    this.className = "OverrideIdsFA";
    this.flag = flag;
    this.material = material;
};
CLOUD.OverrideIdsFA.prototype = Object.create(CLOUD.IdsFilterAction.prototype);
CLOUD.OverrideIdsFA.prototype.constructor = CLOUD.OverrideIdsFA;
CLOUD.OverrideIdsFA.prototype.applyFilter = function(objectInfoManager){

    if(this.flag===true){
        for(var i=0;i<this.ids.length;i++){
            objectInfoManager.setMaterial(this.ids[i],this.material);
        }
    }
    else{
        var idsInMap = this.arrayToMap(this.ids);
        var objectMap = objectInfoManager.getObjectsMap();
        for(var id in objectMap){
            if(!idsInMap.hasOwnProperty(id)){
                objectInfoManager.setMaterial(id,this.material);
            }
        }
    }
}
///******************IsolateIdsFA Derived Class********************/
CLOUD.IsolateIdsFA = function (isHide) {
    CLOUD.IdsFilterAction.call(this);
    this.className = "IsolateIdsFA";
    this.isolateHide = isHide;
};
CLOUD.IsolateIdsFA.prototype = Object.create(CLOUD.IdsFilterAction.prototype);
CLOUD.IsolateIdsFA.prototype.constructor = CLOUD.IsolateIdsFA;
CLOUD.IsolateIdsFA.prototype.applyFilter = function(objectInfoManager){
    objectInfoManager.clearIsolates();
    var idsInMap = this.arrayToMap(this.ids);
    var objectMap = objectInfoManager.getObjectsMap();
    for(var id in objectMap){
        if(!idsInMap.hasOwnProperty(id)){
            if(this.isolateHide)
                objectInfoManager.setIsolateHide(id,true);
            else 
                objectInfoManager.setIsolateTransparent(id,true);
        }
        else{
            if(this.isolateHide)
                objectInfoManager.setIsolateHide(id,false);
            else 
                objectInfoManager.setIsolateTransparent(id,false);
        }
    }
    
}
///******************TransparentIdsFA Derived Class********************/
CLOUD.TransparentIdsFA = function (flag,isOpaque) {
    CLOUD.IdsFilterAction.call(this);
    this.className = "TransparentIdsFA";
    this.flag = flag;
    this.isOpaque = isOpaque;
};
CLOUD.TransparentIdsFA.prototype = Object.create(CLOUD.IdsFilterAction.prototype);
CLOUD.TransparentIdsFA.prototype.constructor = CLOUD.TransparentIdsFA;
CLOUD.TransparentIdsFA.prototype.applyFilter = function(objectInfoManager){

    if(this.flag===true){
        for(var i=0;i<this.ids.length;i++){
            objectInfoManager.setTransparent(this.ids[i],!this.isOpaque);
        }
    }
    else{
        var idsInMap = this.arrayToMap(this.ids);
        var objectMap = objectInfoManager.getObjectsMap();
        for(var id in objectMap){
            if(!idsInMap.hasOwnProperty(id)){
                objectInfoManager.setTransparent(id,!this.isOpaque);
            }
        }
    }
}


///******************ConditionFilterAction Derived Class********************/
CLOUD.ConditionFilterAction = function () {
    CLOUD.FilterAction.call(this);
    this.className = "ConditionFilterAction";
    this.conditions = null;
};
CLOUD.ConditionFilterAction.prototype = Object.create(CLOUD.FilterAction.prototype);
CLOUD.ConditionFilterAction.prototype.constructor = CLOUD.ConditionFilterAction;
///******************VisibleConditionFA Derived Class********************/
CLOUD.VisibleConditionFA = function (flag,isVisible) {
    CLOUD.ConditionFilterAction.call(this);
    this.className = "VisibleConditionFA";
    this.flag = flag;
    this.isVisible = isVisible;
};
CLOUD.VisibleConditionFA.prototype = Object.create(CLOUD.ConditionFilterAction.prototype);
CLOUD.VisibleConditionFA.prototype.constructor = CLOUD.VisibleConditionFA;

CLOUD.VisibleConditionFA.prototype.applyFilter = function(objectInfoManager){
    var isVisible = this.isVisible;
    var setVisibleCallback = function(id,retObject){
        objectInfoManager.setVisible(id,isVisible);
    };
    objectInfoManager.matchConditions(this.conditions,this.flag,setVisibleCallback);
    
};
///******************OverrideConditionFA Derived Class********************/
CLOUD.OverrideConditionFA = function (flag,material) {
    CLOUD.ConditionFilterAction.call(this);
    this.className = "OverrideConditionFA";
    this.flag = flag;
    this.material = material;
};
CLOUD.OverrideConditionFA.prototype = Object.create(CLOUD.ConditionFilterAction.prototype);
CLOUD.OverrideConditionFA.prototype.constructor = CLOUD.OverrideConditionFA;
CLOUD.OverrideConditionFA.prototype.applyFilter = function(objectInfoManager,materialSelector){
    var material = this.material;
    var setMaterialCallback = function(id,retObject){
        objectInfoManager.setMaterial(id,material);
    };
    
    
    objectInfoManager.matchConditions(this.conditions,this.flag,setMaterialCallback);
};
///******************TransparentConditionFA Derived Class********************/
CLOUD.TransparentConditionFA = function (flag,isOpaque) {
    CLOUD.ConditionFilterAction.call(this);
    this.className = "TransparentConditionFA";
    this.flag = flag;
    this.isOpaque = isOpaque;
};
CLOUD.TransparentConditionFA.prototype = Object.create(CLOUD.ConditionFilterAction.prototype);
CLOUD.TransparentConditionFA.prototype.constructor = CLOUD.TransparentConditionFA;
CLOUD.TransparentConditionFA.prototype.applyFilter = function(objectInfoManager){
    var isOpaque = this.isOpaque;
    var setTransparentCallback = function(id,retObject){
        objectInfoManager.setTransparent(id,!isOpaque);
    };
    objectInfoManager.matchConditions(this.conditions,this.flag,setTransparentCallback);
};
///******************IsolateConditionFA Derived Class********************/
CLOUD.IsolateConditionFA = function (isHide) {
    CLOUD.ConditionFilterAction.call(this);
    this.className = "IsolateConditionFA";
    this.isolateHide = isHide;
};
CLOUD.IsolateConditionFA.prototype = Object.create(CLOUD.ConditionFilterAction.prototype);
CLOUD.IsolateConditionFA.prototype.constructor = CLOUD.IsolateConditionFA;
CLOUD.IsolateConditionFA.prototype.applyFilter = function(objectInfoManager){
    objectInfoManager.clearIsolates();
    var isolateHide = this.isolateHide;
    var setIsolateCallback = function(id,retObject){
        var matchItem = retObject.isMatch;
        if(isolateHide)
            objectInfoManager.setIsolateHide(id,!matchItem);
        else
            objectInfoManager.setIsolateTransparent(id,!matchItem);
    };
    objectInfoManager.matchConditions(this.conditions,true,setIsolateCallback);
    objectInfoManager.matchConditions(this.conditions,false,setIsolateCallback);
};