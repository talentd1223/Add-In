
CLOUD.FilterManager2 = function () {

    // 基于ID的过滤器
    var EnumIdBasedType = CLOUD.EnumIdBasedType;
    // 场景状态
    var EnumSceneState = CLOUD.EnumSceneState;

    var EnumFilterResultMode = CLOUD.FilterResultMode;

    // basic filter types, one type has a peer filter
    var EnumFilterType = {
        IDFILTER_OFFSET: 0,
        FILE_VISIBLE: 0,
        FILE_HIDDEN: 1,
        VISIBLE: 2,
        HIDDEN: 3,
        TRANSLUCENT: 4,
        TRANSLUCENT_OTHERS: 5,
        RENDER_PROMOTION: 6,
        IDFILTER_ENDOFFSET: 6,

        ISOLATEFILTER_OFFSET: 7,
        ISOLATE_HIDDEN: 7,
        ISOLATE_HIDDEN_OTHERS: 8,
        ISOLATE_TRANSLUCENT: 9,
        ISOLATE_TRANSLUCENT_OTHERS: 10,
        ISOLATEFILTER_ENDOFFSET: 10,

        USERFILTER_OFFSET: 11,
        USER_HIDDEN: 11,
        USER_OVERRIDE: 12,
        USER_WITH_BOARDLINE: 13,
        USERFILTER_ENDOFFSET: 13,

        CONDITIONFILTER_OFFSET: 14,
        CONDITION_HIDDEN_OTHERS: 14,
        CONDITION_TRANSLUCENT_OTHERS: 15,
        CONDITION_OVERRIDE: 16,
        CONDITIONFILTER_ENDOFFSET: 16,

        ISOLATECONDITIONFILTER_OFFSET: 17,
        ISOLATE_CONDITION_HIDDEN: 17,      // not used currently
        ISOLATE_CONDITION_HIDDEN_OTHERS: 18,
        ISOLATE_CONDITION_TRANSLUCENT: 19,     // not used currently
        ISOLATE_CONDITION_TRANSLUCENT_OTHERS: 20,
        ISOLATECONDITIONFILTER_ENDOFFSET: 20,

        FROZENFILTER: 21,
        FROZENCONDITIONFILTER: 22,
        OVERRIDEFILTER: 23,

        BASICFILTER_COUNT: 23
    };

    // compound filter list
    //
    var _visibleCompoundFilter = new CLOUD.CompoundFilter(true);
    var _overrideCompoundFilter = new CLOUD.CompoundFilter(true);
    var _highPriorityOverrideCompoundFilter = new CLOUD.CompoundFilter(false);
    var _selectableCompoundFilter = new CLOUD.CompoundFilter(true);
    var _hiddenFileIdCompoundFilter = new CLOUD.CompoundFilter(false);
    var _renderPromotionCompoundFilter = new CLOUD.CompoundFilter(false);
    var _renderWithBoardLineCompoundFilter = new CLOUD.CompoundFilter(false);


    // basic filters
    // get one basic filter according to its type index, see EnumFilterType
    var _basicFilterList = [];

    var _overrideFilter;
    var _frozenFilter;

    var _sceneState = EnumSceneState.DISABLED;
    var _materialSelector = new CLOUD.MaterialSelector();

    function _init() {

        // create basic filters
        //
        _basicFilterList[EnumFilterType.FILE_VISIBLE] = new CLOUD.FileIdFilter(EnumFilterType.FILE_VISIBLE, "FILE_VISIBLE");
        _basicFilterList[EnumFilterType.FILE_HIDDEN] = new CLOUD.FileIdFilter(EnumFilterType.FILE_HIDDEN, "FILE_HIDDEN");

        _basicFilterList[EnumFilterType.VISIBLE] = new CLOUD.GeneralIdFilter(EnumFilterType.VISIBLE, "VISIBLE");
        _basicFilterList[EnumFilterType.HIDDEN] = new CLOUD.GeneralIdFilter(EnumFilterType.HIDDEN, "HIDDEN");
        _basicFilterList[EnumFilterType.TRANSLUCENT] = new CLOUD.GeneralIdFilter(EnumFilterType.TRANSLUCENT, "TRANSLUCENT");
        _basicFilterList[EnumFilterType.TRANSLUCENT_OTHERS] = new CLOUD.GeneralIdFilter(EnumFilterType.TRANSLUCENT_OTHERS, "TRANSLUCENT_OTHERS");
        _basicFilterList[EnumFilterType.RENDER_PROMOTION] = new CLOUD.GeneralIdFilter(EnumFilterType.RENDER_PROMOTION, "RENDER_PROMOTION");

        _basicFilterList[EnumFilterType.ISOLATE_HIDDEN] = new CLOUD.GeneralIdFilter(EnumFilterType.ISOLATE_HIDDEN, "ISOLATE_HIDDEN");
        _basicFilterList[EnumFilterType.ISOLATE_HIDDEN_OTHERS] = new CLOUD.GeneralIdFilter(EnumFilterType.ISOLATE_HIDDEN_OTHERS, "ISOLATE_HIDDEN_OTHERS");
        _basicFilterList[EnumFilterType.ISOLATE_TRANSLUCENT] = new CLOUD.GeneralIdFilter(EnumFilterType.ISOLATE_TRANSLUCENT, "ISOLATE_TRANSLUCENT");
        _basicFilterList[EnumFilterType.ISOLATE_TRANSLUCENT_OTHERS] = new CLOUD.GeneralIdFilter(EnumFilterType.ISOLATE_TRANSLUCENT_OTHERS, "ISOLATE_TRANSLUCENT_OTHERS");

        _basicFilterList[EnumFilterType.USER_HIDDEN] = new CLOUD.UserListFilter(EnumFilterType.USER_HIDDEN, "USER_HIDDEN");
        _basicFilterList[EnumFilterType.USER_OVERRIDE] = new CLOUD.UserListFilter(EnumFilterType.USER_OVERRIDE, "USER_OVERRIDE");
        _basicFilterList[EnumFilterType.USER_WITH_BOARDLINE] = new CLOUD.UserListFilter(EnumFilterType.USER_WITH_BOARDLINE, "USER_WITH_BOARDLINE");

        _basicFilterList[EnumFilterType.CONDITION_HIDDEN_OTHERS] = new CLOUD.ConditionFilter(EnumFilterType.CONDITION_HIDDEN_OTHERS, "CONDITION_HIDDEN_OTHERS");
        _basicFilterList[EnumFilterType.CONDITION_TRANSLUCENT_OTHERS] = new CLOUD.ConditionFilter(EnumFilterType.CONDITION_TRANSLUCENT_OTHERS, "CONDITION_TRANSLUCENT_OTHERS");
        _basicFilterList[EnumFilterType.CONDITION_OVERRIDE] = new CLOUD.MultiConditionFilter(EnumFilterType.CONDITION_OVERRIDE, "CONDITION_OVERRIDE");

        _basicFilterList[EnumFilterType.ISOLATE_CONDITION_HIDDEN] = new CLOUD.ConditionFilter(EnumFilterType.ISOLATE_CONDITION_HIDDEN, "ISOLATE_CONDITION_HIDDEN");
        _basicFilterList[EnumFilterType.ISOLATE_CONDITION_HIDDEN_OTHERS] = new CLOUD.ConditionFilter(EnumFilterType.ISOLATE_CONDITION_HIDDEN_OTHERS, "ISOLATE_CONDITION_HIDDEN_OTHERS");
        _basicFilterList[EnumFilterType.ISOLATE_CONDITION_TRANSLUCENT] = new CLOUD.ConditionFilter(EnumFilterType.ISOLATE_CONDITION_TRANSLUCENT, "ISOLATE_CONDITION_TRANSLUCENT");
        _basicFilterList[EnumFilterType.ISOLATE_CONDITION_TRANSLUCENT_OTHERS] = new CLOUD.ConditionFilter(EnumFilterType.ISOLATE_CONDITION_TRANSLUCENT_OTHERS, "ISOLATE_CONDITION_TRANSLUCENT_OTHERS");

        _frozenFilter = new CLOUD.GeneralIdFilter(EnumFilterType.FROZENFILTER, "FROZENFILTER");
        _basicFilterList[EnumFilterType.FROZENCONDITIONFILTER] = new CLOUD.ConditionFilter(EnumFilterType.FROZENCONDITIONFILTER, "FROZENCONDITIONFILTER");
        _basicFilterList[EnumFilterType.FROZENFILTER] = _frozenFilter;
        _overrideFilter = new CLOUD.OverrideListFilter(EnumFilterType.OVERRIDEFILTER, "OVERRIDEFILTER");
        _basicFilterList[EnumFilterType.OVERRIDEFILTER] = _overrideFilter;


        var f;

        // register basic filter to compound filter
        //
        var filtersForVisible = {};
        filtersForVisible[EnumFilterType.HIDDEN] = EnumFilterResultMode.MATCH_RETURN_FALSE;
        filtersForVisible[EnumFilterType.VISIBLE] = EnumFilterResultMode.NOMATCH_RETURN_FALSE;
        filtersForVisible[EnumFilterType.USER_HIDDEN] = EnumFilterResultMode.MATCH_RETURN_FALSE;
        filtersForVisible[EnumFilterType.CONDITION_HIDDEN_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_FALSE;
        filtersForVisible[EnumFilterType.ISOLATE_HIDDEN] = EnumFilterResultMode.MATCH_RETURN_FALSE;
        filtersForVisible[EnumFilterType.ISOLATE_HIDDEN_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_FALSE;
        filtersForVisible[EnumFilterType.ISOLATE_CONDITION_HIDDEN_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_FALSE;

        _visibleCompoundFilter.setFilterMode(filtersForVisible);
        for (f in filtersForVisible) {
            _basicFilterList[f].registerToCompoundFilter(_visibleCompoundFilter);
        }

        var filtersForSelect = {};
        filtersForSelect[EnumFilterType.FROZENFILTER] = EnumFilterResultMode.MATCH_RETURN_FALSE;
        filtersForSelect[EnumFilterType.FROZENCONDITIONFILTER] = EnumFilterResultMode.MATCH_RETURN_FALSE;
        filtersForSelect[EnumFilterType.TRANSLUCENT] = EnumFilterResultMode.MATCH_RETURN_FALSE;
        filtersForSelect[EnumFilterType.TRANSLUCENT_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_FALSE;
        filtersForSelect[EnumFilterType.CONDITION_TRANSLUCENT_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_FALSE;
        filtersForSelect[EnumFilterType.ISOLATE_TRANSLUCENT] = EnumFilterResultMode.MATCH_RETURN_FALSE;
        filtersForSelect[EnumFilterType.ISOLATE_TRANSLUCENT_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_FALSE;
        filtersForSelect[EnumFilterType.ISOLATE_CONDITION_TRANSLUCENT_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_FALSE;

        _selectableCompoundFilter.setFilterMode(filtersForSelect);
        for (f in filtersForSelect) {
            _basicFilterList[f].registerToCompoundFilter(_selectableCompoundFilter);
        }

        var filtersForOverride = {};
        filtersForOverride[EnumFilterType.ISOLATE_TRANSLUCENT] = EnumFilterResultMode.MATCH_RETURN_TRUE;
        filtersForOverride[EnumFilterType.ISOLATE_TRANSLUCENT_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_TRUE;
        filtersForOverride[EnumFilterType.ISOLATE_CONDITION_TRANSLUCENT_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_TRUE;
        filtersForOverride[EnumFilterType.CONDITION_TRANSLUCENT_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_TRUE;
        filtersForOverride[EnumFilterType.TRANSLUCENT] = EnumFilterResultMode.MATCH_RETURN_TRUE;
        filtersForOverride[EnumFilterType.TRANSLUCENT_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_TRUE;
        filtersForOverride[EnumFilterType.OVERRIDEFILTER] = EnumFilterResultMode.MATCH_RETURN_TRUE;
        filtersForOverride[EnumFilterType.USER_OVERRIDE] = EnumFilterResultMode.MATCH_RETURN_TRUE;
        filtersForOverride[EnumFilterType.CONDITION_OVERRIDE] = EnumFilterResultMode.MATCH_RETURN_TRUE;
        filtersForOverride[EnumFilterType.FROZENFILTER] = EnumFilterResultMode.MATCH_RETURN_TRUE;
        filtersForOverride[EnumFilterType.FROZENCONDITIONFILTER] = EnumFilterResultMode.MATCH_RETURN_TRUE;

        // different override conditions have different priority
        // translucent condition is highest, then frozen (no override material except translucent), then selection,
        // the last is normal override conditions
        var priorityForOverride = {};
        priorityForOverride[EnumFilterType.ISOLATE_TRANSLUCENT] = 5;
        priorityForOverride[EnumFilterType.ISOLATE_TRANSLUCENT_OTHERS] = 5;
        priorityForOverride[EnumFilterType.ISOLATE_CONDITION_TRANSLUCENT_OTHERS] = 5;
        priorityForOverride[EnumFilterType.CONDITION_TRANSLUCENT_OTHERS] = 5;
        priorityForOverride[EnumFilterType.TRANSLUCENT] = 5;
        priorityForOverride[EnumFilterType.TRANSLUCENT_OTHERS] = 5;
        priorityForOverride[EnumFilterType.OVERRIDEFILTER] = 0;
        priorityForOverride[EnumFilterType.USER_OVERRIDE] = 0;
        priorityForOverride[EnumFilterType.CONDITION_OVERRIDE] = 0;
        priorityForOverride[EnumFilterType.FROZENFILTER] = 3;
        priorityForOverride[EnumFilterType.FROZENCONDITIONFILTER] = 3;

        _overrideCompoundFilter.setFilterMode(filtersForOverride);
        _overrideCompoundFilter.setFilterPriority(priorityForOverride);
        for (f in filtersForOverride) {
            _basicFilterList[f].registerToCompoundFilter(_overrideCompoundFilter);
        }

        var filterForHighOverride = {};
        filterForHighOverride[EnumFilterType.OVERRIDEFILTER] = EnumFilterResultMode.MATCH_RETURN_TRUE;
        filterForHighOverride[EnumFilterType.USER_OVERRIDE] = EnumFilterResultMode.MATCH_RETURN_TRUE;
        filterForHighOverride[EnumFilterType.CONDITION_OVERRIDE] = EnumFilterResultMode.MATCH_RETURN_TRUE;
        filterForHighOverride[EnumFilterType.CONDITION_TRANSLUCENT_OTHERS] = EnumFilterResultMode.MATCH_RETURN_TRUE;

        // BIMFACEDM-3857 'TRANSLUCENT_OTHERS' should not be in high priority in most cases.
        //filterForHighOverride[EnumFilterType.ISOLATE_CONDITION_TRANSLUCENT_OTHERS] = EnumFilterResultMode.NOMATCH_RETURN_TRUE;

        _highPriorityOverrideCompoundFilter.setFilterMode(filterForHighOverride);
        for (f in filterForHighOverride) {
            _basicFilterList[f].registerToCompoundFilter(_highPriorityOverrideCompoundFilter);
        }

        var filterForHiddenFileId = {};
        filterForHiddenFileId[EnumFilterType.FILE_VISIBLE] = EnumFilterResultMode.NOMATCH_RETURN_TRUE;
        filterForHiddenFileId[EnumFilterType.FILE_HIDDEN] = EnumFilterResultMode.MATCH_RETURN_TRUE;

        _hiddenFileIdCompoundFilter.setFilterMode(filterForHiddenFileId);
        for (f in filterForHiddenFileId) {
            _basicFilterList[f].registerToCompoundFilter(_hiddenFileIdCompoundFilter);
        }

        // promote filter result's priority to go into render pool.
        var filterForPromotionToRenderPool = {};
        filterForPromotionToRenderPool[EnumFilterType.RENDER_PROMOTION] = EnumFilterResultMode.MATCH_RETURN_TRUE;
        //BIMFACEDM-3857
        filterForPromotionToRenderPool[EnumFilterType.ISOLATE_CONDITION_TRANSLUCENT_OTHERS] = EnumFilterResultMode.MATCH_RETURN_TRUE;

        _renderPromotionCompoundFilter.setFilterMode(filterForPromotionToRenderPool);
        for (f in filterForPromotionToRenderPool) {
            _basicFilterList[f].registerToCompoundFilter(_renderPromotionCompoundFilter);
        }

        // Render with board line if this filter effective
        var filterForRenderWithBoardLine = {};
        filterForRenderWithBoardLine[EnumFilterType.USER_WITH_BOARDLINE] = EnumFilterResultMode.MATCH_RETURN_TRUE;

        _renderWithBoardLineCompoundFilter.setFilterMode(filterForRenderWithBoardLine);
        for (f in filterForRenderWithBoardLine) {
            _basicFilterList[f].registerToCompoundFilter(_renderWithBoardLineCompoundFilter);
        }
    }

    _init();

    // ------------------------------------- external API ------------------------------------- //
    this.getBasicFilterList = function(){
        return _basicFilterList;
    };
    this.getFilterType = function () {
        return EnumFilterType;
    };

    this.saveState = function () {

        var obj = {};

        var basicFilter;
        for (var i = 0, len = _basicFilterList.length; i < len; i++) {
            basicFilter = _basicFilterList[i];
            obj[basicFilter.getName()] = basicFilter.getAll();
        }

        obj.sceneState = this.getSceneState();
        obj.version = "0.4";

        return obj;

    };

    this.loadState = function (obj) {
        // reset all filter state at first
        this.clearAll();

        if (obj.hasOwnProperty("version")) {
            if (obj.version == "0.4") {
                var filterMap = {};
                for (var i = 0, len = _basicFilterList.length; i < len; i++) {
                    filterMap[_basicFilterList[i].getName()] = i;
                }

                for (var attr in obj) {
                    if (attr === "sceneState" || attr === "version") {
                        continue;
                    }

                    if (filterMap.hasOwnProperty(attr)) {
                        _basicFilterList[filterMap[attr]].setByData(obj[attr]);
                    }
                    else {
                        CLOUD.Logger.warn("Warning: Not supported filter '" + attr + "'");
                    }
                }
            }
        }
        else {
            // process the compatibility with V3 Engine
            // old version use index as key, and selection state is managed in filter
            for (var index in obj) {
                if (index === "sceneState") {
                    continue;
                }

                // in old version, the third _basicFilterList element (index 2) is filter for selection, which is removed,
                // so need to shift the index for filters which index is larger than 2
                if (index < 2) {
                    _basicFilterList[index].setByData(obj[index]);
                }
                else if (index > 2) {
                    if (index < EnumFilterType.BASICFILTER_COUNT+2) {
                        _basicFilterList[index-1].setByData(obj[index]);
                    }
                }
                else if (index == 2) {
                    CLOUD.Logger.warn("Warning: Old version filter data! The selection state is out of the filter, can not restore it.")
                }
            }
        }

        this.setSceneState(obj.sceneState);

    };

    this.clear = function () {

        for (var i = 0, len = _basicFilterList.length; i < len; i++) {
            var filterType =_basicFilterList[i].getType();
            if (filterType === EnumFilterType.FROZENFILTER
                || filterType === EnumFilterType.USER_WITH_BOARDLINE) {
                continue;
            }

            _basicFilterList[i].clearAll();
        }

        this.setSceneState(EnumSceneState.DISABLED);
    };

    this.clearAll = function () {

        for (var i = 0, len = _basicFilterList.length; i < len; i++) {
            _basicFilterList[i].clearAll();
        }

        this.setSceneState(EnumSceneState.DISABLED);
    };

    this.clearIsolate = function () {
        this.clearAllIsolateList();
        this.clearAllIsolateConditions();

    };

    // ---------------- frozen filter  ---------------- //

    this.clearFrozenList = function () {
        _frozenFilter.clearAll();
    };

    this.addToFrozenList = function (ids) {

        _frozenFilter.add(ids);
    };

    this.removeFromFrozenList = function (ids) {

        _frozenFilter.remove(ids);
    };

    this.setFrozenList = function (ids) {

        this.clearFrozenList();
        this.addToFrozenList(ids);

    };

    this.setFrozenConditions = function(conditions) {
        _basicFilterList[EnumFilterType.FROZENCONDITIONFILTER].setByData(conditions);
    };

    this.getFrozenConditions = function() {
        return _basicFilterList[EnumFilterType.FROZENCONDITIONFILTER].getAll();
    };

    this.clearFrozenConditions = function() {
        _basicFilterList[EnumFilterType.FROZENCONDITIONFILTER].clear();
    };

    this.clearFrozen = function() {
        this.clearFrozenList();
        this.clearFrozenConditions();
    };

    // ---------------- ID filter  ---------------- //
    this.clearAllIdList = function () {
        var i;
        for (i = EnumFilterType.IDFILTER_OFFSET; i <= EnumFilterType.IDFILTER_ENDOFFSET; i++) {
            _basicFilterList[i].clearAll();
        }

    };

    this.clearIdList = function (type) {
        var internalType = EnumFilterType.IDFILTER_OFFSET + type;

        if (internalType >= EnumFilterType.IDFILTER_OFFSET &&
            internalType <= EnumFilterType.IDFILTER_ENDOFFSET) {
            _basicFilterList[internalType].clear();
        }
    };

    this.addToIdList = function (type, ids) {
        var internalType = EnumFilterType.IDFILTER_OFFSET + type;

        if (internalType >= EnumFilterType.IDFILTER_OFFSET &&
            internalType <= EnumFilterType.IDFILTER_ENDOFFSET) {
            _basicFilterList[internalType].add(ids);
        }
    };


    this.removeFromIdList = function (type, ids) {
        var internalType = EnumFilterType.IDFILTER_OFFSET + type;

        if (internalType >= EnumFilterType.IDFILTER_OFFSET &&
            internalType <= EnumFilterType.IDFILTER_ENDOFFSET) {
            _basicFilterList[internalType].remove(ids);
        }
    };

    this.setIdList = function (type, ids) {

        this.clearIdList(type);
        this.addToIdList(type, ids);

    };

    // ----------------  override material --------------------------- //

    this.clearAllOverrideList = function () {
        _overrideFilter.clearAll();
    };

    this.clearOverrideList = function (name) {
        _overrideFilter.clear(name);
    };

    this.addToOverrideList = function (name, ids, materialName) {

        if (ids && ids.length > 0) {

            if (!_materialSelector.has(materialName)) {
                materialName = _materialSelector.getDefaultMaterialName();
            }

            _overrideFilter.add(name, ids, materialName);
        }

    };

    this.removeFromOverrideList = function (name, ids) {

        _overrideFilter.remove(name, ids);
    };

    this.setOverrideList = function (name, ids, materialName) {

        this.clearOverrideList(name);
        this.addToOverrideList(name, ids, materialName);

    };

    this.addToOverrideListByColor = function (name, ids, color) {

        var materialName = _materialSelector.add(color);
        _overrideFilter.add(name, ids, materialName);

    };

    this.setOverrideListByColor = function (name, ids, color) {

        this.clearOverrideList(name);
        this.addToOverrideListByColor(name, ids, color);
    };

    // ---------------------- user list--------------------- //

    this.clearAllUserList = function () {
        var i;
        for (i = EnumFilterType.USERFILTER_OFFSET;
             i <= EnumFilterType.USERFILTER_ENDOFFSET; i++) {
            _basicFilterList[i].clearAll();
        }
    };

    this.clearUserListByType = function (type) {
        var internalType = EnumFilterType.USERFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.USERFILTER_OFFSET &&
            internalType <= EnumFilterType.USERFILTER_ENDOFFSET) {
            _basicFilterList[internalType].clearAll();
        }

    };

    this.clearUserList = function (type, name) {
        var internalType = EnumFilterType.USERFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.USERFILTER_OFFSET &&
            internalType <= EnumFilterType.USERFILTER_ENDOFFSET) {
            _basicFilterList[internalType].clear(name);
        }

    };

    this.addToUserList = function (type, name, keys, value) {

        var internalType = EnumFilterType.USERFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.USERFILTER_OFFSET &&
            internalType <= EnumFilterType.USERFILTER_ENDOFFSET) {
            _basicFilterList[internalType].add(name, keys, value);
        }
    };

    this.removeFromUserList = function (type, name, keys) {

        var internalType = EnumFilterType.USERFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.USERFILTER_OFFSET &&
            internalType <= EnumFilterType.USERFILTER_ENDOFFSET) {
            _basicFilterList[internalType].remove(name, keys);
        }
    };

    this.setUserList = function (type, name, keys, value) {

        this.clearUserList(type, name);
        this.addToUserList(type, name, keys, value);

    };

    // ------------------- Isolate --------------------------- //

    this.isIsolate = function () {
        var i;
        for (i = EnumFilterType.ISOLATEFILTER_OFFSET;
             i <= EnumFilterType.ISOLATEFILTER_ENDOFFSET;
             i++) {
            if (!_basicFilterList[i].isEmpty()) {
                return true;
            }
        }

        return false;
    };

    this.isFiltering = function () {

        if (this.isIsolate()) {
            return true;
        }

        return (!_basicFilterList[EnumFilterType.HIDDEN].isEmpty() ||
            !_basicFilterList[EnumFilterType.VISIBLE].isEmpty() ||
            !_basicFilterList[EnumFilterType.TRANSLUCENT].isEmpty() ||
            !_basicFilterList[EnumFilterType.TRANSLUCENT_OTHERS].isEmpty() ||
            (this.getSceneState() !== EnumSceneState.DISABLED));
    };

    this.setFrozonMaterial = function (params) {

        _materialSelector.setFrozonMaterial(params);

    };

    this.getFrozonMaterial = function () {

        return _materialSelector.getFrozonMaterial();

    };
    this.setSelectedMaterial = function (params) {

        _materialSelector.setSelectedMaterial(params);

    };

    this.getSelectedMaterial = function () {

        return _materialSelector.getSelectedMaterial();

    };

    this.setIsolateMaterial = function (params) {

        _materialSelector.setIsolateMaterial(params);

    };

    this.getIsolateMaterial = function () {

        return _materialSelector.getIsolateMaterial();

    };

    this.resetIsolateMaterial = function () {

        _materialSelector.resetIsolateMaterial();

    };

    this.clearAllIsolateList = function () {
        var i;
        for (i = EnumFilterType.ISOLATEFILTER_OFFSET;
             i <= EnumFilterType.ISOLATEFILTER_ENDOFFSET;
             i++) {
            _basicFilterList[i].clear();
        }
    };

    this.clearIsolateList = function (type) {
        var internalType = EnumFilterType.ISOLATEFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.ISOLATEFILTER_OFFSET &&
            internalType <= EnumFilterType.ISOLATEFILTER_ENDOFFSET) {
            _basicFilterList[internalType].clear();
        }
    };

    this.addToIsolateList = function (type, ids) {
        var internalType = EnumFilterType.ISOLATEFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.ISOLATEFILTER_OFFSET &&
            internalType <= EnumFilterType.ISOLATEFILTER_ENDOFFSET) {
            _basicFilterList[internalType].add(ids);
        }
    };

    this.removeFromIsolateList = function (type, ids) {
        var internalType = EnumFilterType.ISOLATEFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.ISOLATEFILTER_OFFSET &&
            internalType <= EnumFilterType.ISOLATEFILTER_ENDOFFSET) {
            _basicFilterList[internalType].remove(ids);
        }
    };

    this.setIsolateList = function (type, ids) {
        this.clearIsolateList(type);
        this.addToIsolateList(type, ids);

    };

    // ------------------- Isolate Conditions --------------------------- //
    //

    this.setIsolateConditions = function (conditions, type) {
        var internalType = EnumFilterType.ISOLATECONDITIONFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.ISOLATECONDITIONFILTER_OFFSET &&
            internalType <= EnumFilterType.ISOLATECONDITIONFILTER_ENDOFFSET) {
            _basicFilterList[internalType].setByData(conditions);
        }
    };

    this.getIsolateConditions = function (type) {
        var items = null;

        var internalType = EnumFilterType.ISOLATECONDITIONFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.ISOLATECONDITIONFILTER_OFFSET &&
            internalType <= EnumFilterType.ISOLATECONDITIONFILTER_ENDOFFSET) {
            items = _basicFilterList[internalType].getAll();
        }

        return items;
    };

    this.clearIsolateConditions = function (type) {
        var internalType = EnumFilterType.ISOLATECONDITIONFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.ISOLATECONDITIONFILTER_OFFSET &&
            internalType <= EnumFilterType.ISOLATECONDITIONFILTER_ENDOFFSET) {
            _basicFilterList[internalType].clear();
        }
    };

    this.clearAllIsolateConditions = function () {
        var i;
        for (i = EnumFilterType.ISOLATECONDITIONFILTER_OFFSET;
             i <= EnumFilterType.ISOLATECONDITIONFILTER_ENDOFFSET;
             i++) {
            _basicFilterList[i].clearAll();
        }
    };

    // ------------------- Conditions --------------------------- //
    this.setConditions = function (type, conditions) {
        var internalType = EnumFilterType.CONDITIONFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.CONDITIONFILTER_OFFSET &&
            internalType <= EnumFilterType.CONDITIONFILTER_ENDOFFSET) {
            _basicFilterList[internalType].setByData(conditions);
        }
    };

    this.getConditions = function (type) {
        var items = null;

        var internalType = EnumFilterType.CONDITIONFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.CONDITIONFILTER_OFFSET &&
            internalType <= EnumFilterType.CONDITIONFILTER_ENDOFFSET) {
            items = _basicFilterList[internalType].get();
        }

        return items;
    };

    this.clearConditions = function (type) {
        var internalType = EnumFilterType.CONDITIONFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.CONDITIONFILTER_OFFSET &&
            internalType <= EnumFilterType.CONDITIONFILTER_ENDOFFSET) {
            _basicFilterList[internalType].clearAll();
        }
    };

    this.clearAllConditions = function () {
        var i;
        for (i = EnumFilterType.CONDITIONFILTER_OFFSET;
             i <= EnumFilterType.CONDITIONFILTER_ENDOFFSET;
             i++) {
            _basicFilterList[i].clear();
        }
    };

    // ---------- Override scene ---------- //
    this.makeSceneTranslucent = function () {
        this.setSceneState(EnumSceneState.TRANSLUCENT);
    };

    this.cancelSceneTranslucent = function () {
        this.setSceneState(EnumSceneState.DISABLED);
    };

    this.hideScene = function () {
        this.setSceneState(EnumSceneState.HIDDEN);
    };

    this.showScene = function () {
        this.setSceneState(EnumSceneState.DISABLED);
    };

    this.setSceneState = function (state) {
        _sceneState = state;
    };

    this.getSceneState = function () {
        return _sceneState;
    };

    this.cancelTranslucent = function () {
        this.clearIdList(EnumIdBasedType.TRANSLUCENT);
        this.clearIdList(EnumIdBasedType.TRANSLUCENT_OTHERS);
    };

    this._addIdsToFilter = function (type, ids) {
        var internalType = EnumFilterType.IDFILTER_OFFSET + type;
        if (internalType >= EnumFilterType.IDFILTER_OFFSET &&
            internalType <= EnumFilterType.IDFILTER_ENDOFFSET) {
            _basicFilterList[internalType].add(ids);
        }
    };

    this.hideByIds = function (ids) {
        this._addIdsToFilter(EnumIdBasedType.HIDDEN, ids);

    };

    this.showByIds = function (ids) {
        this._addIdsToFilter(EnumIdBasedType.VISIBLE, ids);

    };

    this.makeTranslucentByIds = function (ids) {
        this._addIdsToFilter(EnumIdBasedType.TRANSLUCENT, ids);

    };

    this.makeTranslucentOthersByIds = function (ids) {
        this._addIdsToFilter(EnumIdBasedType.TRANSLUCENT_OTHERS, ids);

    };

    //----------------- internal method --------------------//

    this._isVisible = function (object) {

        var sceneState = this.getSceneState();
        // scene is hidden
        if (sceneState === EnumSceneState.HIDDEN) {
            return false;
        }

        return _visibleCompoundFilter.apply(object);
    };

    this._isSelectable = function (object) {
        var sceneState = this.getSceneState();
        if (sceneState === EnumSceneState.TRANSLUCENT) {
            return false;
        }

        return _selectableCompoundFilter.apply(object, this.getSceneState());
    };
    this.getMaterialNameByColor = function(color){
        return _materialSelector.getMaterialNameByColor(color);    
    };
    this.getMaterialByName = function(name){
        return _materialSelector.get(name);
    };
    this._getOverrideMaterial = function (object) {

        var sceneState = this.getSceneState();
        if (sceneState === EnumSceneState.TRANSLUCENT) {
            return _materialSelector.get('scene');
        }

        var matchedFilter = _overrideCompoundFilter.getApplyFilterId(object);

        var material = null;
        var materialName = '';
        switch (matchedFilter) {
            case EnumFilterType.ISOLATE_TRANSLUCENT:
            case EnumFilterType.ISOLATE_TRANSLUCENT_OTHERS:
            case EnumFilterType.ISOLATE_CONDITION_TRANSLUCENT_OTHERS:
                material = this.getIsolateMaterial();
                break;
            case EnumFilterType.CONDITION_TRANSLUCENT_OTHERS:
            case EnumFilterType.TRANSLUCENT:
            case EnumFilterType.TRANSLUCENT_OTHERS:
                material = _materialSelector.get('scene');
                break;
            case EnumFilterType.FROZENFILTER:
            case EnumFilterType.FROZENCONDITIONFILTER:
                // if hit frozen filter, the object has no override material
                break;

            case EnumFilterType.OVERRIDEFILTER:
            case EnumFilterType.USER_OVERRIDE:
            case EnumFilterType.CONDITION_OVERRIDE:
                var itemValue = _basicFilterList[matchedFilter].getMatchItem(object);
                if (itemValue.hasOwnProperty("color")) {

                    materialName = _materialSelector.getMaterialNameByColor(itemValue.color);

                } else if (itemValue.material) {

                    materialName = itemValue.material;

                } else {

                    // set material directly
                    materialName = itemValue;
                }
                break;
        }

        if (!material && materialName !== '') {
            if (!_materialSelector.has(materialName)) {

                //console.log("no set override material, use default material!");
                materialName = _materialSelector.getDefaultMaterialName();
            }

            material = _materialSelector.get(materialName);
        }

        return material;
    };

    this._getMaterialName = function (object) {

        var sceneState = this.getSceneState();
        if (sceneState === EnumSceneState.TRANSLUCENT) {
            return 'scene';
        }

        var matchedFilter = _overrideCompoundFilter.getApplyFilterId(object);

        var material = null;
        var materialName = '';
        switch (matchedFilter) {
            case EnumFilterType.ISOLATE_TRANSLUCENT:
            case EnumFilterType.ISOLATE_TRANSLUCENT_OTHERS:
            case EnumFilterType.ISOLATE_CONDITION_TRANSLUCENT_OTHERS:
                material = this.getIsolateMaterial();
                materialName = material.name;
                break;
            case EnumFilterType.CONDITION_TRANSLUCENT_OTHERS:
            case EnumFilterType.TRANSLUCENT:
            case EnumFilterType.TRANSLUCENT_OTHERS:
                materialName = 'scene';
                break;
            case EnumFilterType.FROZENFILTER:
            case EnumFilterType.FROZENCONDITIONFILTER:
                // if hit frozen filter, the object has no override material
                break;
            case EnumFilterType.OVERRIDEFILTER:
            case EnumFilterType.USER_OVERRIDE:
            case EnumFilterType.CONDITION_OVERRIDE:
                var itemValue = _basicFilterList[matchedFilter].getMatchItem(object);
                if (itemValue.hasOwnProperty("color")) {
                    materialName = _materialSelector.getMaterialNameByColor(itemValue.color);
                } else if (itemValue.material) {
                    materialName = itemValue.material;
                } else {
                    // set material directly
                    materialName = itemValue;
                }
                break;
        }

        return materialName;
    };

    this._getMaterialByName = function (name) {
        if (name == "isolate") {
            return _materialSelector.getIsolateMaterial();
        }
        else if(name == "frozen"){
            return _materialSelector.getFrozonMaterial();
        }
        else if(name == "selected"){
            return _materialSelector.getSelectedMaterial();
        }
        return _materialSelector.get(name);
    };

    this._hasHighPriorityOverrideMaterial = function (object) {

        return this.getSceneState() === EnumSceneState.TRANSLUCENT ||
            _highPriorityOverrideCompoundFilter.apply(object);
    };

    this._hasOverrideMaterial = function (object) {

        return this.getSceneState() === EnumSceneState.TRANSLUCENT ||
            _highPriorityOverrideCompoundFilter.apply(object) || _overrideCompoundFilter.apply(object);
    };

    this._isHiddenFileId = function (object) {
        return _hiddenFileIdCompoundFilter.apply(object);
    };

    this._hasHiddenFileIdFilter = function () {
        return !_hiddenFileIdCompoundFilter.isEmpty();
    };

    this._hasVisibleFilter = function () {
        return this.getSceneState() === EnumSceneState.HIDDEN || !_visibleCompoundFilter.isEmpty();
    };

    this._hasSelectableFilter = function () {
        return this.getSceneState() === EnumSceneState.TRANSLUCENT ||
            !_selectableCompoundFilter.isEmpty();
    };

    this._hasOverrideMaterialFilter = function () {
        return this.getSceneState() === EnumSceneState.TRANSLUCENT ||
            !_overrideCompoundFilter.isEmpty();
    };

    this._hasLowPriorityOverride = function () {

        return _overrideCompoundFilter.hasFilterNotIn(_highPriorityOverrideCompoundFilter);

    };

    this._isRenderPromotion = function (object) {
        return _renderPromotionCompoundFilter.apply(object);
    };

    this._hasRenderPromotionFilter = function () {
        return !_renderPromotionCompoundFilter.isEmpty();
    };
    this._isRenderWithBoardline = function (object) {
        return _renderWithBoardLineCompoundFilter.apply(object);
    };

    this._hasRenderWithBoardlineFilter = function () {
        return !_renderWithBoardLineCompoundFilter.isEmpty();
    };
};