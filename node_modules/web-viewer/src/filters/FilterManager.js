/**
 * 过滤管理器：   用于构件可见性，材质变更，隔离等处理
 * 构件状态 ：    选中、高亮、半透明、隔离(隐藏其它，半透明其它)
 *
 * 六个过滤器：   id过滤器，材质过滤器，隔离过滤器，自定义过滤器，条件过滤器。
 *                这些过滤存在相互交叉和依赖，内部使用优先级控制过滤状态。
 *                id过滤器的优先级最高，隔离过滤器是在id过滤器的基础上进行的，
 *                例如，隐藏了某些构件，在隔离半透明了另一些构件，取消隔离后，隐藏的构件依然是隐藏的。
 * id过滤器：     文件隐藏(隐藏自己)、文件显示(隐藏其它)、
 *                构件显示(隐藏其它)、构件隐藏(隐藏自己)、
 *                构件半透明(半透明自己)、构件不透明(半透明其它)
 * 材质过滤器：   批量(分组)修改构件材质；
 *                材质过滤的优先级为：
 *                  1, 半透明构件采用半透明材质；
 *                  2, 如果构件被冻结，则保持构件自身的材质；
 *                  3, 如果被选中，采用选中高亮材质(在filter之外管理)
 *                  4, 构件被其他材质过滤器命中，采用该过滤器指定的材质
 *
 * 隔离过滤器：   隐藏隔离出的构件(隐藏自己)，隐藏未隔离出的构件(隐藏其它),
 *                半透明隔离出的构件(半透明自己)，半透明未隔离出的构件(半透明其它)
 * 自定义过滤器： 依赖userdata数据
 * 条件过滤器：   根据条件过滤，依赖userdata数据
 * 冻结过滤器：   暂时只支持冻结构件的不可选状态，即在冻结过滤器中的id对应的构件不能选中,
 *                被冻结构件如果不是半透明状态，则保持构件自身的材质
 *
 * 过滤器优先级： 材质过滤管理器中的过滤器存在优先级，对于同样优先级的过滤器，后设置的过滤器具有高优先级；
 *                对于其他过滤管理器，过滤器根据设置的先后设置优先级，后设置的过滤器具有高优先级
 *
 * @class  CLOUD.FilterManager
 *
 */


/**
 * 隔离条件类型枚举
 * @readonly
 * @enum {number}
 */
CLOUD.EnumConditionType = {
    HIDDEN_OTHERS: 0,
    TRANSLUCENT_OTHERS: 1,
    OVERRIDE: 2
};

/**
 * 基于ID的过滤器类型枚举
 * @readonly
 * @enum {number}
 */
CLOUD.EnumIdBasedType = {
    FILE_VISIBLE: 0,
    FILE_HIDDEN: 1,
    VISIBLE: 2,
    HIDDEN: 3,
    TRANSLUCENT: 4,
    TRANSLUCENT_OTHERS: 5,
    RENDER_PROMOTION: 6
};

/**
 * 用户自定义类型枚举
 * @readonly
 * @enum {number}
 */
CLOUD.EnumUserType = {
    /** 隐藏 */
    HIDDEN_DATA: 0,
    /** 更改材质 */
    OVERRIDE_DATA: 1,
    /** 显示线框 */
    WITH_BOARDLINE: 2
};

/**
 * 隔离状态枚举
 * @readonly
 * @enum {number}
 */
CLOUD.EnumIsolateState = {
    /** 隐藏自己 */
    HIDDEN: 0,
    /** 隐藏其它 */
    HIDDEN_OTHERS: 1,
    /** 半透明自己 */
    TRANSLUCENT: 2,
    /** 半透明其它 */
    TRANSLUCENT_OTHERS: 3
};

/**
 * 场景状态枚举
 * @readonly
 * @enum {number}
 */
CLOUD.EnumSceneState = {
    DISABLED: 0,
    TRANSLUCENT: 1,
    HIDDEN: 2
};

CLOUD.FilterManager = function () {

    var sceneStateHelper = null;
    this._filterImpl = new CLOUD.FilterManager2();

    //declare action list
    var filterActionList = [];
    var isolateFilterAction = null;
    var objectInfoManager = new CLOUD.objectInfoManager();
    var filterManagerIO = new CLOUD.FilterManagerIO();

    this.setSceneStateHelper = function(sceneStateHlp){
        sceneStateHelper = sceneStateHlp;
    };
    this.getFilterActionList = function(){
        return filterActionList;
    };
    this.clearFilterActionList = function(){
        filterActionList=[];
    };
    //init filter manager
    this.initFilterManager = function(objectsMap){
        objectInfoManager.init(objectsMap);
    };
    var _stateChanged = false;

    this.isStateChanged = function () {
        return _stateChanged;
    }

    this.enableStateChanged = function () {
        _stateChanged = true;
    }

    this.diableStateChanged = function () {
        _stateChanged = false;
    }

    //update Isolate Action
    this.setIsolateAction = function(isolateFA){
        isolateFilterAction = isolateFA;

        isolateFilterAction.apply();//To do
    };

    //push back filter action except isolateFilterAction
    this.pushBack = function(filterAction){
        var className = filterAction.getClassName();
        if(className=="IsolateIdsFA"||className=="IsolateConditionFA"){
            isolateFilterAction = filterAction;
        }
        else{
            filterActionList.push(filterAction);
        }
        _stateChanged=true;
        filterAction.applyFilter(objectInfoManager);
    };
    this.showAll = function(){
        //_stateChanged = true;
        //objectInfoManager.clearVisible();
        var visibleFA = new CLOUD.VisibleIdsFA(false,true);
        visibleFA.ids=[];
        this.pushBack(visibleFA); 
        //objectInfoManager.clearIsolateHide();
    };
    this.hideAll = function(){
        //_stateChanged = true;
        //objectInfoManager.hideAll();
        var visibleFA = new CLOUD.VisibleIdsFA(false,false);
        visibleFA.ids=[];
        this.pushBack(visibleFA); 
    };
    this.getObjectInfoManager = function(){
        return objectInfoManager;
    };
    /**
     * 判断构件是否可见
     *
     * @param {Object} object - 构件对象 {name: xxx, userData: xxx}
     * @return {Boolean} true: 可见， 否则 不可见
     */
    this._isVisible = function (object) {
        var id = object.name;
        return !objectInfoManager.isHidden(id);
    };
    this._isTransparent = function(object){
        var id = object.name;
        return objectInfoManager.isTransparent(id);
    };
    /**
     * 判断对象是否可以被pick。冻结的构件或者半透明的构件不能选中。
     *
     * @param {Object} object - 构件对象 {name: xxx, userData: xxx}
     * @return {Boolean} 是否可以pick - true: 对象可以被pick，false: 对象不可以pick
     */
    this._isSelectable = function (object) {
        var id = object.name;
        return !objectInfoManager.isFrozen(id);
    };
    this._isSelectableById = function (id) {
        //var id = object.name;
        return !objectInfoManager.isFrozen(id);
    };
    /**
     * 根据构件对象获得构件材质
     *
     * @param {Object} object - 构件对象 {name: xxx, userData: xxx}
     */
    this._getOverrideMaterial = function (object) {
        var id = object.name;

        if(objectInfoManager.isFrozen(id)){
            return  this._filterImpl.getFrozonMaterial();//To do()
        }else{
            return objectInfoManager.getMaterial(id);
        }
    };
    
    /**
     * 根据构件对象获得构件材质名
     *
     * @param {Object} object - 构件对象 {name: xxx, userData: xxx}
     */
    this._getMaterialName = function (object) {
        return this._filterImpl._getMaterialName(object);
    };

    /**
     * 根据构件材质名获得构件材质
     *
     * @param {string} name - 材质名
     */
    this._getMaterialByName = function (name) {
        return this._filterImpl._getMaterialByName(name);
    };

    /**
     * 判断构件的材质是否被重载
     *
     * @param {Object} object - 自定义数据 {name: xxx, userData: xxx}
     * @return {Boolean} true: 高亮
     */
    this._hasOverrideMaterial = function (object) {
        var id = object.name;
        return objectInfoManager.hasOverrideMaterial(id);
    };

    /**
     * 判断构件是否高亮
     *
     * @param {Object} object - 自定义数据 {name: xxx, userData: xxx}
     * @return {Boolean} true: 高亮
     */
    this._hasHighPriorityOverrideMaterial = function (object) {
        return this._filterImpl._hasHighPriorityOverrideMaterial(object);
    };

    /**
     * 是否隐藏对应id的文件
     *
     * @param {String} id - 文件id
     */
    this._isHiddenFileId = function (object) {
        return this._filterImpl._isHiddenFileId(object);
    };

    /**
     * 是否提升对应id的构件
     *
     * @param {object} nodeinfo where nodeid, userData can be accessed.
     */
    this._isRenderPromotion = function (object) {
        return this._filterImpl._isRenderPromotion(object);
    };

    /**
     * 是否是通过userData过滤要显示边框线的构件
     *
     * @param {object} nodeinfo where nodeid, userData can be accessed.
     */
    this._isRenderWithBoardline = function (object) {
        return this._filterImpl._isRenderWithBoardline(object);
    };

    this._hasHiddenFileIdFilter = function() {
        return this._filterImpl._hasHiddenFileIdFilter();
    };

    this._hasVisibleFilter = function() {
        return objectInfoManager.hasObjectHidden();
    };

    this._hasSelectableFilter = function() {
        return objectInfoManager.hasObjectCantSelected();
    };

    this._hasTransparentFilter = function(){
        return objectInfoManager.hasObjectTransparent();
    };

    this._hasOverrideMaterialFilter = function() {
        return objectInfoManager.hasOverrideMaterial();
    };

    this._hasLowPriorityOverride = function() {
        return this._filterImpl._hasLowPriorityOverride();
    };

    this._hasRenderPromotionFilter = function() {
        return this._filterImpl._hasRenderPromotionFilter();
    };
    this._hasRenderWithBoardlineFilter = function() {
        return this._filterImpl._hasRenderWithBoardlineFilter();
    };
    // ------------------------------------- 外部 API ------------------------------------- //

    this.saveState = function(){
        return filterManagerIO.saveState(this);
    };
    this.loadState = function(obj){
        filterManagerIO.loadState(obj,this);
    };
    /**
     * 清除所有的过滤器数据, 除了冻结过滤器
     * 注意：
     * 1. 冻结的构件没有清除，因为冻结操作可能是在初始化的时候就做了，整个生命周期里，都要保持冻结
     * 2. 构件过滤显示线框的‘USER_WITH_BOARDLINE’，没有清除，因为其作为用户初始设置，希望在整个生命周期有效。
     *
     *
     */
    this.clear = function () {
        objectInfoManager.resetAll();
        _stateChanged=true;
    };
     
    this.clearAll = function () {
        this.enableStateChanged();
        return this._filterImpl.clearAll();
    };

    /**
     * 清除隔离过滤器数据
     *
     */
    this.clearIsolate = function () {
        objectInfoManager.clearIsolates();
    };

    // ---------------- 冻结过滤器  ---------------- //

    /**
     * 清除指定类型的数据 - 清除【Frozen id列表】
     *
     */
    this.clearFrozenList = function () {
        this.enableStateChanged();
        return this._filterImpl.clearFrozenList();
    };

    /**
     * 批量增加 - 增加到【Frozen id列表】
     *
     * @param {Array} ids - id数组
     */
    this.addToFrozenList = function (ids) {
        this.enableStateChanged();
        return this._filterImpl.addToFrozenList(ids);
    };

    /**
     * 批量删除 - 从【Frozen id列表】中移除ids
     *
     * @param {Array} ids - id数组
     */
    this.removeFromFrozenList = function (ids) {
        this.enableStateChanged();
        return this._filterImpl.removeFromFrozenList(ids);
    };

    /**
     * 批量增加 - 设置【id列表】
     *
     * @param {Array} ids - id数组
     */
    this.setFrozenList = function (ids) {
        this.enableStateChanged();
        return this._filterImpl.setFrozenList(ids);
    };

    /**
     * 按条件冻结构件
     *
     * @param {Array} conditions    - 多个条件对象数组，多个条件取交集
     *                                  [{"categoryId":-2001340},{"specialty":"AR"},{"categoryId":-2321500,"levelName":"F03"}]
     */
    this.setFrozenConditions = function(conditions) {
        this.enableStateChanged();
        this._filterImpl.setFrozenConditions(conditions);
    };

    /**
     * 获得冻结状态的条件
     *
     */
    this.getFrozenConditions = function() {
        return this._filterImpl.getFrozenConditions();
    };

    /**
     * 清除冻结状态的条件
     *
     */
    this.clearFrozenConditions = function() {
        this.enableStateChanged();
        this._filterImpl.clearFrozenConditions();
    };

    /**
     * 清除冻结状态的所有设置：条件和id列表
     *
     */
    this.clearFrozen = function() {
        this.enableStateChanged();
        this.clearFrozenList();
        this.clearFrozenConditions();
    };

    // ---------------- ID 过滤器  ---------------- //
    /**
     * 清除所有类型的ID过滤器数据 - 清除所有类型的【id列表】
     *
     */
    this.clearAllIdList = function () {
        this.enableStateChanged();
        return this._filterImpl.clearAllIdList();
    };

    /**
     * 清除指定类型的ID过滤器数据 - 清除【id列表】
     *
     */
    this.clearIdList = function (type) {
        this.enableStateChanged();
        return this._filterImpl.clearIdList(type);
    };

    /**
     * 批量增加 - 增加到【id列表】
     *
     * @param {Number} type - 类型
     *                          {
     *                              FILE_VISIBLE: 0,
     *                              FILE_HIDDEN: 1,
     *                              VISIBLE: 2,
     *                              HIDDEN: 3,
     *                              TRANSLUCENT: 4,
     *                              TRANSLUCENT_OTHERS: 5
     *                           }
     * @param {Array} ids - id数组
     */
    this.addToIdList = function (type, ids) {
        this.enableStateChanged();
        return this._filterImpl.addToIdList(type, ids);
    };

    /**
     * 批量删除 - 从【id列表】中移除ids
     *
     * @param {Number} type - 类型
     * @param {Array} ids - id数组
     */
    this.removeFromIdList = function (type, ids) {
        this.enableStateChanged();
        return this._filterImpl.removeFromIdList(type, ids);
    };

    /**
     * 批量增加 - 设置【id列表】
     *
     * @param {Number} type - 类型
     * @param {Array} ids - id数组
     */
    this.setIdList = function (type, ids) {
        this.enableStateChanged();
        return this._filterImpl.setIdList(type, ids);
    };

    // ----------------  材质替换 --------------------------- //

    /**
     * 清除所有的材质更改 - 清除所有类型的【替换材质的构件id列表】
     *
     */
    this.clearAllOverrideList = function () {
        objectInfoManager.clearMaterial();
    };

    /**
     * 清除某个分组的材质更改 - 清除【替换材质的构件id列表】
     *
     * @param {String} name - 分组名
     */
    this.clearOverrideList = function (name) {
        this.enableStateChanged();
        return this._filterImpl.clearOverrideList(name);
    };

    /**
     * 批量更改材质 - 增加到【替换材质的构件id列表】
     *      data = {name1 : {id1 : materialName1, id2 : materialName1,  ... }, name2 : {id1 : materialName2, id2 : materialName2,  ... }, ...}
     *
     * @param {String} name - 分组名
     * @param {Array} ids - 构件id数组
     * @param {String} materialName - 材质名
     */
    this.addToOverrideList = function (name, ids, materialName) {
        this.enableStateChanged();
        return this._filterImpl.addToOverrideList(name, ids, materialName);
    };

    /**
     * 批量清除材质更改 - 从【替换材质的构件id列表】移除ids
     *
     * @param {String} name - 分组名
     * @param {Array} ids - 构件id数组
     */
    this.removeFromOverrideList = function (name, ids) {
        this.enableStateChanged();
        return this._filterImpl.removeFromOverrideList(name, ids);
    };

    /**
     * 批量更改材质 - 设置到名为name的【替换材质的构件id列表】
     *
     * @param {String} name - 分组名
     * @param {Array} ids - 构件id数组
     * @param {String} materialName - 材质名
     */
    this.setOverrideList = function (name, ids, materialName) {
        this.enableStateChanged();
        return this._filterImpl.setOverrideList(name, ids, materialName);
    };
    
    /**
     * 批量更改材质 - 增加到【替换材质的构件id列表】
     *     data = {name1 : {id1 : color1, id2 : color1,  ... }, name2 : {id1 : color2, id2 : color2,  ... }, ...}
     *
     * @param {String} name - 分组名
     * @param {Array} ids - 构件id数组
     * @param {Object} color - 十六进制颜色 + 透明度 ({color: 0x123456, opacity: 0.1})
     */
    this.addToOverrideListByColor = function (ids, color) {
        var material =null;
        if(color){
            var materialName = this._filterImpl.getMaterialNameByColor(color);
            material = this._filterImpl.getMaterialByName(materialName);
        }
        var overrideFA = new CLOUD.OverrideIdsFA(true,material);
        overrideFA.ids = ids;
        this.pushBack(overrideFA);
    };
    this.addToOverrideListByConditions = function (conditions, color) {
        var material =null;
        if(color){
            var materialName = this._filterImpl.getMaterialNameByColor(color);
            material = this._filterImpl.getMaterialByName(materialName);
        }
        var overrideFA = new CLOUD.OverrideConditionFA(true,material);
        overrideFA.conditions = conditions;
        this.pushBack(overrideFA);
    };
    /**
     * 批量更改材质 - 设置【替换材质的构件id列表】
     *
     * @param {String} name - 分组名
     * @param {Array} ids - 构件id数组
     * @param {Object} color - 十六进制颜色 + 透明度 ({color: 0x123456, opacity: 0.1})
     */
    this.setOverrideListByColor = function (name, ids, color) {
        
        for(var i=0;i<ids.length;i++){
            var materialName = this._filterImpl.getMaterialNameByColor(color);
            var material = this._filterImpl.getMaterialByName(materialName);
            objectInfoManager.setMaterial(ids[i],material);
        }
    };

    // ------------------------------------------- //

    /**
     * 清除所有的自定义过滤器数据 - 清除所有的【自定义构件列表】
     *
     */
    this.clearAllUserList = function () {
        this.enableStateChanged();
        return this._filterImpl.clearAllUserList();
    };

    /**
     * 清除指定类型的自定义过滤器数据 - 清除【自定义构件列表】
     *
     * @param {Number} type - 类型标识 ({ HIDDEN_DATA: 0, OVERRIDE_DATA: 1, WITH_BOARDLINE: 2 })
     */
    this.clearUserListByType = function (type) {
        this.enableStateChanged();
        return this._filterImpl.clearUserListByType(type);
    };

    /**
     * 批量清除 - 清除组名name的【自定义构件列表】
     *
     * @param {Number} type - 类型标识 ({ HIDDEN_DATA: 0, OVERRIDE_DATA: 1, WITH_BOARDLINE: 2 })
     * @param {String} name - 分组名
     */
    this.clearUserList = function (type, name) {
        this.enableStateChanged();
        return this._filterImpl.clearUserList(type, name);
    };

    /**
     * 批量增加 - 增加到【自定义构件列表】
     *
     * @param {Number} type - 类型标识 ({ HIDDEN_DATA: 0, OVERRIDE_DATA: 1, WITH_BOARDLINE: 2 })
     * @param {String} name - 分组名
     *   eg:
     *     若 userData = { categoryId: "-2000181", classCode: "-1", plan: "-1", sceneId: "c338aae5-d92d-42c2-b092-ccf9ab0a9d07"} ,
     *     则 name可以为 ["categoryId" , "classCode" , "plan" , "sceneId" , "classCode"] 之一。
     * @param {Array} keys - 自定义数据值集合, 每个key对应一个userData对象的属性对应的数据值。
     *   eg：
     *     若 userData = { categoryId: "-2000181", classCode: "-1", plan: "-1"}，
     *     则 keys = ["-2000181", "-2000182"]
     * @param {Object} [value] - 可选，keys对应的值。
     *                            当type为HIDDEN_DATA时，可以忽略该值；
     *                            当type为OVERRIDE_DATA时，
     *                            1) 指定材质颜色 value = {color: 0x123456, opacity: 0.1}
     *                            2) 指定材质名 value = {material: 'lightBlue'}
     *                            3) 指定材质名 value = 'lightBlue'
     */
    this.addToUserList = function (type, name, keys, value) {
        this.enableStateChanged();
        return this._filterImpl.addToUserList(type, name, keys, value);
    };

    /**
     * 批量删除 - 从【自定义构件列表】中移除数据
     *
     * @param {Number} type - 类型标识
     * @param {String} name - 分组名
     * @param {Array} keys - 自定义数据值集合, 每个key对应一个userData对象的属性值
     */
    this.removeFromUserList = function (type, name, keys) {
        this.enableStateChanged();
        this._filterImpl.removeFromUserList(type, name, keys);
    };

    /**
     * 批量增加 - 设置【自定义构件列表】,参数详情见 addToUserList
     *
     * @param {Number} type - 类型标识
     * @param {String} name - 分组名
     * @param {Array} keys - 自定义数据值集合, 每个key对应一个userData对象的属性对应的数据值。
     * @param {Object} [value] - 可选，keys对应的值。
     */
    this.setUserList = function (type, name, keys, value) {
        this.enableStateChanged();
        this._filterImpl.setUserList(type, name, keys, value);
    };

    // ---------- isolate ---------- //

    /**
     * 是否处于隔离状态
     * 构件被选中，构件被隔离都表示处于隔离状态
     *
     */
    this.isIsolate = function () {

        var objectMap = objectInfoManager.getObjectsMap();
        for(var id in objectMap){
            var isIsolate = objectInfoManager.isIsolateHide(id);
            isIsolate = isIsolate|objectInfoManager.isIsolateTransparent(id);
            if(isIsolate)
                return true;
        }
        return false;
    };

    /**
     * 是否处于过滤状态
     *
     */
    this.isFiltering = function () {
        var hasActions = this.filterActionList.length>0;
        return this.isIsolate()||hasActions;

    };

    /**
     * 设置隔离材质
     *
     * @param {Object} params    - 材质参数
     *        params = {color: 0x888888, opacity: 0.1, transparent: true, side: THREE.DoubleSide}
     */
    this.setIsolateMaterial = function (params) {
        this.enableStateChanged();
        this._filterImpl.setIsolateMaterial(params);
    };

    /**
     * 获得隔离材质
     *
     */
    this.getIsolateMaterial = function () {
        return this._filterImpl.getIsolateMaterial();
    };

    /**
     * 重置隔离材质
     *
     */
    this.resetIsolateMaterial = function () {
        this.enableStateChanged();
        this._filterImpl.resetIsolateMaterial();
    };

    /**
     * 清除所有 - 清除所有状态的【隔离列表】
     *
     */
    this.clearAllIsolateList = function () {
        objectInfoManager.clearIsolates();
    };

    /**
     * 清除指定状态 - 清除某个状态的【隔离列表】
     *
     * @param {Number} state - 隔离状态
     */
    this.clearIsolation = function () {
        objectInfoManager.clearIsolates();
        _stateChanged = true;
    };

    /**
     * 批量增加 - 增加到【隔离列表】
     * @param {Number} state - 隔离状态
     *              {HIDDEN: 0,  HIDDEN_OTHERS: 1, TRANSLUCENT: 2, TRANSLUCENT_OTHERS: 3}
     * @param {Array} ids - 构件id数组
     */
    this.addToIsolateList = function (ids,state) {
        var isHide = (state=="HideOthers");
        var isolateFA = new CLOUD.IsolateIdsFA(isHide); 
        isolateFA.ids=ids;
        this.pushBack(isolateFA);
    };

    /**
     * 批量删除 - 【隔离构件id列表】中移除指定的ids
     *
     * @param {Number} state - 隔离状态
     * @param {Array} ids - 构件id数组
     */
    this.removeFromIsolateList = function (state, ids) {
        this.enableStateChanged();
        this._filterImpl.removeFromIsolateList(state, ids);
    };

    /**
     * 批量增加 - 设置【隔离列表】, 参数详情见 addToIsolateList
     *
     * @param {Number} state - 隔离状态
     * @param {Array} ids - 构件id数组
     */
    this.setIsolateList = function (ids,isHide) {

        var isolateFA = new CLOUD.IsolateIdsFA(isHide); 
        isolateFA.ids=ids;
        this.pushBack(isolateFA);
    };

    /**
     * 从【隔离构件id列表】中移除选中的构件集
     *
     */
    this.removeFromIsolateList = function (state, ids) {
        this.enableStateChanged();
        this._filterImpl.removeFromIsolateList(state, ids);
    };

    /**
     * 根据数据设置隔离条件
     *
     * @param {Object} data - 条件数据
     */
    //this._setIsolateConditionsByData = function (data) {
    //    this._filterImpl._setIsolateConditionsByData(data);
    //};

    /**
     * 按条件隔离构件
     *
     * @param {Array} conditions    - 多个条件对象数组，单个数组取交集，多个数组取并集
     *                                  [{"categoryId":-2001340},{"specialty":"AR"},{"categoryId":-2321500,"levelName":"F03"}]
     * @param {Number} state        - 类型标识  ({HIDDEN: 0, HIDDEN_OTHERS: 1, TRANSLUCENT: 2, TRANSLUCENT_OTHERS: 3})
     */
    this.setIsolateConditions = function (conditions,state) {
        var isIsolateHide = (state==CLOUD.EnumIsolateState.HIDDEN_OTHERS);
        var isolateFA = new CLOUD.IsolateConditionFA(isIsolateHide); 
        isolateFA.conditions=conditions;
        this.pushBack(isolateFA);
    };

    /**
     * 获得指定状态的隔离条件
     *
     * @param {Number} state - 类型标识  ({HIDDEN: 0, HIDDEN_OTHERS: 1, TRANSLUCENT: 2, TRANSLUCENT_OTHERS: 3})
     */
    this.getIsolateConditions = function (state) {
        return this._filterImpl.getIsolateConditions(state);
    };

    /**
     * 清除某个状态的隔离条件
     *
     */
    this.clearIsolateConditions = function (state) {
        this.enableStateChanged();
        this._filterImpl.clearIsolateConditions(state);
    };

    /**
     * 清除所有状态的隔离条件
     *
     */
    this.clearAllIsolateConditions = function () {
        this.enableStateChanged();
        this._filterImpl.clearAllIsolateConditions();
    };

    // ------------------- Conditions --------------------------- //

    /**
     * 按条件过滤
     *
     * @param {Number} type         - 类型标识  ({ HIDDEN_OTHERS: 0, TRANSLUCENT: 1, OVERRIDE: 2 })
     * @param {Array} conditions    - 多个条件对象数组，单个数组取交集，多个数组取并集
     *                                 如果type为OVERRIDE，则数据格式：
     *                                 data = [{condition:{levelName:'xxx'}, material: 'xxx'}, {condition:{levelName:'xxx', categoryId: 'xxx'}, material:'xxx'}]
     *                                 data = [{condition:{levelName:'xxx'}, color: {color: 0x123456, opacity: 0.1}}, {condition:{levelName:'xxx', categoryId: 'xxx'}, color: {color: 0x123456, opacity: 0.1}}]
     *                                 否则，数据格式：
     *                                 data = [{"categoryId":-2001340},{"specialty":"AR"},{"categoryId":-2321500,"levelName":"F03"}]
     *
     *                                 注意：type为OVERRIDE，则数据格式为下面格式更为合理
     *                                 data = {conditions:[{levelName:'xxx'},{levelName:'xxx', categoryId: 'xxx'}, ...], material:'xxx'}
     *                                 data = {conditions:[{levelName:'xxx'},{levelName:'xxx', categoryId: 'xxx'}, ...], color:{color: 0x123456, opacity: 0.1}}
     */
    this.setConditions = function (type, conditions) {
        if(type==0){
            objectInfoManager.hideAll();
            var showFA = new CLOUD.VisibleConditionFA(true,true); 
            showFA.conditions=conditions;
            this.pushBack(showFA);
        }
    };
     
    this.getConditions = function (type) {
        return this._filterImpl.getConditions(type);
    };

    /**
     * 清除指定类型的条件
     *
     * @param {Number} type - 类型标识  ({ HIDDEN_OTHERS: 0, TRANSLUCENT: 1, OVERRIDE: 2 })
     */
    this.clearConditions = function (type) {
        this.enableStateChanged();
        this._filterImpl.clearConditions(type);
    };

    /**
     * 获得所有类型的条件
     *
     */
    //this.getAllConditions = function () {
    //    return _conditions;
    //};

    /**
     * 清除所有类型的条件
     *
     */
    this.clearAllConditions = function () {
        this.enableStateChanged();
        this._filterImpl.clearAllConditions();
    };

    /**
     * 根据数据设置条件
     *
     * @param {Object} data - 条件数据
     */
    //this._setConditionsByData = function (data) {
    //    _conditions = data;
    //};

    // ---------- Override scene ---------- //

    /**
     * 场景半透明
     *
     */
    this.makeSceneTranslucent = function () {
        this.enableStateChanged();
        this._filterImpl.makeSceneTranslucent();
    };

    /**
     * 取消场景半透明
     *
     */
    this.cancelSceneTranslucent = function () {
        this.enableStateChanged();
        this._filterImpl.cancelSceneTranslucent();
    };

    /**
     * 场景隐藏
     *
     */
    this.hideScene = function () {
        this.enableStateChanged();
        this._filterImpl.hideScene();
    };

    /**
     * 场景显示
     *
     */
    this.showScene = function () {
        this.enableStateChanged();
        this._filterImpl.showScene();
    };

    /**
     * 设置场景状态
     *
     */
    this.setSceneState = function (state) {
        this.enableStateChanged();
        this._filterImpl.setSceneState(state);
    };

    /**
     * 是获得场景状态
     *
     * @return {Number} 场景状态
     */
    this.getSceneState = function () {
        return this._filterImpl.getSceneState();
    };

    /**
     * 取消隐藏状态
     *
     */
    this.cancelHidden = function () {
        this.enableStateChanged();
        this._filterImpl.cancelHidden();
    };

    /**
     * 取消半透明状态
     *
     */
    this.cancelTranslucent = function () {
        this.enableStateChanged();
        this._filterImpl.cancelTranslucent();
    };

    // ------------------------------------------ //

    /**
     *  隐藏【指定的构件】
     *
     * @param {Array} ids - 构件 id 集合
     */
    this.hideByIds = function (ids) {
        var visibleFA = new CLOUD.VisibleIdsFA(true,false);
        visibleFA.ids=ids;
        this.pushBack(visibleFA);         
    };
    this.hideByConditions = function(conditions){
        var visibleFA = new CLOUD.VisibleConditionFA(true,false);
        visibleFA.conditions = conditions;
        this.pushBack(visibleFA);
    };
    this.hideOthersByConditions = function(conditions){
        var visibleFA = new CLOUD.VisibleConditionFA(false,false);
        visibleFA.conditions = conditions;
        this.pushBack(visibleFA);
    };
    /**
     * 仅仅显示【指定的构件】
     *
     * @param {Array} ids - 构件 id 集合
     */
    this.showByIds = function (ids) {
        var visibleFA = new CLOUD.VisibleIdsFA(true,true);
        visibleFA.ids=ids;
        this.pushBack(visibleFA);         
    };
    this.showByConditions = function(conditions){
        var visibleFA = new CLOUD.VisibleConditionFA(true,true);
        visibleFA.conditions=conditions;
        this.pushBack(visibleFA);
    };
    /**
     * 【指定的构件】 半透明
     *
     * @param {Array} ids - 构件 id 集合
     */
    this.makeTranslucentByIds = function (ids) {
        var transparentFA = new CLOUD.TransparentIdsFA(true,false);
        transparentFA.ids=ids;
        this.pushBack(transparentFA);   
    };
    this.makeTranslucentByConditions = function(conditions){
        var transparentFA = new CLOUD.TransparentConditionFA(true,false);
        transparentFA.conditions=conditions;
        this.pushBack(transparentFA);   
    };
    this.opaqueByIds = function(ids){
        var transparentFA = new CLOUD.TransparentIdsFA(true,true);
        transparentFA.ids=ids;
        this.pushBack(transparentFA);   
    };
    this.opaqueByConditions = function(conditions){
        var transparentFA = new CLOUD.TransparentConditionFA(true,true);
        transparentFA.conditions=conditions;
        this.pushBack(transparentFA);
    };
    /**
     * 【指定的构件】不透明
     *
     * @param {Array} ids - 构件 id 集合
     */
    this.makeTranslucentOthersByIds = function (ids) {
        var transparentFA = new CLOUD.TransparentIdsFA(false,false);
        transparentFA.ids=ids;
        this.pushBack(transparentFA);   
    };
    //取消半透明
    this.opaqueAll = function(){
        var opaqueFA = new CLOUD.TransparentIdsFA(false,true);
        opaqueFA.ids=[];
        this.pushBack(opaqueFA);          
        //objectInfoManager.clearTransparentByIsolate();
    };
    /**
     *  获得过滤类型
     *
     * @returns {Object} 过滤类型
     */
    this.getFilterType = function () {
        return this._filterImpl.getFilterType();
    }
};
