var THREE = require('three');
/**
 * @require /libsH5/js/libs/three.min.js
 */

/**
 * @namespace CLOUD
 * @property {string}  Version                - 版本
 * @require /libsH5/js/libs/three.min.js
 */

"use strict";

var CLOUD = CLOUD || {};
CLOUD.Version = "1.0.0.20180828";

/**
 * @namespace CLOUD.GlobalData
 * @property {number}  SceneSize                - 场景大小
 * @property {string}  TextureResRoot           - 纹理资源路径
 * @property {boolean}  EnableTextureMapping    - 是否启用纹理贴图
 * @property {object}  SelectionColor           - 默认构件选中颜色
 * @property {boolean}  DisableAntialias        - 是否禁用反走样
 * @property {boolean}  EnableDemolishByDClick  - 是否允许双击半透明
 * @property {boolean}  UseMpkWorker            - 是否使用Worker
 * @property {string}  MpkWorkerUrl             - Worker导入库地址
 * @property {string}  ZipResourcePostfix       - 数据资源文件后缀
 * @property {boolean}  UseLayerData            - 是否使用分层数据
 * @property {boolean}  IncrementRender         - 是否开启增量绘制
 * @property {number}  LimitFrameTime           - 每帧允许的最大绘制时间
 * @property {number}  maxObjectNumInPool       - 对象池大小
 * @property {number}  maxDrawCacheNum          - 绘制列表最大缓存数目，大于该数目，会回收缓存资源
 * @property {number}  OctantDepth              - 八叉树深度
 * @property {number}  MaximumDepth             - 八叉树最大深度
 * @property {number}  ConcurrencyRequestCount  - 最大请求数 (HTTP, web worker, etc. )
 * @property {boolean}  ShowOctant              - 是否绘制八叉树节点
 * @property {boolean}  DisableOctant           - 是否禁止八叉树裁剪数据
 * @property {boolean}  DirectionalLight        - 是否使用平行光源
 * @property {boolean}  Hover                   - 是否启用hover
 * @property {boolean}  ReverseWheelDirection   - 是否反转鼠标滚轮方向
 * @property {number}  MovementSpeedRate        - 相机移动速度倍率
 * @property {boolean}  DEBUG                   - 是否允许调试 (输出日志信息等)
 * @property {boolean}  WalkingWithGravity      - 是否开启重力漫游
 */
CLOUD.GlobalData = {
    SceneSize: 1000,

    TextureResRoot: 'images/',

    EnableTextureMapping: false,
    EnableTextureLoading: true,//是否可以加载贴图
    MaxTexturePixels: 180000,//单位是kpt(即*1024像素)

    // SelectionColor: {color: 0x003BBD, side: THREE.DoubleSide/*, opacity: 0.5, transparent: true*/},

    DisableAntialias: false,
    EnableDemolishByDClick: false,
    IsMobile: false,

    UseMpkWorker: false,
    MpkWorkerUrl: "../libs/mpkWorker.min.js",

    ZipResourcePostfix: ".gz",
    UseLayerData: false,

    Instance: true,

    UseBatchRendering: true, // 外部配置
    BatchMergeEnabled: false, // 内部使用
    MergedTriangleNumberThreshold: 20000000, // 默认2千万 外部配置
    MaxMergedTriangleNumber: 20000000, // 2千万 内部配

    IncrementRender: true,
    EnableRenderPass: false,  // render the scene with multiple render pass
    LimitFrameTime: 250,

    maxObjectNumInPool: 60000,
    maxDrawCacheNum: 40000,

    OctantDepth: 15,
    MaximumDepth: 0,
    ConcurrencyRequestCount: 8, // Limitation of concurrency request (HTTP, web worker, etc. ) count
    ShowOctant: false,
    EnableOctant: true,

    // DirectionalLight: false,
    LightPreset: 1,
    IBL: false,
    ToneMapping: 1, // 0-4
    LightIntensityFactor: 1.5,

    Hover: true,

    OcclusionTranslucentEnabled: false,
    OcclusionOpacity: 0.5,
    OcclusionDistanceToCamera: 1000, // mm

    DrawingStyle: 0,
    InitWireframeData: false,
    SSAO: false,

    MeasureHighlightPlane: false,

    WalkingWithGravity: false,

    DEBUG: false
};

/**
 * 视角枚举
 * @readonly
 * @enum {number}
 */
CLOUD.EnumStandardView = {
    ISO: 0,
    Top: 1,
    Bottom: 2,
    Front: 3,
    Back: 4,
    Right: 5,
    Left: 6,
    SouthEast: 7,
    SouthWest: 8,
    NorthEast: 9,
    NorthWest: 10,
    BottomFront: 11,
    BottomBack: 12,
    BottomRight: 13,
    BottomLeft: 14,
    BottomSouthEast: 15,
    BottomSouthWest: 16,
    BottomNorthEast: 17,
    BottomNorthWest: 18,
    RoofFront: 19,
    RoofBack: 20,
    RoofRight: 21,
    RoofLeft: 22,
    RoofSouthEast: 23,
    RoofSouthWest: 24,
    RoofNorthEast: 25,
    RoofNorthWest: 26,
    TopTurnRight: 27,
    TopTurnBack: 28,
    TopTurnLeft: 29,
    BottomTurnRight: 30,
    BottomTurnBack: 31,
    BottomTurnLeft: 32,
    FrontTurnRight: 33,
    FrontTurnTop: 34,
    FrontTurnLeft: 35,
    RightTurnBack: 36,
    RightTurnTop: 37,
    RightTurnFront: 38,
    BackTurnRight: 39,
    BackTurnTop: 40,
    BackTurnLeft: 41,
    LeftTurnFront: 42,
    LeftTurnTop: 43,
    LeftTurnBack: 44
};

CLOUD.CAMERATYPE = {
    ORTHOGRAPHIC: 0,
    PERSPECTIVE: 1
};

/**
 * 构件选中事件枚举
 * @readonly
 * @enum {number}
 */
CLOUD.OPSELECTIONTYPE = {
    Clear: 0,
    Add: 1,
    Remove: 2
};

/**
 * Type of pickable object
 * @type {{Geometry: number, Marker3d: number, IllegalType: number}}
 */
CLOUD.PICKABLETYPE = {
    Geometry: 1,
    Marker3d: 2,
    UnPickable: 0  // not a pickable object
};

/**
 * 事件枚举
 * @readonly
 * @enum {number}
 */
CLOUD.EVENTS = {

    ON_LOAD_START: 0,
    ON_LOAD_PROGRESS: 1,
    ON_LOAD_COMPLETE: 2,
    ON_LOAD_EMPTY_SCENE: 3,
    ON_LOAD_INVALID_SCENE: 5,

    ON_EDITOR_ENTER: 40,
    ON_EDITOR_EXIST: 41,
    ON_EDITOR_BEGIN: 42,
    ON_EDITOR_END: 43,
    // event sent by mouse operation with rectangle area, for example, rectangle selection, rectangle zoom,
    // when move move to change the rectangle area changed, send the screen information about the rectangel
    // the returned event object contains following attributes:
    //        visible: if the rectangle is visible, when the mouse operation finished, it will be invisible
    //        dir: direction when draw the rectangle; true if drawn from left to right, otherwise false
    //        left: screen position of the left
    //        top:  screen position of the top
    //        width: width of the rectangle area
    //        height: height of the rectangle area
    ON_EDITOR_UPDATEUI: 44,

    // the returned event object contains one attribute:
    //           selectionList - Array of current selected object Ids
    ON_SELECTION_CHANGED: 100,

    // triggered when single click mouse no matter if object is selected
    // the returned event object contains two attributes:
    //           event: the dom event object
    //           doubleClick: flag if this is double click event, actually, this can be got from
    //                        event object
    //           canvasPos: canvas position of the mouse click, for example, {x: 100, y: 200}
    //           intersectInfo: contains five attributes:
    //                 selectedObjectId : picked object id, null if no object picked
    //                                    the object is picked no matter if it is selectable or unselectable
    //                 objectType: type of picked object, see CLOUD.PICKABLETYPE
    //                 selectable: flag that picked object is selectable
    //                 modelId: model Id of the selected object
    //                 point: the pick point on the selected object
    //                 worldPosition: world position of the pick point on the selected object
    //                 worldBoundingBox: bounding box of the selected object in world space
    ON_CLICK_PICK: 101,

    // triggered when you enable hover and hover the object
    // the returned event object same as click pick
    ON_HOVER_PICK: 102,

    // triggered when you enable measure and pick or hover the object
    // the returned event object contains following attributes:
    //          measureType: 0 for hover, 1 for mouse down, 2 for mouse up, 3 for mouse move
    //          pickPoint: the world position for pick
    ON_MEASURE_PICK: 103,
    // one or several selected 'userId' does exist
    ON_SELECTION_FAILED: 104,

    ON_VERSION_NO_MATCH: 200,

    ON_VIEWER_RESTORED: 300,
};


CLOUD.LOADERROREVENTS = {

    LOAD_ERROR: 1000,

    LOAD_SCENE_ERROR: 1001,
    LOAD_MATERIAL_ERROR: 1002,
    LOAD_SYMBOL_ERROR: 1003,
    LOAD_OCTREEINNER_ERROR: 1004,
    LOAD_OCTREEOUTER_ERROR: 1005,
    LOAD_USERID_ERROR: 1006,
    LOAD_USERDATA_ERROR: 1007,
    LOAD_CAMERA_ERROR: 1008,
    LOAD_TEXTURE_ERROR: 1009,
    LOAD_MPK_ERROR: 1010,
    LOAD_IBLCONFIG_ERROR: 1011

};

    /**
     * 渲染事件类型枚举
     * @readonly
     * @enum {number}
     */
    CLOUD.EnumRenderType = {
        RENDER: 0,
        RENDER_FINISHED: 1,
        RESIZE: 2
    };

CLOUD.PrimitiveCount = {
    vertexCount: 0,
    triangleCount: 0
};

/**
 * 构件绕点旋转模式
 * @readonly
 * @enum {Number}
 */
CLOUD.RotatePivotMode = {
    /** 绕鼠标按下位置对应的构件旋转 */
    MOUSEPOINT: 0,
    /** 绕选中的构件旋转 */
    SELECTION: 1,
    /** 绕场景中心旋转 */
    CENTER: 2,
    /** 绕相机旋转 */
    CAMERA: 3
};

/**
 * 场景浏览模式
 * @readonly
 * @enum {string}
 */
CLOUD.EditorMode = {
    /** 自由旋转模式 */
    ORBIT: 'orbit',
    /** 单选模式 */
    PICK: 'pick',
    /** 平移模式 */
    PAN: 'pan',
    /** 缩放模式 */
    ZOOM: 'zoom',
    /** 飞行模式 */
    FLY: 'fly',
    /** 行走模式 */
    WALK: 'walk'
};

CLOUD.EditToolMode = {
    /** 框选模式 */
    PICK_BY_RECT: 'pickByRect',
    /** 框选缩放模式 */
    ZOOM_BY_RECT: 'zoomByRect',
    /** 切面模式 */
    CLIP_BY_BOX: 'clipByBox',
    /** 切面补面模式 */
    CLIP_FILL: 'fillClip',
    /** 测量模式 */
    PICK_BY_MEASURE: 'pickByMeasure'
};

/**
 * 相机移动方向
 * @readonly
 * @enum {number}
 */
CLOUD.MoveDirection = {
    NONE: 0,
    UP: 0x0001,
    DOWN: 0x0002,
    LEFT: 0x0004,
    RIGHT: 0x0008,
    FORWARD: 0x0010,
    BACK: 0x0020
};

CLOUD.DrawingStyle = {
    SHADING: 0,
    BOARDLINE: 1,
    SHADINGWITHLINE: 2
};

/**
 * 实例对象状态
 * @readonly
 * @enum {number}
 */
CLOUD.EnumInstanceState = {
    HIDDEN: -1.0,
    NONE: 0.0,
    HOVER: 1.0,
    SELECTED: 2.0,
    OVERRIDED: 3.0,
    TRANSPARENT: 4.0
};

/**
 * 通用函数
 *
 * @namespace CLOUD.Utils
 */


module.exports = CLOUD;
