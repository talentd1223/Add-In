
CLOUD.MaterialUtil = {

    DefaultMaterial: new THREE.MeshPhongMaterial({color: 0x0000ff, side: THREE.DoubleSide}),

    createInstancePhongMaterial: function (matObj) {
        // 复制一份，不影响其他模型的使用
        // 不复制一份，有模型绘制不出
        var material = matObj.clone();
        // material.type = "phong_instanced";
        // material.uniforms = CLOUD.ShaderMaterial.ShaderLib.phong_cust_clip.uniforms;
        // material.vertexShader = "#define USE_CUST_INSTANCED \n" + CLOUD.ShaderMaterial.ShaderLib.phong_cust_clip.vertexShader;
        // material.fragmentShader = "#define USE_CUST_INSTANCED \n" + CLOUD.ShaderMaterial.ShaderLib.phong_cust_clip.fragmentShader;
        return material;
    },

    updateBasicMaterial: function (material, instanced) {

        // if (instanced) {
        //     material.vertexShader = "#define USE_CUST_INSTANCED \n" + CLOUD.ShaderMaterial.ShaderLib.base_cust_clip.vertexShader;
        //     material.fragmentShader = "#define USE_CUST_INSTANCED \n" + CLOUD.ShaderMaterial.ShaderLib.base_cust_clip.fragmentShader;
        // } else {
        //     material.vertexShader = CLOUD.ShaderMaterial.ShaderLib.base_cust_clip.vertexShader;
        //     material.fragmentShader = CLOUD.ShaderMaterial.ShaderLib.base_cust_clip.fragmentShader;
        // }

        material.needsUpdate = true;
    },

    setMatrixUniform: function(transform) {
        CLOUD.ShaderMaterial.ShaderLib.base_cust_clip.uniforms.transformMatrix.value = transform;
    },

    createPhongMaterial: function(params){
        // var material = new THREE.MeshPhongMaterial(obj);
        // // material.type = 'phong_cust_clip';
        // // material.uniforms = CLOUD.ShaderMaterial.ShaderLib.phong_cust_clip.uniforms;
        // // material.vertexShader = CLOUD.ShaderMaterial.ShaderLib.phong_cust_clip.vertexShader;
        // // material.fragmentShader = CLOUD.ShaderMaterial.ShaderLib.phong_cust_clip.fragmentShader;
        // return material;

        var material = new THREE.MeshPhongMaterial(params);
        material.type = 'FillFacePhong';
        material.uniforms = THREE.UniformsUtils.merge( [THREE.ShaderLib.fillFacePhong.uniforms]);
        material.vertexShader = THREE.ShaderLib.fillFacePhong.vertexShader;
        material.fragmentShader = THREE.ShaderLib.fillFacePhong.fragmentShader;
        material.side = THREE.DoubleSide;

        return material;
    },

    createStandardMaterial: function(params) {

        var material = new CLOUD.CloudStandardMaterial(params);
        return material;

    },

    createInstanceMaterial: function(params, useNormal) {

        var instanceMaterial = CLOUD.MaterialUtil.createStandardMaterial(params);
        instanceMaterial.defines["USE_INSTANCE"] = "";
        if (useNormal) {
            instanceMaterial.defines["USE_INSTANCE_NORMAL"] = "";
        }

        return instanceMaterial;

    },

    createNewStyleMaterial: function(params) {

        var material = new THREE.MeshStandardMaterial(params);
        material.type = 'NewStyle';
        material.uniforms = THREE.UniformsUtils.merge( [THREE.ShaderLib.standard.uniforms]);
        material.vertexShader = THREE.ShaderLib.newStyle.vertexShader;
        material.fragmentShader = THREE.ShaderLib.newStyle.fragmentShader;
        material.metalness = 0.0;
        return material;

    },

    createHighlightMaterial: function () {
        return this.createStandardMaterial(CLOUD.GlobalData.SelectionColor);
    },

    //TODO:ADD DIFFERENT MAP TYPES AND METAL MATERIAL PROPERTY
    getMaterialParameters: function(material) {

        var materialParameters = {};
        
        if (material.hasOwnProperty('color')) {
            materialParameters.color = material.color;
        }

        materialParameters.opacity = 1;
        materialParameters.transparent = false;
        if (material.hasOwnProperty('opacity')) {
            materialParameters.opacity = material.opacity;
            if (material.opacity < 1.0) {
                materialParameters.transparent = true;
            }
        }

        if (material.hasOwnProperty('side')) {
            materialParameters.side = material.side;
        }

        if (material.hasOwnProperty('emissive')) {
            materialParameters.emissive = material.emissive;
        }

        if (material.hasOwnProperty('specular')) {
            materialParameters.specular = material.specular;
        }

        if (material.hasOwnProperty('shininess')) {
            materialParameters.shininess = material.shininess;
        }

        if (material.hasOwnProperty('map')) {
            materialParameters.map = material.map;
        }
        if (material.hasOwnProperty('bumpMap')) {
            materialParameters.bumpMap = material.bumpMap;
        }
        //MeshStandardMaterial has no specularMap attribute in three.js
        if (material.hasOwnProperty('alphaMap')) {
            materialParameters.alphaMap = material.alphaMap;
        }
        if (material.hasOwnProperty('emissiveMap')) {
            materialParameters.emissiveMap = material.emissiveMap;
        }
        if (material.hasOwnProperty('envMap')) {
            materialParameters.envMap = material.envMap;
        }
        if (material.hasOwnProperty('envMapIntensity')) {
            materialParameters.envMapIntensity = material.envMapIntensity;
        }
        if (material.hasOwnProperty('roughness')) {
            materialParameters.roughness = material.roughness;
        }
        if (material.hasOwnProperty('metalness')) {
            materialParameters.metalness = material.metalness;
        }

        if (material.hasOwnProperty('originRoughness')) {
            materialParameters.originRoughness = material.originRoughness;
        }
        if (material.hasOwnProperty('originMetalness')) {
            materialParameters.originMetalness = material.originMetalness;
        }


        if (material.hasOwnProperty('iblProbe')) {
            materialParameters.iblProbe = material.iblProbe;
        }

        if(material.hasOwnProperty('shift'))
        {
            materialParameters.shift = material.shift;
        }

        return materialParameters;

    },

    nextHighestPowerOfTwo: function (x) {
        --x;

        for (var i = 1; i < 32; i <<= 1) {
            x = x | x >> i;
        }

        return x + 1;
    },

    ensurePowerOfTwo: function (image) {

        if (!THREE.Math.isPowerOfTwo(image.width) || !THREE.Math.isPowerOfTwo(image.height)) {
            var canvas = document.createElement("canvas");
            canvas.width = CLOUD.MaterialUtil.nextHighestPowerOfTwo(image.width);
            canvas.height = CLOUD.MaterialUtil.nextHighestPowerOfTwo(image.height);

            var ctx = canvas.getContext("2d");
            ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);
            return canvas;
        }

        return image;
    }
};