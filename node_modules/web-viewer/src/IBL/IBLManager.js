
CLOUD.IBLManager = function(viewer) {

	this.viewer = viewer;
	this.IBLConfig = null;

    this.isHDR = true;
    this.textureLoad = false;

	var IBLIndex = 0;
	var IBLName = null;

	//开启或者关闭IBL效果
	this.enableIBL = function (isEnable) {

        if (CLOUD.GlobalData.IBL === isEnable) {
            return;
        }

        CLOUD.GlobalData.IBL = isEnable;

        // fixed BIMFACE-144 bug
        // mark: 内部记录状态不合理！！！
        this.viewer.setRenderStateChanged(true);

        if (isEnable) {
        	if (IBLName != null) {
            	this.initIBLByName(IBLName);
        	}
        	else {
        		this.initIBLByIndex(IBLIndex);
        	}
        }
        else {
            this.viewer.modelManager.changeAllMaterials(false);
            this.removeSkyBox();
        }

    };

    //读取IBLConfig文件
	this.loadIBLConfig = function(url) {

		var scope = this;
		var viewer = this.viewer;
        var loader = new THREE.FileLoader();

        loader.load(url, function (text) {
            scope.IBLConfig = JSON.parse(text);
            if (CLOUD.GlobalData.IBL) {
                scope.initIBLByIndex(0);
            }
        }, undefined, function() {

            viewer.modelManager.dispatchEvent({type: CLOUD.LOADERROREVENTS.LOAD_ERROR, errorType: CLOUD.LOADERROREVENTS.LOAD_IBLCONFIG_ERROR, event: event});

        });

	};

	//在有IBLConfig文件的情况下，使用index来设置IBL
	this.initIBLByIndex = function (index) {

        if (!CLOUD.GlobalData.IBL) {
            return;
        }

        if (this.IBLConfig != null) {

            var keys = Object.keys(this.IBLConfig);
            if (keys.length > index) {

                var cfg = this.IBLConfig[keys[index]];
                this.loadIBLMaps(cfg.url, cfg.isHDR, true, cfg.uniforms);
                IBLIndex = index;
                IBLName = keys[index];

            }
            else {
                new Error("Index is out of range.");
            }

        }
        else {
            new Error("IBLConfig is not exist.");
        }

    };

    //在有IBLConfig文件的情况下，使用name来设置IBL
    this.initIBLByName = function(name) {

    	if (!CLOUD.GlobalData.IBL) {
            return;
        }

        if (this.IBLConfig != null) {

        	if (this.IBLConfig.hasOwnProperty(name)) {

        		var cfg = this.IBLConfig[name];
                this.loadIBLMaps(cfg.url, cfg.isHDR, true, cfg.uniforms);
                IBLName = name;

        	}
        	else {
        		new Error("Name is not exist.");
        	}

        }
        else {
            new Error("IBLConfig is not exist.");
        }

    };

    /**
	 * 通过url，来设置IBL
	 *
	 * @param {string} url - 需要读取的文件夹路径
	 * @param {bool} isHDR - 是否是HDR贴图
	 * @return {bool} skyBox - 读取时，是否打开skyBox
	 * @return {object} params - IBL效果参数
	 */
    this.loadIBLMaps = function(url, isHDR, skyBox, params) {

        if (!CLOUD.GlobalData.IBL) {
            return;
        }

        var scope = this;
        var viewer = this.viewer;
        var scene = viewer.getScene();
        scene.IBLMaps.loadMaps(url, isHDR, function (IBLMaps, isHDR) {

            viewer.modelManager.changeAllMaterials(true);
            viewer.modelManager.updateMaterials();
            for (var id in params) {
                if(id == "shift") continue;
                //会导致金属光泽强的在环境光照下与其他材质一样
                // TODO:instance也有环境光照的效果
                //if(id == "roughness") continue;
                //if(id == "metalness") continue;
                viewer.modelManager.updateMaterialsValue(id, params[id]);
            }

            if (skyBox) {
            	scope.addSkyBox(isHDR, params);
        	}

            scope.textureLoad = true;

            // fixed BIMFACE-144 bug
            // mark: 内部记录状态不合理！！！
            viewer.setRenderStateChanged(true);
            viewer.render();

        });

    };

    /**
	 * 添加天空盒（需要调用render才能显示效果）
	 *
	 * @param {bool} isHDR - 是否是HDR贴图
	 * @return {object} params - 效果参数
	 */
    this.addSkyBox = function (isHDR, params) {

        var isHDR = isHDR || this.isHDR;
        this.isHDR = isHDR;

        var cubeMesh = null;
        var scene = this.viewer.getScene();
        if (!scene.hasObjectGroup(CLOUD.ObjectGroupType.IBLCUBE)) {

            cubeMesh = new THREE.Mesh(
                new THREE.BoxBufferGeometry(2000.0, 2000.0, 2000.0),
                new THREE.ShaderMaterial({
                    uniforms: {
                        environmentMap: {value: scene.IBLMaps.environmentMap},
                        hdr: {value: isHDR},
                        shift: {value: 0.18},
                        A: {value: 0.27},
                        B: {value: 0.29},
                        C: {value: 0.052},
                        D: {value: 0.2},
                        E: {value: 0.0},
                        F: {value: 0.18},
                        scale: {value: 0.897105},
                    },
                    vertexShader: ImageBasedLighting.cube_vs,
                    fragmentShader: ImageBasedLighting.cube_fs,
                    side: THREE.BackSide,
                    depthTest: true,
                    depthWrite: true,
                    fog: false
                })
            );
            cubeMesh.frustumCulled = false;
            var group = scene.getOrCreateObjectGroup(CLOUD.ObjectGroupType.IBLCUBE, {priority: 10});
            group.add(cubeMesh);
        }
        else {
            var group = scene.getObjectGroup(CLOUD.ObjectGroupType.IBLCUBE);
            cubeMesh = group.children[0];
            cubeMesh.material.uniforms.environmentMap.value = scene.IBLMaps.environmentMap;
            cubeMesh.material.uniforms.hdr.value = isHDR;
        }

        if (params) {

            var material = cubeMesh.material;
            for (var id in params) {
                if (material.uniforms.hasOwnProperty(id)) {
                    material.uniforms[id].value = params[id];
                }
            }

        }

    };


    /**
	 * 移除天空盒（需要调用render才能显示效果）
	 *
	 */
    this.removeSkyBox = function () {

        var scene = this.viewer.getScene();
        if (scene.hasObjectGroup(CLOUD.ObjectGroupType.IBLCUBE)) {
            scene.removeObjectGroupByName(CLOUD.ObjectGroupType.IBLCUBE);
        }

    };

}
