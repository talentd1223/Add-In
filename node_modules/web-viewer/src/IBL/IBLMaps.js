
ImageBasedLighting.IBLMaps = function(url, isHDR, onSuccess) {

    this.environmentMap = null;
    this.irradianceMap = null;
    this.prefilterMap = null;
    this.brdfMap = null;

    if (url) {
        this.loadMaps(url, isHDR, onSuccess);
    }

};

ImageBasedLighting.IBLMaps.prototype.constructor = ImageBasedLighting.IBLMaps;

ImageBasedLighting.IBLMaps.prototype.loadMaps = function(url, isHDR, onSuccess) {

    var scope = this;

    var mapUrl = ["posx.hdr", "negx.hdr", "posy.hdr", "negy.hdr", "posz.hdr", "negz.hdr"];
    var envMapUrl = [];
    for (var i = 0; i < 6; ++i) {
        envMapUrl.push(url + "/EnvMap_" + mapUrl[i]);
    }

    var cubeTextureLoader = isHDR ? new THREE.HDRCubeTextureLoader() : new THREE.CubeTextureLoader();

    cubeTextureLoader.load(THREE.FloatType, envMapUrl, function (hdrCubeMap) {
        scope.environmentMap = hdrCubeMap;

        var irradianceMapUrl = [];
        for (var i = 0; i < 6; ++i) {
            irradianceMapUrl.push(url + "/IrradianceMap_" + mapUrl[i]);
        }

        cubeTextureLoader.load(THREE.FloatType, irradianceMapUrl, function (hdrCubeMap) {
            scope.irradianceMap = hdrCubeMap;

            var prefilterMapUrl = [];
            for (var i = 0; i < 6; ++i) {
                prefilterMapUrl.push(url + "/PrefilterMap_" + mapUrl[i]);
            }

            cubeTextureLoader.load(THREE.FloatType, prefilterMapUrl, function (hdrCubeMap) {
                scope.prefilterMap = hdrCubeMap;

                var textureLoader = isHDR ? new ImageBasedLighting.HDRTextureLoader() : new THREE.TextureLoader();
                var brdfUrl = isHDR ? url + "/brdf.hdr" : '/' + url + "/brdf.png";
                textureLoader.load(brdfUrl, function (texture) {
                    scope.brdfMap = texture;
                    onSuccess(scope, isHDR);
                });

            });
        });
    });

}