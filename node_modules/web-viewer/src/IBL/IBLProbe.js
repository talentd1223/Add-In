
ImageBasedLighting.IBLProbe = function(envMap, hammersleyUrl, onSuccess, irradianceResolution, prefilterResolution, brdfResolution, maxMipLevel) {

	this.environmentMap = envMap;

	this.hammersleyTable = null;
	this.irradianceMap = null;
	this.prefilterMap = null;
	this.brdfMap = null;

	this.hammersleyUrl = hammersleyUrl;

	this.irradianceResolution = irradianceResolution || 32;
	this.prefilterResolution = prefilterResolution || 128;
	this.brdfResolution = brdfResolution || 512;
	this.maxMipLevel = maxMipLevel || 1;

	this.isHDR = false;
	this.isComputed = false;

	this.onSuccess = onSuccess;

	this.loadHammersleyTable();

};

ImageBasedLighting.IBLProbe.prototype.constructor = ImageBasedLighting.IBLProbe;

ImageBasedLighting.IBLProbe.prototype.loadHammersleyTable = function() {

	var scope = this;

	var loader = new THREE.TextureLoader();
	loader.load(this.hammersleyUrl, function onSuccess(texture) {
		scope.hammersleyTable = texture;
		scope.initMap();
		if (scope.onSuccess) {
			scope.onSuccess();
		}
	});

};

ImageBasedLighting.IBLProbe.prototype.initMap = function() {
	this.irradianceMap = new ImageBasedLighting.IrradianceMap(this.environmentMap, this.irradianceResolution);
	this.prefilterMap = new ImageBasedLighting.PrefilterMap(this.environmentMap, this.hammersleyTable, this.prefilterResolution, this.maxMipLevel);
	this.brdfMap = new ImageBasedLighting.BRDFMap(this.hammersleyTable, this.brdfResolution);
};

ImageBasedLighting.IBLProbe.prototype.setEnvironmentMap = function(environmentMap) {
	this.environmentMap = environmentMap;

	this.irradianceMap.irradianceMaterial.uniforms.environmentMap.value = this.environmentMap;
	this.prefilterMap.prefilterMaterial.uniforms.environmentMap.value = this.environmentMap;
}

ImageBasedLighting.IBLProbe.prototype.computed = function(renderer) {

	this.irradianceMap.generateMap(renderer, this.isHDR);
	this.prefilterMap.generateMap(renderer, this.isHDR);
	this.brdfMap.generateMap(renderer);

	this.isComputed = true;

};