var newStyleVertex = [

    "#define PHYSICAL",
    "varying vec3 vViewPosition;",
    "#ifndef FLAT_SHADED",
        "varying vec3 vNormal;",
    "#endif"

].join('\n') +
CLOUD.IdTargetUtil.idVarOfVertexShader() + [

    "#include <common>",
    "#include <uv_pars_vertex>",
    "#include <uv2_pars_vertex>",
    "#include <displacementmap_pars_vertex>",
    "#include <color_pars_vertex>",
    "#include <fog_pars_vertex>",
    "#include <morphtarget_pars_vertex>",
    "#include <skinning_pars_vertex>",
    "#include <shadowmap_pars_vertex>",
    "#include <specularmap_pars_fragment>",
    "#include <logdepthbuf_pars_vertex>",
    "#include <clipping_planes_pars_vertex>",
    
    "void main() {",

        "#include <uv_vertex>",
        "#include <uv2_vertex>",
        "#include <color_vertex>",

        "#include <beginnormal_vertex>",
        "#include <morphnormal_vertex>",
        "#include <skinbase_vertex>",
        "#include <skinnormal_vertex>",
        "#include <defaultnormal_vertex>",

        "#ifndef FLAT_SHADED",
            "vNormal = normalize( transformedNormal );",
        "#endif",

        "#include <begin_vertex>",
        "#include <displacementmap_vertex>",
        "#include <morphtarget_vertex>",
        "#include <skinning_vertex>",
        "#include <project_vertex>",
        "#include <logdepthbuf_vertex>",
        "#include <clipping_planes_vertex>",

        "vViewPosition = - mvPosition.xyz;",

        "#include <worldpos_vertex>",
        "#include <shadowmap_vertex>",
        "#include <fog_vertex>"

].join('\n') +
CLOUD.IdTargetUtil.passIdInVertexShader() +
    "}";


var newStyleFragment = [

    "#define PHYSICAL",

    "uniform vec3 diffuse;",
    "uniform vec3 emissive;",
    "uniform float roughness;",
    "uniform float metalness;",
    "uniform float opacity;",

    "#ifndef STANDARD",
        "uniform float clearCoat;",
        "uniform float clearCoatRoughness;",
    "#endif",

        "varying vec3 vViewPosition;",

    "#ifndef FLAT_SHADED",
        "varying vec3 vNormal;",
    "#endif",

].join('\n') +
CLOUD.IdTargetUtil.idVarOfFragShader() + [

    "#include <common>",
    "#include <packing>",
    "#include <dithering_pars_fragment>",
    "#include <color_pars_fragment>",
    "#include <uv_pars_fragment>",
    "#include <uv2_pars_fragment>",
    "#include <map_pars_fragment>",
    "#include <alphamap_pars_fragment>",
    "#include <aomap_pars_fragment>",
    "#include <lightmap_pars_fragment>",
    "#include <emissivemap_pars_fragment>",
    "#include <envmap_pars_fragment>",
    "#include <fog_pars_fragment>",
    "#include <bsdfs>",
    "#include <cube_uv_reflection_fragment>",
    "#include <lights_pars>",
    "#include <lights_physical_pars_fragment>",
    "#include <shadowmap_pars_fragment>",
    "#include <bumpmap_pars_fragment>",
    "#include <normalmap_pars_fragment>",
    "#include <roughnessmap_pars_fragment>",
    "#include <metalnessmap_pars_fragment>",
    "#include <logdepthbuf_pars_fragment>",
    "#include <clipping_planes_pars_fragment>",

    "void main() {",

        "#include <clipping_planes_fragment>",

        "vec4 diffuseColor = vec4( diffuse, opacity );",
        "vec3 totalEmissiveRadiance = emissive;",

        "#include <logdepthbuf_fragment>",
        "#include <map_fragment>",
        "#include <color_fragment>",
        "#include <alphamap_fragment>",
        "#include <alphatest_fragment>",
        "#include <specularmap_fragment>",
        "#include <roughnessmap_fragment>",
        "#include <metalnessmap_fragment>",
        "#include <normal_flip>",
        "#include <normal_fragment>",
        "#include <emissivemap_fragment>",

		"const mat4 diffuseMatrix = mat4(-0.07425443828105927, -0.05652861297130585, 0.12247831374406815, 0.2297295778989792,",
        "                               -0.05652860924601555, 0.034799136221408844, -0.08437120914459229, -0.13896968960762024,",
        "                               0.12247832119464874, -0.08437121659517288, 0.021763987839221954, 0.12510454654693604,",
        "                               0.2297295778989792, -0.13896968960762024, 0.12510454654693604, 0.6190560460090637);",

        "const vec3 sunDir = vec3(-0.6632131338119507, 0.5486575961112976, -0.509041428565979);",
        "vec3 viewDir = normalize( vViewPosition );",

        "vec4 diffuseDir = diffuseMatrix * vec4(normal, 1.0);",
        "float diffuseTerm = dot(vec4(normal, 1.0), diffuseDir);",
        "float nv = max(dot(normal, -viewDir), 0.0);",
        "float vl = max(dot(viewDir, sunDir), 0.0);",
        "diffuseTerm = diffuseTerm + (nv * (1.0 - vl)) * 0.8;",

        "vec3 H = -normalize(sunDir + viewDir);",
        "float nh = max(dot(normal, H), 0.0);",
        "float specularTerm = pow(nh, 100.0);",
        "vec3 color = 1.05 * vec3(0.5, 0.497, 0.49) * (diffuse * diffuseTerm + vec3(specularTerm)) + diffuse * 0.5;",

        "vec3 outgoingLight = color + totalEmissiveRadiance;",
        "gl_FragColor = vec4( outgoingLight, diffuseColor.a );",
        
        "#include <tonemapping_fragment>",
        "#include <encodings_fragment>",
        "#include <fog_fragment>",
        "#include <premultiplied_alpha_fragment>",
        "#include <dithering_fragment>"

].join('\n') +
    CLOUD.IdTargetUtil.writeIdInFragShader() +
    "}";