CLOUD.CameraAnimator = function () {

    var _duration = 500;// 500毫秒
    var _frameTime = 13; // 周期性执行或调用函数之间的时间间隔，以毫秒计
    var _animation = new CLOUD.Animation();

    this.setDuration = function (duration) {
        _duration = duration;
    };

    this.setFrameTime = function (frameTime) {
        _frameTime = frameTime;
    };

    this.setStandardView = function (stdView, viewer, box, margin, callback) {
        var camera = viewer.camera;
        // 1. 记录动画开始参数
        var startTarget = camera.target.clone();
        var startDir = camera.getWorldDirection().clone();
        startDir.normalize();
        var startUp = new THREE.Vector3();
        startUp.copy(camera.realUp || camera.up);
        startUp.normalize();
        var startFocal = new THREE.Vector3(camera.position.clone().sub(startTarget).length(), 0, 0);

        // 2. 记录动画结束参数
        var endTarget = camera.setStandardView(stdView, box);
        endTarget = viewer.camera.zoomToBBox(box, margin);
        var endDir = camera.getWorldDirection().clone();
        endDir.normalize();
        var endUp = new THREE.Vector3();
        endUp.copy(camera.realUp || camera.up);
        endUp.normalize();
        var endFocal = new THREE.Vector3(camera.position.clone().sub(endTarget).length(), 0, 0);

        viewer.getEditorManager().setInteractiveState(false); // 动画中
        // 启动定时器
        _animation.from({
            animDir: startDir,
            animUp: startUp,
            animTarget: startTarget,
            animFocal: startFocal
        }).to({
            animDir: endDir,
            animUp: endUp,
            animTarget: endTarget,
            animFocal: endFocal
        }, _duration).onUpdate(function () {
            // 传入更新值,这里的this是 CLOUD.Animation._object
            var interpTarget = this.animTarget;
            var interpDir = this.animDir;
            var interpUp = this.animUp;
            var interpFocal = this.animFocal.x;
            viewer.camera.LookAt(interpTarget, interpDir, interpUp, interpFocal);
            viewer.cameraControl.update(true, true);
            // 增加回调
            callback && callback();
        }).onComplete(function () {
            viewer.camera.LookAt(endTarget, endDir, endUp, endFocal.x);
            viewer.cameraControl.update(true, true);
            // 增加回调
            callback && callback();
            viewer.getEditorManager().setInteractiveState(true); //动画结束
            viewer.camera.up.copy(THREE.Object3D.DefaultUp);// 渲染完成后才可以恢复相机up方向
        }).start(_frameTime);
    };

    // 先采用一个简单的接口实现转场动画，后续新建任务，重构这部分代码
    this.active = function (startCameraInfo, endCameraInfo, viewer, callbackProcess, callbackFinish) {

        var camera = viewer.camera;
        // 1. 记录动画开始参数
        var startPosition = new THREE.Vector3(startCameraInfo.position.x, startCameraInfo.position.y, startCameraInfo.position.z);
        var startTarget = new THREE.Vector3(startCameraInfo.target.x, startCameraInfo.target.y, startCameraInfo.target.z);
        var startFocal = new THREE.Vector3(startTarget.distanceTo(startPosition), 0, 0);
        var startDir = startTarget.clone().sub(startPosition).normalize();
        var startUp = new THREE.Vector3(startCameraInfo.up.x, startCameraInfo.up.y, startCameraInfo.up.z);
        startUp.normalize();

        // 2. 记录动画结束参数
        var endPosition = new THREE.Vector3(endCameraInfo.position.x, endCameraInfo.position.y, endCameraInfo.position.z);
        var endTarget = new THREE.Vector3(endCameraInfo.target.x, endCameraInfo.target.y, endCameraInfo.target.z);
        var endFocal = new THREE.Vector3(endTarget.distanceTo(endPosition), 0, 0);
        var endDir = endTarget.clone().sub(endPosition).normalize();
        var endUp = new THREE.Vector3(endCameraInfo.up.x, endCameraInfo.up.y, endCameraInfo.up.z);
        endUp.normalize();

        viewer.getEditorManager().setInteractiveState(false); // 动画中
        // TODO:
        // 启动定时器
        _animation.from({
            animDir: startDir,
            animUp: startUp,
            animTarget: startTarget,
            animFocal: startFocal
        }).to({
            animDir: endDir,
            animUp: endUp,
            animTarget: endTarget,
            animFocal: endFocal
        }, _duration).onUpdate(function () {
            // 传入更新值,这里的this是 CLOUD.Animation._object
            var interpTarget = this.animTarget;
            var interpDir = this.animDir;
            var interpUp = this.animUp;
            var interpFocal = this.animFocal.x;
            camera.LookAt(interpTarget, interpDir, interpUp, interpFocal);
            // 增加回调
            callbackProcess && callbackProcess(interpTarget);
        }).onComplete(function () {
            camera.LookAt(endTarget, endDir, endUp, endFocal.x);
            // 增加回调
            callbackProcess && callbackProcess(endTarget);
            callbackFinish && callbackFinish();
            viewer.getEditorManager().setInteractiveState(true); //动画结束
            camera.up.copy(THREE.Object3D.DefaultUp);// 渲染完成后才可以恢复相机up方向
        }).start(_frameTime);
    };
};