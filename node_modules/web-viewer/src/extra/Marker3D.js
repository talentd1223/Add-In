CLOUD.Marker3D = function (viewer) {

    var _viewer = viewer;
    var _scene = _viewer.getScene();
    var _group = null;

    var _isHidden = false;

    var _markersGroup = {};
    var _textures = {};

    var _defaultSize = 32;
    var _defaultColor = 0xffffff;

    var _textureLoader = new THREE.TextureLoader();
    _textureLoader.setCrossOrigin("anonymous");

    var _scope = this;

    function loadTextures(paths) {

        var n = 0;
        var len = paths.length;

        var onLoadFinished = function () {

            ++n;

            if (n >= len) {
                _scope.update();
                _viewer.render();
            }

        };

        for (var i = 0; i < len; ++i) {

            var path = paths[i];

            if (_textures[path] === undefined) {

                _textures[path] = _textureLoader.load(path, function () {

                    onLoadFinished();

                }, undefined, function () {

                    onLoadFinished();

                });

            } else {

                onLoadFinished();
            }

        }

    }

    function unloadTextures() {

        for (var path in _textures) {

            if (_textures.hasOwnProperty(path)) {
                delete _textures[path];
            }

        }

    }

    /**
     * 添加一组Marker
     *
     * @param {Array} items - marker数组  item = {position: {x: xxx, y : xxx, z : xxx}, size: xxx, iconUrl:xxx, tooltip:xxx}}
     */
    this.add = function (items) {

        var texturePaths = [];
        var i, len;

        if (items && items instanceof Array) {

            for (i = 0, len = items.length; i < len; ++i) {

                var item = items[i];

                var newItem = {
                    id: item.id ? item.id : THREE.Math.generateUUID(),
                    position: {x: item.position.x, y: item.position.y, z: item.position.z},
                    size: item.size ? item.size : _defaultSize,
                    iconUrl: item.iconUrl ? item.iconUrl : null,
                    tooltip: item.tooltip
                };

                var key;

                if (newItem.iconUrl) {
                    key = newItem.iconUrl;
                    texturePaths.push(newItem.iconUrl);
                } else {
                    key = "" + _defaultColor;
                }

                if (_markersGroup[key] === undefined) {
                    _markersGroup[key] = [];
                }

                _markersGroup[key].push(newItem);

            }

        }

        loadTextures(texturePaths);

    };

    /**
     * 移除Marker
     *
     * @param {Object} item - marker对象  item = {position: {x: xxx, y : xxx, z : xxx}, size: xxx, iconUrl:xxx, tooltip:xxx}}
     */
    this.remove = function (item) {

        if (!item) {
            return;
        }

        var key = item.iconUrl ? item.iconUrl : ("" + _defaultColor);

        if (_markersGroup[key] === undefined) {
            return;
        }

        var success = false;

        var markers = _markersGroup[key];

        for (var i = 0, len = markers.length; i < len; ++i) {

            if (markers[i].id === item.id) {

                markers.splice(i, 1);
                success = true;
                break;

            }
        }

        if (success) {
            this.update();
        }

    };

    /**
     * 根据Id移除Marker
     *
     * @param {String} id - marker id
     */
    this.removeById = function (id) {

        var success = false;

        for (var key in _markersGroup) {

            if (_markersGroup.hasOwnProperty(key)) {

                var markers = _markersGroup[key];

                for (var i = 0, len = markers.length; i < len; ++i) {

                    if (markers[i].id === id) {

                        markers.splice(i, 1);
                        success = true;
                        break;

                    }
                }

            }
        }

        if (success) {
            this.update();
        }

    };

    /**
     * 根据Id获取Marker
     *
     * @param {String} id - marker id
     */
    this.getItemById = function (id) {

        for (var key in _markersGroup) {

            if (_markersGroup.hasOwnProperty(key)) {

                var markers = _markersGroup[key];

                for (var i = 0, len = markers.length; i < len; ++i) {

                    var marker = markers[i];

                    if (marker.id === id) {

                        return {
                            id: marker.id,
                            position: {x: marker.position.x, y: marker.position.y, z: marker.position.z},
                            size: marker.size,
                            iconUrl: marker.iconUrl,
                            tooltip: marker.tooltip
                        }
                    }

                }
            }

        }

        return null;
    };

    /**
     * 获得所有的Marker
     *
     * @returns {Array} marker数组  item = {position: {x: xxx, y : xxx, z : xxx}, size: xxx, iconUrl:xxx, tooltip:xxx}}
     */
    this.getItems = function () {

        var items = [];

        for (var key in _markersGroup) {

            if (_markersGroup.hasOwnProperty(key)) {

                var markers = _markersGroup[key];

                for (var i = 0, len = markers.length; i < len; ++i) {

                    var marker = markers[i];

                    items.push({
                        id: marker.id,
                        position: {x: marker.position.x, y: marker.position.y, z: marker.position.z},
                        size: marker.size,
                        iconUrl: marker.iconUrl,
                        tooltip: marker.tooltip
                    });

                }
            }

        }

        if (items.length > 0) {
            return items;
        }

        return null;

    };

    /**
     * 清除所有的Marker
     *
     */
    this.clear = function () {

        if (_group) {
            _group.clear();
        }

        unloadTextures();

        for (var key in _markersGroup) {

            if (_markersGroup.hasOwnProperty(key)) {

                delete _markersGroup[key];

            }

        }

        this.update();
    };

    /**
     * 激活Marker
     *
     */
    this.activate = function () {

        this.clear();
    };

    // 禁用Marker
    this.deactivate = function () {

        this.clear();

        if (_group) {
            _scene.removeObjectGroup(_group);
            _group = null;
        }

    };

    /**
     * 显示Marker
     *
     */
    this.show = function () {
        if (_group) {
            _group.visible = true;
        }
        _isHidden = false;
        this.update();
    };

    /**
     * 隐藏marker
     *
     */
    this.hide = function () {

        if (_group) {
            _group.visible = false;
        }
        _isHidden = true;
        this.update();
    };

    /**
     * 加载一组Marker
     *
     * @param {Array} items - marker数组  item = {position: {x: xxx, y : xxx, z : xxx}, size: xxx, iconUrl:xxx, tooltip:xxx}}
     */
    this.load = function (items) {

        this.clear();
        this.add(items);
        this.update();

    };

    /**
     * 更新渲染对象
     *
     */
    this.update = function () {

        if (_isHidden) {
            return;
        }

        if (!_group) {
            // selectable, low display priority, world space
            _group = _scene.getOrCreateObjectGroup(CLOUD.ObjectGroupType.MARKER3D, {
                pickableType: CLOUD.PICKABLETYPE.Marker3d,
                hoverEnabled: true,
                priority: 2,
                globalSpace: true
            });
        }

        _group.clear();

        for (var key in _markersGroup) {

            if (_markersGroup.hasOwnProperty(key)) {

                var markers = _markersGroup[key];
                var len = markers.length;

                if (len < 1) {
                    continue;
                }

                var sprite = _textures[key];

                // 构造MeshNode
                var positions = new Float32Array(len * 3);
                var sizes = new Float32Array(len);

                var vertex = new THREE.Vector3();
                var maxSize = 0;

                var pointIds = [];

                for (var i = 0; i < len; ++i) {

                    var marker = markers[i];

                    vertex.set(marker.position.x, marker.position.y, marker.position.z);
                    vertex.toArray(positions, i * 3);

                    sizes[i] = marker.size;

                    pointIds.push(marker.id);

                    if (maxSize < marker.size) {
                        maxSize =  marker.size;
                    }
                }

                var geometry = new THREE.BufferGeometry();
                geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));
                geometry.addAttribute('attrSize', new THREE.BufferAttribute(sizes, 1));

                var material = new THREE.PointsMaterial({
                    size: maxSize,// 当sizeAttribute为true时，size失效
                    sizeAttenuation: false, // 当sizeAttribute为true时，sizeAttenuation失效
                    positionOffset: true,
                    sizeAttribute: true, // 每个顶点使用自己的大小
                    map: sprite,
                    depthTest: true,
                    alphaTest: 0.001,
                    //blending: THREE.NoBlending, //标签边缘效果不理想，暂时开启融合
                    transparent: true
                });

                material.color.setHex(_defaultColor);

                var particles = new CLOUD.PointsEx(geometry, material);
                particles.name = key;
                particles.size = maxSize;
                particles.pointIds = pointIds;

                _group.add(particles);
                particles.matrixAutoUpdate = false;
                particles.updateMatrixWorld(true);

            }
        }

        _group.updateMatrixWorld(true);

    };

};