CLOUD.SceneStateHelper = function (modelManager) {
    // active selection objects
    this.selectionSet = {};
    this.selectionMaterial = CLOUD.MaterialUtil.createHighlightMaterial();
    this.selectionMaterial.name = "selection";
    // hovered object id
    this.hoverId = undefined;
    this.hoverMaterialDefaultParams = {color: 0xdddddd, opacity: 0.9, transparent: true, side: THREE.DoubleSide};
    this.hoverMaterial = CLOUD.MaterialUtil.createStandardMaterial(this.hoverMaterialDefaultParams);
    this.hoverMaterial.name = "hover";
    this.modelManager = modelManager;
};

// the object Id may be not unique when there are multiple models
//
CLOUD.SceneStateHelper.prototype = {

    constructor: CLOUD.SceneStateHelper,

    _dispatchChangeEvent: function() {

        var newSelList = this.getSelection();

        this.modelManager.dispatchEvent({
            type: CLOUD.EVENTS.ON_SELECTION_CHANGED,
            selectionList: newSelList
        });
    },

    clearSelection: function() {

        var selChanged =  false;

        for (var id in this.selectionSet) {
            if (this.selectionSet.hasOwnProperty(id)) {
                selChanged = true;
                this.selectionSet = {}; // clear the list
                break;
            }
        }

        if (selChanged) {
            this.modelManager.clearSelection();
            this._dispatchChangeEvent();
        }
    },

    // check if there is any selection object changed,
    // dispatch event only when there is selection changed
    addSelection: function(selList) {

        if (!selList) {
            return;
        }

        var selectionSet = this.selectionSet;
        var selChanged =  false;

        for (var i = selList.length - 1; i >= 0; i--) {
            if (!selectionSet.hasOwnProperty(selList[i])) {
                selectionSet[selList[i]] = true;
                selChanged = true;
            }
        }

        if (selChanged) {
            this.modelManager.applySelection();
            this._dispatchChangeEvent();
        }
    },

    setSelection: function(selList) {

        if (!selList) {
            selList = [];
        }

        // check if existing invalid 'userId' and notify client
        var notExistIds = [];

        for (var i = selList.length - 1; i >= 0; i--) {
           if (!this.modelManager.isUserIdExist(selList[i])) {
               notExistIds.push(selList[i]);
           }
        }

        if (notExistIds.length > 0) {
            //notify client side, there is failure in selection
            this.modelManager.dispatchEvent({
                type: CLOUD.EVENTS.ON_SELECTION_FAILED,
                failedId: notExistIds
            });
        }

        // set不需要进行对象状态检查
        var selectionSet = this.selectionSet = {};
        for (var i = selList.length - 1; i >= 0; i--) {
            selectionSet[selList[i]] = true;
        }

        this.modelManager.applySelection();
        this._dispatchChangeEvent();
    },

    removeSelection: function(selList) {

        var selChanged = false;
        var selectionSet = this.selectionSet;

        if (selList && selList.length > 0) {
            for (var i = 0, len = selList.length; i < len; ++i) {
                var id = selList[i];
                if (selectionSet.hasOwnProperty(id)) {
                    delete selectionSet[id];
                    selChanged = true;
                }
            }
        }

        if (selChanged) {
            this.modelManager.applySelection();
            this._dispatchChangeEvent();
        }
    },

    getSelection: function() {

        var ids = [];

        for (var id in this.selectionSet) {
            ids.push(id);
        }

        return ids;
    },

    getSelectionSet: function() {
        return this.selectionSet;
    },

    isSelected: function(id) {
        return this.selectionSet.hasOwnProperty(id);
    },


    setHoverId: function(id) {
        this.hoverId = id;
        this.modelManager.applyHover();
    },

    clearHover: function () {
        this.hoverId = undefined;
        this.modelManager.clearHover();
    },

    /**
     * 根据物体当前材质获得Hover构件材质
     *
     * @param {THREE.Material} material - 物体当前材质参数
     * @return {Object} 材质
     */
    getHoverMaterial: function (material) {
        //var material = overrideMaterial ? overrideMaterial : this.hoverObjectOrigMaterial;
        var hoverMaterial = this.hoverMaterial.clone();

        // color可能不存在， 例如使用texture时 （BIMFACEDM-1465）
        if (material && material.hasOwnProperty("color")) {
            var newColor = material.color.clone();
            //avoid color: 0,0,1 have no change
            var maxColor = Math.max(newColor.r,Math.max(newColor.g,newColor.b));
            newColor.r += newColor.r == 0? maxColor * 0.3: newColor.r* 0.2;
            newColor.g += newColor.g == 0? maxColor * 0.3: newColor.g* 0.2;
            newColor.b += newColor.b == 0? maxColor * 0.3: newColor.b* 0.2;
            if (newColor.r > 1.0) {
                newColor.r = 1.0;
            }
            if (newColor.g > 1.0) {
                newColor.g = 1.0;
            }
            if (newColor.b > 1.0) {
                newColor.b = 1.0;
            }
            if (newColor.r === 1.0 && newColor.g === 1.0 && newColor.b === 1.0) {
                newColor.r = 0.87;
                newColor.g = 0.87;
                newColor.b = 0.87;
            }
            hoverMaterial.color.setHex(newColor.getHex());
            if (material.opacity !== undefined) {
                hoverMaterial.opacity = material.opacity;
            } else {
                hoverMaterial.opacity = this.hoverMaterialDefaultParams.opacity;
            }
            if (material.transparent !== undefined) {
                hoverMaterial.transparent = material.transparent;
            } else {
                hoverMaterial.transparent = this.hoverMaterialDefaultParams.transparent;
            }
            if (material.side !== undefined) {
                hoverMaterial.side = material.side;
            } else {
                hoverMaterial.side = this.hoverMaterialDefaultParams.side;
            }
            if (material.metalness !== undefined) {
                hoverMaterial.metalness = material.metalness;
            } 
            if(material.roughness !== undefined)
            {
                hoverMaterial.roughness = material.roughness;
            }

            if (material.bumpMap !== undefined) {
                hoverMaterial.bumpMap = material.bumpMap;
            }
            if (material.alphaMap !== undefined) {
                hoverMaterial.alphaMap = material.alphaMap;
            }
            if (material.emissiveMap !== undefined) {
                hoverMaterial.emissiveMap = material.emissiveMap;
            }
            if (material.envMap !== undefined) {
                hoverMaterial.envMap = material.envMap;
            }
            if (material.envMapIntensity !== undefined) {
                hoverMaterial.envMapIntensity = material.envMapIntensity;
            }

            if(material.map!== undefined && material.map !== null)
            {
                hoverMaterial.map = material.map;
                hoverMaterial.opacity = hoverMaterial.opacity * 0.7;
                hoverMaterial.transparent = true;  
            }
            hoverMaterial.needsUpdate = true;
        }

        return hoverMaterial;
    },

    setSelectionColor: function(color) {
        this.selectionMaterial.color.setHex(color);
        this.selectionMaterial.needsUpdate = true;
    },

    getSelectionMaterial: function() {
        return this.selectionMaterial.clone();
    }

};
