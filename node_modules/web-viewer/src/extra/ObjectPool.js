
/**
 * Custom Pool object. Holds objects to be managed to prevent
 * garbage collection.
 *
 * @class  CLOUD.ObjectPool
 */
CLOUD.ObjectPool = function (classType, size) {

    this.cls = classType;
    this.size = size;// Max objects allowed in the pool
    this._pool = [];
    this.counter = 0;
};

/**
 * Populates the pool array with objects
 */
CLOUD.ObjectPool.prototype.init = function (parameters) {

    for (var i = 0, len = this.size; i < len; ++i) {

        // Initialize the objects
        var obj = new this.cls();
        obj.init(parameters);
        this._pool[i] = obj;

    }
};

CLOUD.ObjectPool.prototype.resize = function (size, parameters) {

    this.size = size;
    this.collect();
    this.init(parameters);
};

/**
 * Grabs the last item in the list and initializes it and
 * pushes it to the front of the array.
 */
CLOUD.ObjectPool.prototype.get = function (parameters) {

    if (this.counter >= this.size) {
        // CLOUD.Logger.log("the pool is full");
        return -1;
    }

    var object = this._pool[this.counter];
    object.spawn(parameters);

    ++this.counter;

    return this.counter - 1;
};

CLOUD.ObjectPool.prototype.clear = function () {

    for (var i = 0, len = this.size; i < len; ++i) {
        this._pool[i].clear();
    }

    this.counter = 0;

};

CLOUD.ObjectPool.prototype.destroy = function () {

    // for (var i = 0, len = this.size; i < len; ++i) {
    //     this._pool[i].destroy();
    // }

    this.collect();
};

/**
 * Allow collection of all objects in the pool
 */
CLOUD.ObjectPool.prototype.collect = function() {

    // just forget the list and let the garbage collector reap them
    this._pool = []; // fresh and new
    this.counter = 0;
};

CLOUD.ObjectPool.prototype.getObjects = function () {
    return this._pool;
};

// --------------------------------------------------------- //
/**
 * 可扩容对象池
 *
 * @class  CLOUD.ExpandableObjectPool
 */
CLOUD.ExpandableObjectPool = function () {

    this.size = 0;
    this.counter = 0;
    this.expansion = 1;
    this._pool = null;

};

/**
 * 初始化对象池
 *
 * @param {Object} classType - 对象类型
 * @param {Number} initialSize - 初始大小
 */
CLOUD.ExpandableObjectPool.prototype.init = function (classType, initialSize) {

    this.classType = classType;
    this._pool = [];

    this._expand(initialSize);
};

/**
 * 构造一组新对象来扩展对象池
 *
 * @param {Number} howMany - 添加的新对象的数量
 */
CLOUD.ExpandableObjectPool.prototype._expand = function (howMany) {

    this.size += howMany;

    for (var i = 0; i < howMany; i++) {
        this._pool.push(new this.classType());
    }

};

/**
 * 从对象池中取出可以使用的对象
 *
 * @return {Object} 对象池中的一个对象
 */
CLOUD.ExpandableObjectPool.prototype.acquire = function () {

    if (this.counter >= this.size) {

        // 扩展空间(扩展20%，最小1)
        this.expansion = Math.round(this.expansion * 1.2) + 1;
        this._expand(this.expansion);

        console.log("_expand");

    }

    return this._pool[this.counter++];
};

/**
 * 清除对象池状态
 *
 */
CLOUD.ExpandableObjectPool.prototype.clear = function () {

    this.counter = 0;

};

/**
 * 卸载对象池资源
 *
 */
CLOUD.ExpandableObjectPool.prototype.destroy = function () {

    for (var i = 0, len = this.size; i < len; ++i) {
        this._pool[i].destroy();
    }

    this.counter = 0;
    this.size = 0;
    this.expansion = 1;
    this._pool = null;

};

/**
 * 获得对象池中的所有对象
 *
 */
CLOUD.ExpandableObjectPool.prototype.getObjects = function () {
    return this._pool;
};


