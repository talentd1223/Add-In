class ExtrudeBodyManager extends CLOUD.ObjectGroup{

	constructor()
	{
		super(CLOUD.ObjectGroupType.EXTRUDEBODYMANAGER, {priority: 20});
		this.globalSpace = true;

	}

	addNode(name, sketchVertices, height, faceMaterial, edgeMaterial)
    {
		var node = this.getNode(name);
		if(node)
		{
			node.material = faceMaterial;
			node = this.getNode("wireframe_"+name);
			if(node)
				node.material = edgeMaterial;
			return;
		}
		var length = sketchVertices.length;
		//positions 必须首尾点一致，且中间没有重复点，Shape会自行展开。
		var positions = new Array();
		
		// var holes = [];
		var depth = 0;
		for (var i = 0; i < length; ++i) 
		{
			var extrudeBodyPosition = sketchVertices[i];
			var len = extrudeBodyPosition.length;
			if( len <= 2)
			{
				var ai = extrudeBodyPosition[0];
				positions.push(new THREE.Vector2(ai.x, ai.y ));
				depth = ai.z;
			}
			//显示孔
			// if(len > 2)
			// {
			// 	var holePositions = [];
			// 	for(var j =0; j< len;j++)
			// 	{
			// 		holePositions.push(extrudeBodyPosition[j]);
			// 	}
			// 	for(var j = 1; i<length && j< sketchVertices[i+1].length-1; j++)
			// 	{
			// 		holePositions.push(sketchVertices[i+1][j]);
			// 	}
			// 	i++;
			// 	console.log("holePositions",holePositions);
			// 	var hole = new THREE.Path();
			// 	hole.fromPoints(holePositions);
			// 	holes.push(hole);
	
			// }
		}
		if(positions.length > 0 )
			positions.push(positions[0]);
	
		
		var shape = new THREE.Shape(positions);
		// shape.holes = holes;
		var extrudeSettings = {
			amount:height,
		};
	
		var extrudeBodyGeometry = new THREE.ExtrudeGeometry( shape, extrudeSettings );
		faceMaterial.depthTest = false;
		var extrudeBodyMesh = new THREE.Mesh(extrudeBodyGeometry, faceMaterial);
		extrudeBodyMesh.name = name;
		//需先画不被遮挡但是会遮挡室内物品  
		// extrudeBodyMesh.renderOrder = 90;
		extrudeBodyMesh.translateZ(depth);
		this.add(extrudeBodyMesh);
	
		this.updateMatrixWorld(true);
	
		//generate wireframe
		var faces = extrudeBodyMesh.geometry.faces;
		var indexArray = [];
		for(var i = 0, len = faces.length; i < len; i ++)
		{
			indexArray.push(faces[i].a);
			indexArray.push(faces[i].b);
			indexArray.push(faces[i].c);
		}
		var vertices = extrudeBodyMesh.geometry.vertices;
		var vertexArray = [];
		for(var i = 0, len = vertices.length; i< len; i++)
		{
			vertexArray.push(vertices[i].x);
			vertexArray.push(vertices[i].y);
			vertexArray.push(vertices[i].z);
		}
	
		var wireframeIndex = CLOUD.BuildEdge(vertexArray, indexArray, Math.PI/3.5);
		var wireframeGeometry = new THREE.BufferGeometry();
		wireframeGeometry.setIndex(new THREE.Uint32BufferAttribute(wireframeIndex, 1));
		wireframeGeometry.addAttribute('position', new THREE.Float32BufferAttribute(vertexArray, 3));
	 
	
		edgeMaterial.depthTest = false;
		edgeMaterial.transparent = true;//后绘制不被遮挡
		var wireframeMesh = new THREE.LineSegments(wireframeGeometry, edgeMaterial);
		wireframeMesh.translateZ(depth);
		// wireframeMesh.renderOrder = 90;
		wireframeMesh.name = "wireframe_"+name;
		this.add(wireframeMesh);
		this.updateMatrixWorld(true);

	}
	
	clearWireframes() 
	{
		var groups = this.children;
		for(var i =0 , len = groups.length; i<len; i++)
		{
			if(groups[i].type =="LineSegments" )
				this.remove(groups[i]);
		}
	}
	createMaterial(materialParameter) 
	{
		return CLOUD.MaterialUtil.createStandardMaterial(materialParameter);
	}
	
	setNodeMaterial(name, faceMaterialParameter, edgeMaterialParameter) 
	{
		var node = this.getNode(name);
		if(node)
		{
			var material = node.material;
			for(var i in faceMaterialParameter)
			{
				var type = i;
				if (material.hasOwnProperty(type)) {
					if(type == "color")
					{
						material[type] = new THREE.Color(faceMaterialParameter[i]);
					}
					else
						material[type] = faceMaterialParameter[i];
					
				}
			}
			
		}
		node = this.getNode("wireframe_"+name);
		if(node)
		{
			var material = node.material;
			for(var i in edgeMaterialParameter)
			{
				var type = i;
				if (material.hasOwnProperty(type)) {
					if(type == "color")
					{
						material[type] = new THREE.Color(edgeMaterialParameter[i]);
					}   
					else
						material[type] = edgeMaterialParameter[i];             
				}
			}
			
		}
	
	}
	
	getNode(name) 
	{
		var groups = this.children;
		for(var i =0 , len = groups.length; i<len; i++)
		{
			if(groups[i].name == name)
			{
				
				return groups[i];
			}
	
		}
		return null;
	}
	
	removeNodeByName(name) 
	{
		var node = this.getNode(name);
		if(node)
		{
			this.remove(node);  
		}
		node = this.getNode("wireframe_"+name);
		if(node)
		{
			this.remove(node);  
		}
	
		return false;
	}
	
	clearNodes() 
	{
		this.clear();

	}

}

CLOUD.ExtrudeBodyManager = ExtrudeBodyManager;