CLOUD.CloudStandardMaterial = function (parameters) {

    THREE.MeshStandardMaterial.call(this);

    this.type = 'cloudStandard';

    this.roughness = 1.0;
    this.metalness = 0.0;

    this.originRoughness = 1.0;
    this.originMetalness = 0.0;

    this.shift = 0.5;
    this.A = 0.64;
    this.B = 0.03;
    this.C = 0.02;
    this.D = 0.54;
    this.E = 0.0;
    this.F = 0.81;
    this.scale = 0.92;

    this.uniforms = THREE.UniformsUtils.merge( [

        THREE.ShaderLib.standard.uniforms,
        {

            shift: { value: 0.5 },
            A: { value: 0.64 },
            B: { value: 0.03 },
            C: { value: 0.02 },
            D: { value: 0.54 },
            E: { value: 0.0 },
            F: { value: 0.81 },
            scale: { value: 0.92 }
        }

    ] );

    this.vertexShader = THREE.ShaderChunk.cloudStandardVertex;

    this.fragmentShader = THREE.ShaderChunk.cloudStandardFragment;

    // When rendered geometry doesn't include these attributes but the material does,
    // use these default values in WebGL. This avoids errors when buffer data is missing.
    this.defaultAttributeValues = {
        'color': [1, 1, 1],
        'uv': [0, 0],
        'uv2': [0, 0]
    };

    if (parameters !== undefined) {

        if (parameters.attributes !== undefined) {

            console.error('IBLMaterial: attributes should now be defined in THREE.BufferGeometry instead.');

        }

        this.setValues(parameters);

    }

};

CLOUD.CloudStandardMaterial.prototype = Object.create(THREE.MeshStandardMaterial.prototype);
CLOUD.CloudStandardMaterial.prototype.constructor = CLOUD.CloudStandardMaterial;

CLOUD.CloudStandardMaterial.prototype.copy = function (source) {

    THREE.MeshStandardMaterial.prototype.copy.call(this, source);

    this.shift = source.shift;
    this.A = source.A;
    this.B = source.B;
    this.C = source.C;
    this.D = source.D;
    this.E = source.E;
    this.F = source.F;
    this.scale = source.scale;


    return this;

};

CLOUD.CloudStandardMaterial.prototype.refreshUniforms = function () {

    this.uniforms.shift.value = this.shift;
    this.uniforms.A.value = this.A;
    this.uniforms.B.value = this.B;
    this.uniforms.C.value = this.C;
    this.uniforms.D.value = this.D;
    this.uniforms.E.value = this.E;
    this.uniforms.F.value = this.F;
    this.uniforms.scale.value = this.scale;


};