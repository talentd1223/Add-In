/**
 * @author muwj 2016/12/15
 */

CLOUD.Loader.Material = function( buffer, offset ) {

    var data_i = new Uint32Array( buffer, offset, 8 );

    this.id          = data_i[0];
    this.type        = data_i[1];
    this.metal       = data_i[2];
    this.color       = data_i[3];
    this.emissive    = data_i[4];
    this.specular    = data_i[5];
    this.side        = data_i[6];
    this.texture_n   = data_i[7];

    this.texture_id = new Uint32Array( buffer, offset + 4 * 8, 8 );

    var data_f = new Float32Array( buffer, offset + 4 * 16, 3 );
    this.shininess    = data_f[0];
    this.opacity      = data_f[1];
    this.reflectivity = data_f[2];

    data_i = null;
    data_f = null;
};

CLOUD.Loader.Texture = function( buffer, offset ) {

    var data_i = new Uint32Array( buffer, offset, 4 );

    this.id       = data_i[0];
    this.type     = data_i[1];
    this.repeat_u = data_i[2];
    this.repeat_v = data_i[3];

    var data_f = new Float32Array( buffer, offset + 4 * 4, 5 );
    this.angle    = data_f[0];
    this.offset_u = data_f[1];
    this.offset_v = data_f[2];
    this.scale_u  = data_f[3];
    this.scale_v  = data_f[4];

    var data_c = new Uint8Array( buffer, offset + 4 * 9, 8 );
    var ext_name = String.fromCharCode.apply( null, data_c );
    this.file_name_ext = ext_name.substring( 0, ext_name.indexOf('\0') );

    data_i = null;
    data_f = null;
    data_c = null;
};

CLOUD.Loader.MaterialReader = function( buffer ) {

    var header = new Uint32Array( buffer, 0, 4 );

    this.materialCount  = header[0];
    this.materialOffset = header[1];
    this.textureCount   = header[2];
    this.textureOffset  = header[3];

    this.materialSize = 4 * 19;
    this.textureSize  = 4 * 9 + 8;
    this.materialBuffer = buffer.slice( this.materialOffset, this.materialOffset + this.materialCount * this.materialSize );
    this.textureBuffer  = buffer.slice( this.textureOffset,  this.textureOffset  + this.textureCount  * this.textureSize );

    // for data reading
    this.material_id = -1;
    this.texture_id  = -1;
    var tmp_buffer = new ArrayBuffer( this.materialSize );
    this.material_cur = new CLOUD.Loader.Material( tmp_buffer, 0 );
    this.texture_cur  = new CLOUD.Loader.Texture ( tmp_buffer, 0 );

    header = null;
    tmp_buffer = null;
};

CLOUD.Loader.MaterialReader.prototype = {

    constructor: CLOUD.Loader.MaterialReader,

    getMaterial: function( id ) {

        if( id >= 0 && id < this.materialCount ) {
            return new CLOUD.Loader.Material( this.materialBuffer, id * this.materialSize )
        }
    },

    getTexture: function( id ) {

        if( id >= 0 && id < this.textureCount ) {
            return new CLOUD.Loader.Texture( this.textureBuffer, id * this.textureSize )
        }
    },

    getMaterialInfo: function( id ) {

        if( id == this.material_id ) {
            return this.material_cur;
        }

        if( id >= 0 && id < this.materialCount ) {

            var data_i = new Uint32Array( this.materialBuffer, id * this.materialSize, 8 );
            this.material_cur.id        = data_i[0];
            this.material_cur.type      = data_i[1];
            this.material_cur.metal     = data_i[2];
            this.material_cur.color     = data_i[3];
            this.material_cur.emissive  = data_i[4];
            this.material_cur.specular  = data_i[5];
            this.material_cur.side      = data_i[6];
            this.material_cur.texture_n = data_i[7];

            this.material_cur.texture_id = new Uint32Array( this.materialBuffer, id * this.materialSize + 4 * 8, 8 );

            var data_f = new Float32Array( this.materialBuffer, id * this.materialSize + 4 * 16, 3 );
            this.material_cur.shininess    = data_f[0];
            this.material_cur.opacity      = data_f[1];
            this.material_cur.reflectivity = data_f[2];

            data_i = null;
            data_f = null;
            this.material_id = id;
            return this.material_cur;
        }
    },

    getTextureInfo: function( id ) {

        if( id == this.texture_id ) {
            return this.texture_cur;
        }

        if( id >= 0 && id < this.textureCount ) {

            var data_i = new Uint32Array( this.textureBuffer, id * this.textureSize, 4 );
            this.texture_cur.id       = data_i[0];
            this.texture_cur.type     = data_i[1];
            this.texture_cur.repeat_u = data_i[2];
            this.texture_cur.repeat_v = data_i[3];

            var data_f = new Float32Array( this.textureBuffer, id * this.textureSize + 4 * 4, 5 );
            this.texture_cur.angle    = data_f[0];
            this.texture_cur.offset_u = data_f[1];
            this.texture_cur.offset_v = data_f[2];
            this.texture_cur.scale_u  = data_f[3];
            this.texture_cur.scale_v  = data_f[4];

            var data_c = new Uint8Array( this.textureBuffer, id * this.textureSize + 4 * 9, 8 );
            var ext_name = String.fromCharCode.apply( null, data_c );
            this.texture_cur.file_name_ext = ext_name.substring( 0, ext_name.indexOf('\0') );

            data_i = null;
            data_f = null;
            data_c = null;
            this.texture_id = id;
            return this.texture_cur;
        }
    }
};