/**
 * @author muwj 2018/04/23
 */

CLOUD.Loader.LayerHeader = function ( buffer ) {

    var header = new Uint32Array( buffer, 0, 6 );

    this.layerCount    = header[0];
    this.mpkBufferSize = header[1];
    this.keyBufferSize = header[2];
    this.layerOffset   = header[3];
    this.mpkOffset     = header[4];
    this.keyOffset     = header[5];

    var bbox = new Float32Array( buffer, 4 * 6, 6 );
    this.boundingBox = new THREE.Box3(
        new THREE.Vector3( bbox[0], bbox[1], bbox[2] ),
        new THREE.Vector3( bbox[3], bbox[4], bbox[5] ) );

    header = null;
    bbox = null;
};

CLOUD.Loader.LayerData = function ( buffer, offset ) {

    var layer_i = new Int32Array( buffer, offset, 3 );

    this.layer_id        = layer_i[0];
    this.layer_mpk_index = layer_i[1];
    this.layer_mpk_count = layer_i[2];

    var bbox = new Float32Array( buffer, offset + 3 * 4, 6 );
    this.boundingBox = new THREE.Box3(
        new THREE.Vector3( bbox[0], bbox[1], bbox[2] ),
        new THREE.Vector3( bbox[3], bbox[4], bbox[5] ) );

    layer_i = null;
    bbox = null;
};

CLOUD.Loader.LayerReader = function ( buffer ) {

    this.header = new CLOUD.Loader.LayerHeader( buffer );

    this.DataSize = 4 * ( 3 + 6 );
    this.key_size = this.header.keyBufferSize / this.header.layerCount;

    this.dataBuffer = buffer.slice( this.header.layerOffset, this.header.layerOffset + this.header.layerCount * this.DataSize );
    this.mpkBuffer  = buffer.slice( this.header.mpkOffset, this.header.mpkOffset + this.header.mpkBufferSize );
    this.keyBuffer  = buffer.slice( this.header.keyOffset, this.header.keyOffset + this.header.keyBufferSize );
};

CLOUD.Loader.LayerReader.prototype = {

    constructor: CLOUD.Loader.LayerReader,

    getLayerData: function ( string_key ) {
        var index = this.getIndex( string_key );
        if ( index >= 0 && index < this.header.layerCount )
        {
            return new CLOUD.Loader.LayerData( this.dataBuffer, index * this.DataSize );
        }
    },

    getMpkList: function ( string_key ) {
        var data = this.getLayerData( string_key );
        if ( data != undefined )
        {
            return new Uint32Array( this.mpkBuffer, data.layer_mpk_index * 4, data.layer_mpk_count );
        }
    },

    getIndex: function ( string_key ) {

        if( string_key == undefined )
            return -1;

        var left = 0;
        var right = this.header.layerCount - 1;
        var length = string_key.length;

        while( left <= right )
        {
            var mid = Math.floor( ( left + right ) / 2 );
            var buf = new Uint8Array( this.keyBuffer, this.key_size * mid, length );
            var str = String.fromCharCode.apply( null, buf );
            var idx = str.indexOf('\0');
            //var rt = string_id.localeCompare( str.substring( 0, str.indexOf('\0') ) );

            var rt = 0;

            if (idx !== -1) {
                rt = string_key.localeCompare( str.substring( 0, idx ) );
            } else {
                rt = string_key.localeCompare( str );
            }

            if( rt == 0 )
                return mid;
            else if( rt < 0 )
                right = mid - 1;
            else if( rt > 0 )
                left = mid + 1;
        }
        return -1;
    },

    getKeyString: function ( index_id ) {
        if( index_id >= 0 && index_id < this.header.layerCount ) {
            var buf = new Uint8Array( this.keyBuffer, this.key_size * index_id, this.key_size );
            var id_string = String.fromCharCode.apply( null, buf );
            id_string = id_string.substring( 0, id_string.indexOf('\0') ); //
            return id_string;
        }
        return undefined;
    },

    getLayerCount: function () {
        return this.header.layerCount;
    }
};