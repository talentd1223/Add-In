/**
 * @author wunian 2017/11/15
 */

CLOUD.Loader.CameraReader = function( text ) {
    this.cameras = JSON.parse(text);
};

CLOUD.Loader.CameraReader.prototype.parse = function(model, matrixRoot) {

    function setData (data, object) {

        object.uuid = data.uuid;

        if ( data.name !== undefined ) object.name = data.name;

        var matrix = new THREE.Matrix4();
        if ( data.matrix !== undefined ) {
            matrix.fromArray( data.matrix );

        } else {
            var position = new THREE.Vector3();
            var quaternion = new THREE.Quaternion();
            var scale = new THREE.Vector3();

            if ( data.position !== undefined ) position.fromArray( data.position );
            if ( data.rotation !== undefined ) {
                var rotation = new THREE.Vector3();
                rotation.fromArray( data.rotation );
                var euler = new THREE.Euler( rotation[0] * Math.PI / 180, rotation[1] * Math.PI / 180, rotation[2] * Math.PI / 180, 'XYZ' );
                quaternion.setFromEuler(euler);
            }
            if ( data.quaternion !== undefined ) quaternion.fromArray( data.quaternion, 0 );
            if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

            matrix.compose(position, quaternion, scale);
        }

        matrix.multiply(matrixRoot);
        matrix.decompose( object.position, object.quaternion, object.scale );
    };

    var cameras = this.cameras;
    var camera;
    var data;
	if (cameras.Orthographic) {
		var orthoCameras = cameras.Orthographic;
		for( var key in orthoCameras ) {
            data = orthoCameras[key];
            camera = new CLOUD.Camera(CLOUD.CAMERATYPE.ORTHOGRAPHIC, data );

            setData(data, camera);
            model.addCamera(camera);
		}
	}

	if (cameras.Perspective) {
		var prespCameras = cameras.Perspective;
		for( var key in prespCameras ) {
            data = prespCameras[key];
            camera = new CLOUD.Camera(CLOUD.CAMERATYPE.PERSPECTIVE, data );

            if ( data.focus !== undefined ) camera.focus = data.focus;
            if ( data.zoom !== undefined ) camera.zoom = data.zoom;
            if ( data.filmGauge !== undefined ) camera.filmGauge = data.filmGauge;
            if ( data.filmOffset !== undefined ) camera.filmOffset = data.filmOffset;
            if ( data.view !== undefined ) camera.view = Object.assign( {}, data.view );

            setData(data, camera);

            model.addCamera(camera);
		}
	}

};