
CLOUD.TaskWorker = function (threadCount, finishCallback) {

    this.MaxThreadCount = threadCount || 8;

    var scope = this;
    scope.todoList = {};
    scope.todoCount = 0;
    scope.doingCount = 0;

    this.hasTask = function () {
        return scope.todoCount > 0;
    };

    this.addItem = function(id, item) {
        scope.todoList[id] = item;
        scope.todoCount++;
    };

    this.clearTasks = function () {
        scope.todoList = {};
        scope.todoCount = 0;
    };

    this.run = function (loader, sorter) {

        var scope = this;

        if (scope.doingCount > 0) {
            //console.log("busy");
            return;
        }
        
        var items = [];
        var todoList = scope.todoList;

        for (var name in todoList) {
            if(todoList.hasOwnProperty(name)) {
                items.push(name)
            }
        }

        //console.log(scope.todoCount + "/" + items.length);
        scope.todoList = {};
        scope.todoCount = 0;

        var itemCount = items.length;

        if (itemCount === 0) {
            return;
        }

        if (sorter) {
            items.sort(sorter);
        }

        // var TASK_COUNT = Math.min(Math.min(this.MaxThreadCount, CLOUD.GlobalData.ConcurrencyRequestCount), itemCount);
        var TASK_COUNT = Math.min(this.MaxThreadCount, CLOUD.GlobalData.ConcurrencyRequestCount, itemCount);
        scope.doingCount = itemCount;

        function processItem(i) {

            if (i >= itemCount) {
                if (scope.doingCount < 1) {
                    finishCallback();
                }

            } else {

                var item = items[i];
                loader(item, i + TASK_COUNT, processItem);
            }

        }

        for (var ii = 0; ii < TASK_COUNT; ++ii) {
            processItem(ii);
        }
    };
};

CLOUD.MpkTaskWorker = function (threadCount) {

    this.MaxThreadCount = threadCount || 8;
    this.todoList = [];
    this.doingCount = 0;
    this.listeners = [];

    this.addItem = function (item) {

        if (item === undefined) {
            console.log("undefined mpkId");
            return;
        }

        this.todoList.push(item);
    };

    this.run = function (loadCallback, progressCallback, finishCallback) {

        var scope = this;

        if (scope.doingCount > 0) {
            // this.listeners.push(finishCallback);
            return;
        }


        var items = scope.todoList;
        var itemCount = items.length;

        if (itemCount === 0) {
            finishCallback();
            return;
        }

        scope.todoList = []; // 清除
        scope.doingCount = itemCount;

        // var doingListeners = this.listeners;
        // this.listeners = [];

        // var TASK_COUNT = Math.min(Math.min(this.MaxThreadCount, CLOUD.GlobalData.ConcurrencyRequestCount), itemCount);
        var TASK_COUNT = Math.min(this.MaxThreadCount, CLOUD.GlobalData.ConcurrencyRequestCount, itemCount);

        function processItem(idx) {

            if (idx >= itemCount) {

                if (scope.doingCount < 1) {

                    progressCallback(scope.doingCount, itemCount);
                    finishCallback();
                }

            } else {

                progressCallback(scope.doingCount, itemCount);
                loadCallback(items[idx], idx + TASK_COUNT, processItem);

            }
        }

        for (var ii = 0; ii < TASK_COUNT; ++ii) {
            processItem(ii);
        }
    }
};

CLOUD.TaskManager = function (manager) {

    this.manager = manager;
    // MPK
    this.mpkWorker = new CLOUD.MpkTaskWorker(8);

};

CLOUD.TaskManager.prototype = {

    constructor: CLOUD.TaskManager,

    addMpkTask: function(mpkId) {
        this.mpkWorker.addItem(mpkId);
    },

    processMpkTasks: function (progressCallback, finishCallback) {

        var scope = this;

        progressCallback = progressCallback || function () {};
        finishCallback = finishCallback || function () {};

        function load(mpkId, nextIdx, callback) {

            scope.manager.loadMpk(mpkId, function () {

                --scope.mpkWorker.doingCount;
                // next task
                callback(nextIdx);
            });
        }

        this.mpkWorker.run(load, progressCallback, finishCallback);
    }
};