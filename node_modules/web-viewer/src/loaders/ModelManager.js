/**
 * 模型管理类
 *
 * @class  CLOUD.ModelManager
 *
 */
CLOUD.ModelManager = function (filter) {

    // 考虑改进：GlobalData 中变量兼容多模型情况，需要在meshpool策略综合考虑
    // 默认为PC配置，假如应用层明确了是移动端，则配置为移动端
    // CLOUD.GlobalData.IsMobile 交由应用层设置
    if (CLOUD.GlobalData.IsMobile) {
        CLOUD.GlobalData.maxObjectNumInPool = 6000;
        CLOUD.GlobalData.maxDrawCacheNum = 4000;
    }

    this.scene = new CLOUD.Scene();
    this.filter = filter;
    this.crossOrigin = true;
    this.models = {};

    this.materialPool = null;

    this.occlusionCamera = null; // 遮挡裁剪相机

    // Does camera locate inside the scene bound scope
    this.containsCamera = false;

    this.highPriorityCategories = {inner: {}, outer: {}};
    this.octantToObjectMap = {};
    this.mapCellIdToNodes = {};
    this.instanceGeometries = {};

    this.sceneState = new CLOUD.SceneStateHelper(this);
    this.filter.setSceneStateHelper(this.sceneState);

    this.rotation = new THREE.Quaternion();
    this.boundingBox = new THREE.Box3();

    this.IBLMaterial = false;
};

CLOUD.ModelManager.prototype.destroy = function () {

    for (var name in this.models) {
        this.models[name].destroy();
    }

    this.models = null;

    this.octantToObjectMap = null;
    this.mapCellIdToNodes = null;

    this.scene.destroy();
    this.scene = null;

    if (this.materialPool) {
        this.materialPool.destroy();
        this.materialPool = null;
    }

    if (this.occlusionCamera) {
        this.occlusionCamera = null;
    }

    this.sceneState = new CLOUD.SceneStateHelper(this);

    this.rotation = null;
    this.boundingBox = null;
};

/**
 * 更新用于处理遮挡构件的相机状态
 *
 * @param {Object} camera - 场景相机
 * @private
 */
CLOUD.ModelManager.prototype._updateOcclusionCamera = function (camera) {

    var near = camera.near,
        far = camera.distanceFromWorldToDrawing(this.getMatrixWorldGlobal(), CLOUD.GlobalData.OcclusionDistanceToCamera);

    if (this.occlusionCamera) {
        this.occlusionCamera.copy(camera);
    } else {
        this.occlusionCamera = camera.clone();
    }

    this.occlusionCamera.setNearFar(near, far);
    this.occlusionCamera.updateMVP();
};

/**
 * 清除材质状态(仅仅将计数器置为1)
 *
 * @private
 */
CLOUD.ModelManager.prototype._clearMaterialPool = function () {

    if (this.materialPool) {
        this.materialPool.clear();
    }
};

/**
 * 从对象池中取出可以使用的对象
 *
 * @return {Object} 对象池中的一个对象
 */
CLOUD.ModelManager.prototype.acquireMaterial = function () {

    if (this.materialPool) {
        return this.materialPool.acquire();
    }

    return null;
};

CLOUD.ModelManager.prototype.getObjectPool = function () {
    return this.scene.getObjectPool();
};

/**
 * 获得遮挡相机视锥
 *
 * @return {Object} 遮挡相机视锥
 */
CLOUD.ModelManager.prototype.getFrustumFromOcclusionCamera = function () {
    return this.occlusionCamera.getFrustum(false);
};

/**
 * 获得遮挡相机
 *
 * @return {Object} 遮挡相机
 */
CLOUD.ModelManager.prototype.getOcclusionCamera = function () {
    return this.occlusionCamera;
};

// add index of mesh object to the map, key is id of octant which contains the mesh.
// objIndex: object index in object pool
CLOUD.ModelManager.prototype.addObjectRangeToOctantMap = function (octantId, startIndex, endIndex) {
    var map = this.octantToObjectMap;

    if (map[octantId] === undefined) {
        map[octantId] = [];
    }

    map[octantId].push(startIndex);
    map[octantId].push(endIndex);
};

CLOUD.ModelManager.prototype.getOctreeRoots = function () {
    var roots = [];
    var models = this.models;
    for (var id in models) {
        if (models.hasOwnProperty(id)) {
            var model = models[id];
            if (model.isLoaded() && (!model.isEmptyScene())) {
                model.getOctreeRoots(roots);
            }
        }
    }

    return roots;
};

CLOUD.ModelManager.prototype.prepareScene = function (camera) {

    var models = this.models;

    if (!CLOUD.GlobalData.BatchMergeEnabled) {
        this.clearPool();
    }

    this.octantToObjectMap = {};

    if (CLOUD.GlobalData.OcclusionTranslucentEnabled) {
        if (this.materialPool == null) {
            this.materialPool = new CLOUD.ExpandableObjectPool();
            this.materialPool.init(CLOUD.MaterialEx, 50);
        }
        this._clearMaterialPool();
        this._updateOcclusionCamera(camera);
    }

    for (var id in models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (model.isLoaded() && (!model.isEmptyScene())) {
                model.prepare(camera);
            }
        }
    }

};

/**
 * 清除对象池
 *
 */
CLOUD.ModelManager.prototype.clearPool = function () {

    this.scene.getObjectPool().clear();
};

/**
 * 加载模型
 *
 * @param {object} parameters - 加载配置项,包含 databagId, serverUrl, debug
 */
CLOUD.ModelManager.prototype.load = function (parameters, parseCfgFinish, debut) {
    var models = this.models;

    // get from cache
    var model = models[parameters.databagId];

    if (model === undefined) {

        // get unique id for this new model
        var index = 0;
        var indexArr = []; // all model index
        for (var id in models) {
            if (models.hasOwnProperty(id)) {
                indexArr.push(models[id].index);
            }
        }
        indexArr.sort();
        for (var i = 0; i < indexArr.length; i++) {
            if (indexArr[i] !== i) {
                index = i;   // get an unused index
                break;
            }
        }

        model = new CLOUD.Model(this, parameters, index, parseCfgFinish, debut);

        models[parameters.databagId] = model;

    } else {

        // 如果模型被隐藏了，重新加载显示模型
        if (!model.isVisible()) {

            model.setVisible(true);
            // 通知加载完成
            model.dispatchEvent({type: CLOUD.EVENTS.ON_LOAD_COMPLETE});
        }

        return model;
    }

    model.load(parameters.notifyProgress);

    return model;
};

/**
 * 卸载模型
 *
 * @param {string} databagId - 数据包名
 */
CLOUD.ModelManager.prototype.unload = function (databagId) {

    // get from cache
    var model = this.models[databagId];

    if (model) {

        model.destroy();
        delete this.models[databagId];

        this.updateScene();

        return true;
    }

    return false;
};

/**
 * 卸载所有模型
 *
 */
CLOUD.ModelManager.prototype.unloadAll = function () {
    var ids = this.getDataBagIds();

    for (var i = 0, len = ids.length; i < len; ++i) {
        this.unload(ids[i]);
    }

    this.clearPool();

    this.models = {};

};

/**
 * 显示指定模型
 *
 * @param {String} databagId - 模型数据包名
 * @return {Boolean} true：模型存在，否则模型不存在
 */
CLOUD.ModelManager.prototype.showModel = function (databagId) {

    var model = this.models[databagId];

    if (model) {

        model.setVisible(true);

        return true;
    }

    return false;
};

/**
 * 隐藏指定模型
 *
 * @param {String} databagId - 模型数据包名
 * @return {Boolean} true：模型存在，否则模型不存在
 */
CLOUD.ModelManager.prototype.hideModel = function (databagId) {

    var model = this.models[databagId];

    if (model) {

        model.setVisible(false);

        return true;
    }

    return false;
};

/**
 * 获得所有模型包名
 *
 */
CLOUD.ModelManager.prototype.getDataBagIds = function () {

    var models = this.models;
    var ids = [];

    for (var id in models) {

        if (models.hasOwnProperty(id)) {

            ids.push(id);

        }
    }

    return ids;

};

/**
 * 更新场景
 *
 */
CLOUD.ModelManager.prototype.updateScene = function () {

    this.updateSceneBoundingBox();
    this.updateSceneRootMatrix();
    this.updateSceneRenderable();
    this.updateOctreeNode();
};

/**
 * 更新场景包围盒
 *
 */
CLOUD.ModelManager.prototype.updateSceneBoundingBox = function () {

    var models = this.models;
    var boundingBox = this.boundingBox;
    boundingBox.makeEmpty();

    for (var id in models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (!model.isEmptyScene()) {

                var boundingBoxTmp = model.getBoundingBoxWorld();

                if (boundingBoxTmp) {

                    if (boundingBox.isEmpty()) {

                        boundingBox.copy(boundingBoxTmp);

                    } else {

                        boundingBox.expandByPoint(boundingBoxTmp.min);
                        boundingBox.expandByPoint(boundingBoxTmp.max);

                    }
                }

            }

        }

    }

    this.scene.setBoundingBoxWorld(boundingBox);
};

/**
 * 更新场景矩阵
 *
 */
CLOUD.ModelManager.prototype.updateSceneRootMatrix = function () {

    var transformed = false;
    var transformMatrix = new THREE.Matrix4();
    var matrixRoot = new THREE.Matrix4();
    var rotation = new THREE.Quaternion();

    var models = this.models;

    // 对于多模型,应该保持旋转缩放矩阵一致，应该从数据层面修改矩阵变换

    // 多模型情况下的主旋转角度取第一个模型的角度
    // 如果采用模型数据提供的变换矩阵(从config.json中获得)，则只支持变换矩阵相同的多模型
    for (var id in this.models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (!model.isEmptyScene()) {
                rotation.copy(model.rotation);
                transformMatrix.copy(model.transformMatrix);
                transformed = model.transformed;
                break;
            }

        }
    }

    // 用于兼容处理
    this.scene.setTransformMatrixGlobal(transformMatrix);

    if (transformed) {

        matrixRoot.copy(transformMatrix);

    } else {

        var scale = new THREE.Vector3(1, 1, 1);

        // fixed bug BIMFACEDM-1872 : 采用统一的scale
        var sceneSize = CLOUD.GlobalData.SceneSize;
        var boxSize = this.boundingBox.getSize();
        var maxLen = Math.max(boxSize.x, boxSize.y, boxSize.z);
        var sceneScale = sceneSize / maxLen;
        scale.multiplyScalar(sceneScale);

        matrixRoot.makeRotationFromQuaternion( rotation );
        matrixRoot.scale( scale );
    }

    this.scene.updateWorldMatrixByMatrix(matrixRoot);

};

/**
 * 更新模型可以进入对象池的数目, 暂时采用模型构件数的比例进行分配的策略
 *
 */
CLOUD.ModelManager.prototype.updateSceneRenderable = function () {

    var models = this.models;
    var poolSize = CLOUD.GlobalData.maxObjectNumInPool;
    var ids = [];
    var renderableTotal = 0;

    for (var id in models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (!model.isEmptyScene()) {
                renderableTotal += model.getRenderableTotal();
                ids.push(id);
            }


        }
    }

    var realTotal = 0;

    for (var i = 0, len = ids.length; i < len; ++i) {

        var id = ids[i];
        var model = models[id];
        var renderableCount = Math.floor(model.getRenderableTotal() / renderableTotal * poolSize);
        if (renderableCount > model.getRenderableTotal()) {
            renderableCount = model.getRenderableTotal();
        }

        model.setRenderableCount(renderableCount);
        realTotal += renderableCount;
    }

    this.scene.resizePool(realTotal > poolSize ? poolSize : realTotal);

};

/**
 * 更新 coctree 数据
 *
 */
CLOUD.ModelManager.prototype.updateOctreeNode = function () {

    var models = this.models;
    for (var id in this.models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (model.isLoaded() && !model.isEmptyScene()) {
                model.updateOctreeNode(true);
            }
        }
    }

};


CLOUD.ModelManager.prototype.updateMaterials = function () {

    var models = this.models;
    for (var id in this.models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (model.isLoaded() && !model.isEmptyScene()) {
                model.updateMaterials();
            }
        }
    }

};

CLOUD.ModelManager.prototype.updateMaterialsValue = function (type, value) {

    var models = this.models;
    for (var id in this.models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (model.isLoaded() && !model.isEmptyScene()) {
                model.updateMaterialsValue(type, value);
            }
        }
    }

};

CLOUD.ModelManager.prototype.switchNewStyleMaterial = function (newStyle) {

    var models = this.models;
    for (var id in this.models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (model.isLoaded() && !model.isEmptyScene()) {
                model.switchNewStyleMaterial(newStyle);
            }
        }
    }

}

CLOUD.ModelManager.prototype.changeAllMaterials = function (isIBL) {

    if (this.IBLMaterial == isIBL) return;

    var models = this.models;
    for (var id in this.models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (!model.isEmptyScene()) {
                model.changeAllMaterials(isIBL);
            }

        }
    }

    this.IBLMaterial = isIBL;

};

CLOUD.ModelManager.prototype.clearScene = function () {

    var models = this.models;

    for (var id in models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];
            model.clearCells();

        }
    }

};

// 跨域设置
CLOUD.ModelManager.prototype.setCrossOrigin = function (crossOrigin) {
    this.crossOrigin = crossOrigin;
};

CLOUD.ModelManager.prototype.getMatrixWorldGlobal = function () {
    return this.scene.getMatrixWorldGlobal();
};

CLOUD.ModelManager.prototype.hasModel = function () {

    var models = this.models;

    for (var id in models) {
        if (models.hasOwnProperty(id)) {
            var model = models[id];
            if (model.isLoaded()) {
                return true;
            }
        }
    }

    return false;
};

CLOUD.ModelManager.prototype.hasModelDataReady = function () {
    var models = this.models;
    var exist = false;

    for (var id in models) {
        if (models.hasOwnProperty(id)) {
            exist = true;
            var model = models[id];
            if (!model.isDataReady()) {
                return false;
            }
        }
    }

    if (exist) {
        return true;
    }

    return false;
};

CLOUD.ModelManager.prototype.getModel = function (id) {

    var model = this.models[id];

    if (model && model.isLoaded()) {
        return model;
    }

    return null;
};
CLOUD.ModelManager.prototype.showOctreeBox = function (rootNode) {

    if (CLOUD.GlobalData.ShowOctant) {

        // not selectable, low display priority
        var octreeGroup = this.scene.getOrCreateObjectGroup(CLOUD.ObjectGroupType.OCTREENODE, {
            pickable: 0,
            priority: 2
        });

        function traverse(parent) {

            for (var i = 0, len = parent.childOctants.length; i < len; i++) {
                var child = parent.childOctants[i];
                var box = new THREE.Box3(child.min, child.max);
                var clr = 0xff;
                clr = clr << (child.depth * 5);

                var boxNode = new CLOUD.BBoxNode(box, clr);
                octreeGroup.add(boxNode);
                boxNode.updateMatrixWorld(true);

                traverse(child);
            }
        }


        octreeGroup.visible = true;

        if (octreeGroup.children.length === 0) {

            var box = new THREE.Box3(rootNode.min, rootNode.max);
            var clr = 0xff0000;
            var boxNode = new CLOUD.BBoxNode(box, clr);
            octreeGroup.add(boxNode);
            boxNode.updateMatrixWorld(true);

            traverse(rootNode);
        }

    } else {
        this.scene.removeObjectGroupByName(CLOUD.ObjectGroupType.OCTREENODE);
    }

};

CLOUD.ModelManager.prototype.setCategoriesToHighPriority = function (categories, side) {

    var len = categories.length;

    if (len < 1) {
        return;
    }

    var highPriorityCategories = this.highPriorityCategories[side] = {};

    for (var i = 0; i < len; ++i) {
        highPriorityCategories[categories[i]] = true;
    }
};

CLOUD.ModelManager.prototype.getCategoriesFromHighPriority = function (side) {
    return this.highPriorityCategories[side];
};

CLOUD.ModelManager.prototype.clearCategoriesFromHighPriority = function (side) {
    this.highPriorityCategories[side] = {};
};

CLOUD.ModelManager.prototype.clearAllCategoriesFromHighPriority = function () {
    this.clearCategoriesFromHighPriority("inner");
    this.clearCategoriesFromHighPriority("outer");
};

CLOUD.ModelManager.prototype.calculateCameraModelRelation = function (cameraPos) {

    // if one of models contains camera, then camera is inside the model.
    var contains = false;
    var models = this.models;

    for (var id in models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];
            if (model && model.isLoaded() && (!model.isEmptyScene()) ) {
                // TODO: 遍历所有模型，因为每个模型的 containsCamera 值都应该计算
                // 用例：a. calculateNearFar时需要知道整体（所有模型合并包围盒）是否包含相机，某个模型
                //          没有加载完成时，render不刷新 （未实现)
                //       b. frustumCull 需要知道单个模型是否包含相机（已经实现）
                model.calculateCameraModelRelation(cameraPos);
                contains = contains || model.containsCamera;
            }
        }

    }

    this.containsCamera = contains;
};

CLOUD.ModelManager.prototype.getCameraNameList = function () {

    var models = this.models;
    var cameraList = [];

    for (var id in models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (!model.isEmptyScene()) {
                cameraList = cameraList.concat(model.getCameraNameList());
            }
        }
    }

    return cameraList;
};

CLOUD.ModelManager.prototype.getCamera = function (name) {

    var models = this.models;
    var camera = null;
    for (var id in models) {
        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (!model.isEmptyScene()) {
                camera = model.getCamera(name);
                if (camera) {
                    break;
                }
            }
        }
    }

    return camera;
};

CLOUD.ModelManager.prototype.getNumOfElements = function () {

    var models = this.models;
    var numOfElements = 0;
    for (var id in this.models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (!model.isEmptyScene()) {
                numOfElements += model.numOfElements;
            }

        }
    }
    return numOfElements;
};

CLOUD.ModelManager.prototype.getNumOfRenderables = function () {

    var models = this.models;
    var numOfRenderables = 0;
    for (var id in this.models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (!model.isEmptyScene()) {
                numOfRenderables += model.renderableTotal;
            }
        }
    }
    return numOfRenderables;
};

CLOUD.ModelManager.prototype.getNumOfTriangles = function () {

    var models = this.models;
    var numOfTriangles = 0;
    for (var id in this.models) {

        if (models.hasOwnProperty(id)) {

            var model = models[id];

            if (!model.isEmptyScene()) {
                numOfTriangles += model.numOfTriangles;
            }
        }
    }
    return numOfTriangles;
};

/**
 * 加载模型
 *
 * @param {Function} progressCallback(doingCount, itemCount) - 数据加载过程中的回调
 * @param {Function} finishCallback() - 数据加载完成后的回调
 */
CLOUD.ModelManager.prototype.loadMpkOnDemand = function (progressCallback, finishCallback) {
    var models = this.models;
    for (var id in models) {
        if (models.hasOwnProperty(id)) {
            var model = models[id];
            if (model.isLoaded() && (!model.isEmptyScene())) {
                model.loadMpkOnDemand(progressCallback, finishCallback);
            }
        }
    }
};

/**
 * 获得按需加载包围盒
 *
 * @returns {Object}
 */
CLOUD.ModelManager.prototype.getBoundingBoxOnDemand = function () {
    var models = this.models;
    var boundingBox = new THREE.Box3();
    for (var id in models) {
        if (models.hasOwnProperty(id)) {
            var model = models[id];
            if (model.isLoaded() && (!model.isEmptyScene())) {
                boundingBox.union(model.getUnionBoundingBoxesOnDemand());
            }
        }
    }
    return boundingBox;
};

/**
 * 设置按需加载条件
 *
 * @param {Array} conditions - 条件对象数组 [{floor: xxx, specialty:xxx},{floor: xxx, specialty:xxx}]
 */
CLOUD.ModelManager.prototype.setConditionsOnDemandLoad = function (conditions) {
    if (conditions && conditions instanceof Array) {
        var objKeys = {};
        for (var i = 0, len = conditions.length; i < len; ++i ) {
            var condition = conditions[i];
            var key = '';
            for (var prop in condition) {
                if (condition.hasOwnProperty(prop)) {
                    key += condition[prop];
                }
            }
            if (objKeys[key] === undefined) {
                objKeys[key] = true;
            }
        }
        this.conditionsOnDemandLoad = objKeys;
    }else {
        this.conditionsOnDemandLoad = null;
    }

    // fire
    var models = this.models;
    for (var id in models) {
        if (models.hasOwnProperty(id)) {
            var model = models[id];
            if (model.isLoaded() && (!model.isEmptyScene())) {
                model.setConditionsChanged(true);
            }
        }
    }

};

/**
 * 获得按需加载条件
 *
 */
CLOUD.ModelManager.prototype.getConditionsOnDemandLoad = function () {
    return this.conditionsOnDemandLoad;
};

CLOUD.ModelManager.prototype.getScene = function () {
    return this.scene;
};

CLOUD.ModelManager.prototype.addNodeInfoToCellMap = function (octantId, object) {
    var map = this.mapCellIdToNodes;
    if (map['info'] === void 0) {
        map['info'] = {};
    }
    if (map['info'][octantId] === void 0) {
        map['info'][octantId] = [];
    }
    map['info'][octantId].push(object);
};

CLOUD.ModelManager.prototype.addMeshToCellMap = function (object, mId, uvProp) {
    var map = this.mapCellIdToNodes;

    if (mId === undefined && uvProp === undefined) {
        if (map['instance'] === void 0) {
            map['instance'] = {};
        }
        if (map['instance'][object.nodeId] === void 0) {
            map['instance'][object.nodeId] = null;
        }
        map['instance'][object.nodeId] = object;
    } else {
        if (map['mesh'] === void 0) {
            map['mesh'] = {};
        }
        if (map['mesh'][mId] === void 0) {
            map['mesh'][mId] = {};
        }
        if (map['mesh'][mId][uvProp] === void 0) {
            map['mesh'][mId][uvProp] = [];
        }
        map['mesh'][mId][uvProp].push(object);
    }

};

CLOUD.ModelManager.prototype.addInstanceGeometry = function (geometryId, geometry) {
    this.instanceGeometries[geometryId] = [];
    if(geometry.length)//"boxM"
        this.instanceGeometries[geometryId] = geometry;
    else
        this.instanceGeometries[geometryId].push(geometry);
};

CLOUD.ModelManager.prototype.applyFilter = function () {
    // console.time("applyFilter");
    for (var key in this.models) {
        var model = this.models[key];
        model.applyFilter();

    }
    // console.timeEnd("applyFilter");
};

CLOUD.ModelManager.prototype.applySelection = function () {
    // console.time("applySelection");
    for (var key in this.models) {
        var model = this.models[key];
        model.applySelection();
    }
    // console.timeEnd("applySelection");
};

CLOUD.ModelManager.prototype.clearSelection = function () {
    // console.time("clearSelection");
    for (var key in this.models) {
        var model = this.models[key];
        model.clearSelection();
    }
    // console.timeEnd("clearSelection");
};

CLOUD.ModelManager.prototype.applyHover = function () {
    // console.time("applyHover");
    if (CLOUD.GlobalData.Hover && !CLOUD.GlobalData.EnableRenderPass) {
        for (var key in this.models) {
            var model = this.models[key];
            model.applyHover();
        }
    }
    // console.timeEnd("applyHover");
};

CLOUD.ModelManager.prototype.clearHover = function () {
    // console.time("clearHover");
    if (CLOUD.GlobalData.Hover && !CLOUD.GlobalData.EnableRenderPass) {
        for (var key in this.models) {
            var model = this.models[key];
            model.clearHover();
        }
    }
    // console.timeEnd("clearHover");
};

CLOUD.ModelManager.prototype.shouldUseBatchRendering = function () {

    if(CLOUD.GlobalData.UseBatchRendering == false)
        return false;

    var threshold = CLOUD.GlobalData.MergedTriangleNumberThreshold;
    if (CLOUD.GlobalData.MergedTriangleNumberThreshold > CLOUD.GlobalData.MaxMergedTriangleNumber) {
        threshold = CLOUD.GlobalData.MaxMergedTriangleNumber;
    }

    for (var key in this.models) {
        var model = this.models[key];
        if (model.numOfTriangles  > threshold) {
            return false;
        } else {
            return true;
        }
    }
    return true;
};

CLOUD.ModelManager.prototype.isUserIdExist = function (userId) {
    var exist = false;
    for (var key in this.models) {
        if (this.models.hasOwnProperty(key)) {
            var model = this.models[key];
            if (model.isUserIdExist(userId)) {
                exist = true;
                break;
            }
        }
    }
    return exist;
};

CLOUD.ModelManager.prototype.getNodeInfosByUserId = function (uid) {
    for (var key in this.models) {
        if (this.models.hasOwnProperty(key)) {
            var nodeInfos = this.models[key].getNodeInfosByUserId(uid);
            if (nodeInfos) {
                return nodeInfos;
            }
        }
    }
    return null;
};
CLOUD.ModelManager.prototype.getNodeInfos = function () {
    for (var key in this.models) {
        var nodeInfos = this.models[key].getNodeInfos();
        if (nodeInfos) {
            return nodeInfos;
        }
    }
    return null;
};

CLOUD.ModelManager.prototype.isHiddenUserId = function (userId) {
    var hidden = false;
    for (var model in this.models) {
        if (this.models.hasOwnProperty(model)) {
            var model = this.models[model];
            if (model.isHiddenUserId(userId)) {
                hidden = true;
                break;
            }
        }
    }
    return hidden;
};

CLOUD.ModelManager.prototype.updateMeshNodes = function () {

    if (CLOUD.GlobalData.BatchMergeEnabled) {
        for (var model in this.models) {
            if (this.models.hasOwnProperty(model)) {
                var model = this.models[model];
                model._updateMergedMeshNodes();
            }
        }
    }

};

// THREE.EventDispatcher.prototype.apply(CLOUD.ModelManager.prototype);
Object.assign(CLOUD.ModelManager.prototype, THREE.EventDispatcher.prototype);