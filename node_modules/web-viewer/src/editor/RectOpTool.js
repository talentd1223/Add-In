/**
 * Base class for tool with rectangle mouse operation.
 *
 * @param name
 * @param cameraControl
 * @param eventDispatcher
 * @constructor
 */
CLOUD.RectOpTool = function (name, cameraControl, eventDispatcher) {

    CLOUD.EditTool.call(this, name);

    this.cameraControl = cameraControl;

    this.frustum = new THREE.Frustum();

    this.startPt = new THREE.Vector2();
    this.endPt = new THREE.Vector2();

    this.eventDispatcher = eventDispatcher;
};


CLOUD.RectOpTool.prototype = Object.create(CLOUD.EditTool.prototype);
CLOUD.RectOpTool.prototype.constructor = CLOUD.RectOpTool;

// send event with the rectangle information
CLOUD.RectOpTool.prototype.onUpdateUI = function (obj) {
    this.eventDispatcher.dispatchEvent({type: CLOUD.EVENTS.ON_EDITOR_UPDATEUI, data: obj, editor: this.name});
};

// do update when rectangle area of the mouse operation is changed
//
CLOUD.RectOpTool.prototype.updateFrustum = function (frustumUpdate, updateUI) {

    var x1 = this.startPt.x;
    var x2 = this.endPt.x;
    var y1 = this.startPt.y;
    var y2 = this.endPt.y;

    if (x1 > x2) {

        var tmp1 = x1;
        x1 = x2;
        x2 = tmp1;

    }

    if (y1 > y2) {

        var tmp2 = y1;
        y1 = y2;
        y2 = tmp2;

    }

    if (x2 - x1 == 0 || y2 - y1 == 0)
        return false;

    var helper = this.cameraControl;
    var dim = helper.getContainerDimensions();

    if (frustumUpdate) {
        helper.computeFrustum(x1, x2, y1, y2, this.frustum, dim);
    }

    if (updateUI) {
        this.onUpdateUI({
            visible: true,
            dir: this.startPt.x < this.endPt.x,
            left: (x1 - dim.left),
            top: (y1 - dim.top),
            width: (x2 - x1),
            height: (y2 - y1)
        });
    }

    return true;
};

