
/**
 * Base class of edit tool
 * An edit tool implement a specific function when interact with user. It can co-work under all kinds of
 * editor(interactive) modes.
 * The edit tool processes interactive event they are interested. And edit tool has higher priority than editors.
 */
CLOUD.EditTool = function (name) {

    this.name = name;
    this._mousePressed = false;

};

CLOUD.EditTool.prototype.getName = function () {
    return this.name;
};

// virtual method when the tool is disabled
//
CLOUD.EditTool.prototype.onExit = function() {

};

//
// ******************** virtual methods to handle all kinds event *************
// ********** specific tool should override event methods they insteresting ***
//
CLOUD.EditTool.prototype.processMouseDown = function (event) {
	return false;
};

CLOUD.EditTool.prototype.processMouseMove = function (event) {
	return false;
};

CLOUD.EditTool.prototype.processMouseUp = function (event) {
	return false;
};

CLOUD.EditTool.prototype.processMouseWheel = function (event) {
	return false;
};

CLOUD.EditTool.prototype.processMouseDoubleClick = function (event) {
	return false;
};

CLOUD.EditTool.prototype.processKeyDown = function (event) {
	return false;
};

CLOUD.EditTool.prototype.processKeyUp = function (event) {

	switch (event.keyCode) {
		case CLOUD.Keys.ESC:
			//_mousePressed was set when 'mousedown' and 'mouseup'
			// reset it as false when 'ESC'.
			this._mousePressed = false;
			break;
		default :
			break
	}
	return false;
};

CLOUD.EditTool.prototype.processTouchstart = function (event) {
	return false;
};

CLOUD.EditTool.prototype.processTouchmove = function (event) {
	return false;
};

CLOUD.EditTool.prototype.processTouchend = function (event) {
	return false;
};

CLOUD.EditTool.prototype.processHover = function (event) {
	return false;
};

//
// ******************** end of virtual methods *****************
//

// dispatch the event to specific event methods
// called by editor manager when event is received
// should not be called by user
CLOUD.EditTool.prototype.onEvent = function(event) {
	var ret = false;
	
	switch(event.type) {
		case 'touchmove':
			ret = this.processTouchmove(event);
			break;
		case 'touchstart':
			ret = this.processTouchstart(event);
			break;
		case 'touchend':
			ret = this.processTouchend(event);
		case 'keydown':
			ret = this.processKeyDown(event);
			break;
		case 'keyup':
			ret = this.processKeyUp(event);
			break;
		case 'mousewheel':
		case 'DOMMouseScroll':
			// this.cameraChange = true; Do we need handle this??? -wun-c
			ret = this.processMouseWheel(event);
			break;
		case 'mousedown':
			this._mousePressed = true;
			ret = this.processMouseDown(event);
			break;
		case 'mousemove':
			if (this._mousePressed) {
				ret = this.processMouseMove(event);
			}
			else {
				ret = this.processHover(event);
			}
			break;
		case 'mouseup':
			this._mousePressed = false;
			ret = this.processMouseUp(event);
			break;
		
		case 'dblclick':
			ret = this.processMouseDoubleClick(event);
			break;
	}

	return ret;
};

