CLOUD.MeasureTool = function (viewer) {

	CLOUD.EditTool.call(this, CLOUD.EditToolMode.PICK_BY_MEASURE);

	this.editorManager = viewer.editorManager;

	this.pickHelper = new CLOUD.PickHelper(viewer.cameraControl);

    this.mouseDown = new THREE.Vector2();
    this.lastEvent = null;

    this.pick = false;
    this.pickPoint = new THREE.Vector3();

};

CLOUD.MeasureTool.prototype = Object.create(CLOUD.EditTool.prototype);
CLOUD.MeasureTool.prototype.constructor = CLOUD.MeasureTool;

CLOUD.MeasureTool.prototype.processMouseDown = function (event) {

	if(CLOUD.GlobalData.IsMobile) {
		return true;
	}

    if (event.button === THREE.MOUSE.LEFT) {
		
		this.mouseDown.x = event.clientX;
		this.mouseDown.y = event.clientY;

		return false;
		
	}
	else {

		return CLOUD.EditTool.prototype.processMouseDown.call(this, event);

	}

};

CLOUD.MeasureTool.prototype.processMouseMove = function (event) {

	return false;

};

CLOUD.MeasureTool.prototype.processMouseUp = function (event) {

	if(CLOUD.GlobalData.IsMobile) {
		return true;
	}

    if (event.button === THREE.MOUSE.LEFT) {
		
		if (this.mouseDown.x == event.clientX && this.mouseDown.y == event.clientY) {

			var pickPoint = this.pickPoint.clone();
			if (event.shiftKey) {
				this.pickHelper.handleShiftMeasure(event, true, pickPoint);
			}
			else {
				this.pickHelper.handleMouseMeasure(event, true, pickPoint);
			}

			if (!pickPoint.equals(this.pickPoint)) {
				this.pick = !this.pick;
				this.pickPoint.copy(pickPoint);
			}

			this.editorManager.isUpdateRenderList = true;

			return true;

		}
		else {

			return CLOUD.EditTool.prototype.processMouseUp.call(this, event);

		}

	}
	else {

		return CLOUD.EditTool.prototype.processMouseUp.call(this, event);

	}

};

CLOUD.MeasureTool.prototype.processHover = function (event) {

	if(CLOUD.GlobalData.IsMobile) {
		return true;
	}
	if (event.shiftKey) {
		this.pickHelper.handleShiftMeasure(event, false, this.pickPoint);
	}
	else {
		this.pickHelper.handleMouseMeasure(event, false, this.pickPoint);
	}
	return true;

};

CLOUD.MeasureTool.prototype.processTouchstart = function (event) {

	this.mouseDown.x = event.touches[0].clientX;
	this.mouseDown.y = event.touches[0].clientY;

	event.clientX = event.touches[0].clientX;
	event.clientY = event.touches[0].clientY;

	this.lastEvent = event;

	return CLOUD.EditTool.prototype.processTouchstart.call(this, event);

};

CLOUD.MeasureTool.prototype.processTouchmove = function (event) {

	this.lastEvent = null;
	return CLOUD.EditTool.prototype.processTouchmove.call(this, event);

};

CLOUD.MeasureTool.prototype.processTouchend = function (event) {

	if (this.lastEvent != null) {

		this.pickHelper.handleMouseMeasure(this.lastEvent, true, this.pickPoint);
		this.editorManager.isUpdateRenderList = true;

	}
	
	return CLOUD.EditTool.prototype.processTouchend.call(this, event);

};

CLOUD.MeasureTool.prototype.onExit = function (event) {

	var scene = this.pickHelper.scene;
	if (scene.hasObjectGroup(CLOUD.ObjectGroupType.MEASUREPICKPLANE)) {
        scene.removeObjectGroupByName(CLOUD.ObjectGroupType.MEASUREPICKPLANE);
    }

};