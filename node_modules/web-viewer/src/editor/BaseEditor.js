
CLOUD.Keys = {
    ALT: 18,
    BACKSPACE: 8,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    A: 65,
    D: 68,
    E: 69,
    Q: 81,
    S: 83,
    W: 87,
    PLUS: 187,
    SUB: 189,
    ZERO: 48,
    ESC: 27
};

CLOUD.EditorConfig = {
    ReverseWheelDirection: false,
    MovementSpeedRate: 1.0,
    WalkSpeedRate: 1.0,
    // rotation pivot mode, only apply to normal editor mode
    RotatePivotMode: CLOUD.RotatePivotMode.MOUSEPOINT,
    NoPan: false,       // flag to respond to pan operation
    NoRotate: false,   // flag to respond to rotation operation
    NoZoom: false,     // flag to respond to zoom operation
    NoKey: false,      // flag to respond to key operation
    LockAxisZ: false  // flag to lock the rotation along axis z
};

/**
 *
 * @param cameraControl
 * @param scene
 * @constructor
 */
CLOUD.BaseEditor = function (name, cameraControl) {

    this.name = name;
    this.cameraControl = cameraControl;
    this.mouseButtons = { ORBIT: THREE.MOUSE.RIGHT, PAN2: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.LEFT };

    this.StateType = {
        NONE: -1,
        ROTATE: 0,
        DOLLY: 1,
        PAN: 2
    };

    this.state = this.StateType.NONE;
    this.zoomSpeed = Math.pow(0.95, 0.2); // const

	// TODO: Every editor have their own move speed, do we need to use uniform speed for all editors?
    this.defaultMovementSpeed = 0.005 * CLOUD.GlobalData.SceneSize; // 移动速度 const
    this.movementSpeed = this.defaultMovementSpeed;    // can be changed
    this.minMovementSpeed = 0.001;

    this.defaultKeyPanSpeed = 2.0;
    this.keyPanSpeed = this.defaultKeyPanSpeed;    // pixels moved per arrow key push
    this.minKeyPanSpeed = 0.01;
    this.wheelZoomFactor = 0.00045; // 0.0005

};

CLOUD.BaseEditor.prototype.getName = function () {
    return this.name;
};

CLOUD.BaseEditor.prototype.destroy = function () {

    this.scene = null;
    this.cameraControl = null;
    this.mouseButtons = null;

};

// callback when the tool is disabled
//
CLOUD.BaseEditor.prototype.onExit = function () {
};

// callback when the tool is activated
//
CLOUD.BaseEditor.prototype.onEnter = function () {
};

//
// ******************** virtual methods to handle all kinds event *************
// ********** specific tool should override event methods they insteresting ***
//
CLOUD.BaseEditor.prototype.processMouseDown = function (event) {
};

CLOUD.BaseEditor.prototype.processMouseMove = function (event) {
};

CLOUD.BaseEditor.prototype.processMouseUp = function (event) {
};

CLOUD.BaseEditor.prototype.processMouseWheel = function (event) {
};

CLOUD.BaseEditor.prototype.processMouseDoubleClick = function (event) {
};

CLOUD.BaseEditor.prototype.processKeyDown = function (event) {
};

CLOUD.BaseEditor.prototype.processKeyUp = function (event) {
};

CLOUD.BaseEditor.prototype.processTouchstart = function (event) {
};

CLOUD.BaseEditor.prototype.processTouchmove = function (event) {
};

CLOUD.BaseEditor.prototype.processTouchend = function (event) {
};

CLOUD.BaseEditor.prototype.processHover = function (event) {
};

//
// **************** end of virtual event handle methods *****************
//

/**
 * 朝指定方向移动
 *
 * @param {Number} direction 移动方向 {@link CLOUD.MoveDirection}
 * @param {Number} step 步进大小
 * @param {Boolean} go 是否启动
 */
CLOUD.BaseEditor.prototype.moveTo = function (direction, step, go) {
};

/**
 * 朝指定方向旋转
 *
 * @param {Object} delta 旋转偏移量 ({x: 10, y: 10})
 */
CLOUD.BaseEditor.prototype.rotateTo = function (delta) {
};

CLOUD.BaseEditor.prototype.dispatchEvent = function (event) {
    var modelManager = this.cameraControl.viewer.modelManager;
    modelManager.dispatchEvent(event);
};

// override button mapping
CLOUD.BaseEditor.prototype.updateButtons = function (mouseButtons) {

    if(mouseButtons.ORBIT !== undefined ){
        this.mouseButtons.ORBIT = mouseButtons.ORBIT;
    }

    if(mouseButtons.PAN !== undefined){
        this.mouseButtons.PAN = mouseButtons.PAN;
    }

    if(mouseButtons.PAN2 !== undefined){
        this.mouseButtons.PAN2 = mouseButtons.PAN2;
    }

    if(mouseButtons.ZOOM !== undefined){
        this.mouseButtons.ZOOM = mouseButtons.ZOOM;
    }
};
