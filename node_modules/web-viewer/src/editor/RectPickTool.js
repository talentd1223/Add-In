/**
 * Edit tool for picking objects with mouse rectangle operation
 * When press mouse with ctrl/alt key, enter the rect pick operation.
 * When ctrl key is pressed, picked objects are added into selection set,
 * when alt key is pressed, picked objects are removed from selection set
 *
 * @param viewer
 * @constructor
 */
CLOUD.RectPickTool = function (viewer) {

    CLOUD.RectOpTool.call(this, CLOUD.EditToolMode.PICK_BY_RECT, viewer.cameraControl, viewer.modelManager);
	
    this.viewer = viewer;
	this.scene = viewer.getScene();
    this.pickHelper = new CLOUD.PickHelper(this.cameraControl);

	this.activatePick = false;

};

CLOUD.RectPickTool.prototype = Object.create(CLOUD.RectOpTool.prototype);
CLOUD.RectPickTool.prototype.constructor = CLOUD.RectPickTool;

CLOUD.RectPickTool.prototype.destroy = function () {

    CLOUD.BaseEditor.prototype.destroy.call(this);

    this.pickHelper.destroy();
    this.pickHelper = null;

};

CLOUD.RectPickTool.prototype.processMouseDown = function (event) {

    event.preventDefault();
    //event.stopPropagation();

    this.activatePick = event.ctrlKey || event.altKey;

    if (this.activatePick && event.button === THREE.MOUSE.LEFT) {

        this.startPt.set(event.clientX, event.clientY);

        return true;
    }

    return CLOUD.RectOpTool.prototype.processMouseDown(this, event);

};

CLOUD.RectPickTool.prototype.processMouseMove = function (event) {

    //event.preventDefault();

    if (this.activatePick && event.button === THREE.MOUSE.LEFT) {

        this.endPt.set(event.clientX, event.clientY);

        this.updateFrustum(false, true);
		
        return true;
    }

    return CLOUD.RectOpTool.prototype.processMouseMove(this, event);

};

CLOUD.RectPickTool.prototype.processMouseUp = function (event) {

    //event.preventDefault();
    //event.stopPropagation();

    this.onUpdateUI({visible: false});

    if (this.activatePick && event.button === THREE.MOUSE.LEFT) {

        this.activatePick = false;

        if (Math.abs(this.startPt.x - event.clientX) < 2 && Math.abs(this.startPt.y - event.clientY) < 2) {
            this.pickHelper.click(event, null);
            return true;
        } else {
			this.endPt.set(event.clientX, event.clientY);

			if (!this.updateFrustum(true, false)) {
				this.pickHelper.click(event);
				return true;
			}

			var state = CLOUD.OPSELECTIONTYPE.Clear;

			if (event.ctrlKey) {
				state = CLOUD.OPSELECTIONTYPE.Add;
			} else if (event.altKey) {
				state = CLOUD.OPSELECTIONTYPE.Remove;
			}

			CLOUD.PickUtil.pickByRect(this.scene, this.frustum, state, this.cameraControl.viewer.modelManager, this.viewer);

			this.pickHelper.lastPickedUserId = '';

			this.cameraControl.updateView(true);

			return true;
        }

    }

    return CLOUD.RectOpTool.prototype.processMouseUp(this, event);

};