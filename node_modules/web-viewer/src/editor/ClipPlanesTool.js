CLOUD.ClipPlanesTool = function (viewer) {

    CLOUD.EditTool.call(this, CLOUD.EditToolMode.CLIP_BY_BOX);

    this.viewer = viewer;
	this.scene = viewer.getScene();
    this.enablePick = false;

    this.cameraControl = viewer.cameraControl;

    this.startPt = new THREE.Vector2();

    // clip planes
    var planes = [];
    for (var ii = 0; ii < 6; ++ii) {
        planes.push(new THREE.Plane());
    }

    var clipPlanes = this.scene.getClipPlanes();

    clipPlanes.updateClippingParams = function (uniforms) {

        if (uniforms.iClipPlane.value == 0) {
            viewer.renderer.clippingPlanes = Object.freeze([]);
        }
        else {
            // to plane
            for (var ii = 0, len = uniforms.iClipPlane.value; ii < len; ++ii) {
                var v = uniforms.vClipPlane.value[ii];
                var plane = planes[ii];
                plane.setComponents(-v.x, -v.y, -v.z, -v.w);
                plane.normalize();
            }
            viewer.renderer.clippingPlanes = planes;
            
        }

    };

    clipPlanes.init();

    this.selectIndex = null;

    this.planeDistance = 0;

    this.offsetSpeed = 0.02;

    // var scope = this;
    // this.pickHelper = new CLOUD.PickHelper(this.scene, this.cameraControl);

    this.toggle = function (enable, visible) {
        clipPlanes.enable(enable, visible);
    };

    this.visible = function (enable) {
        clipPlanes.visible = enable;
    };

    this.rotatable = function (enable) {
        clipPlanes.rotatable = enable;
    };

    this.store = function () {
        return clipPlanes.store();
    };

    this.restore = function (clipPlanesInfo) {
        clipPlanes.restore(clipPlanesInfo);
    };

    this.reset = function () {
        clipPlanes.reset();
    };

    this.pointToScreen = function (point) {

        var camera = this.cameraControl.camera;
        var viewProjMatrix = new THREE.Matrix4();
        viewProjMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);

        var point4 = new THREE.Vector4(point.x, point.y, point.z, 1.0);
        point4.applyMatrix4(viewProjMatrix);

        var screen = new THREE.Vector2();
        screen.x = (point4.x / point4.w + 1.0) / 2;
        screen.y = 1 - (point4.y / point4.w + 1.0) / 2;

        var dim = this.cameraControl.getContainerDimensions();

        screen.x = screen.x * dim.width + dim.left;
        screen.y = screen.y * dim.height + dim.top;

        return screen;
    };

    this.getPlaneDistanceInScreen = function () {

        if (this.selectIndex == null) return null;

        if (this.selectIndex < 2) {
            var right = clipPlanes.center.clone();
            var left = clipPlanes.center.clone();

            right.x -= clipPlanes.cubeSize.x;
            left.x += clipPlanes.cubeSize.x;

            var rightScreen = this.pointToScreen(right);
            var leftScreen = this.pointToScreen(left);

            return rightScreen.x - leftScreen.x;
        }
        else {
            var top = clipPlanes.center.clone();
            var bottom = clipPlanes.center.clone();

            bottom.y -= clipPlanes.cubeSize.y;
            top.y += clipPlanes.cubeSize.y;

            var bottomScreen = this.pointToScreen(bottom);
            var topScreen = this.pointToScreen(top);

            return bottomScreen.y - topScreen.y;
        }
    };

    this.getPickPoint = function (cx, cy) {

        var camera = this.cameraControl.camera;
        var canvasContainer = this.cameraControl.getContainerDimensions();
        // 规范化开始点
        var canvasX = cx - canvasContainer.left;
        var canvasY = cy - canvasContainer.top;
        // 规范化到[-1, 1]
        var normalizedX = (canvasX / canvasContainer.width) * 2.0 - 1.0;
        var normalizedY = ((canvasContainer.height - canvasY) / canvasContainer.height) * 2.0 - 1.0;

        var raycaster = new CLOUD.Raycaster();
        raycaster.setFromCamera(new THREE.Vector2(normalizedX, normalizedY), camera);

        var point = raycaster.ray.intersectPlane(this.plane);
        return point;
    };

    this.getSelectIndex = function () {
        return clipPlanes.selectIndex;
    };

    this._isVisible = function () {
        return clipPlanes.visible;
    };

    this.isRotate = function () {
        return clipPlanes.rotatable;
    };

    this.offset = function (offset) {
        var index = Math.floor(this.selectIndex / 2);
        if (this.selectIndex <= 3) {
            clipPlanes.offset(this.selectIndex, -offset * clipPlanes.cubeSize.getComponent(index) * 2);
        }
        else if (this.selectIndex % 2 == 1) {
            clipPlanes.offset(this.selectIndex, -offset * clipPlanes.cubeSize.getComponent(index) * 2);
        }
        else {
            clipPlanes.offset(this.selectIndex, offset * clipPlanes.cubeSize.getComponent(index) * 2);
        }
    };

    this.setSectionBox = function(min, max) {
        var bbox = new THREE.Box3(new THREE.Vector3(min.x, min.y, min.z), new THREE.Vector3(max.x, max.y, max.z));
        bbox.applyMatrix4(this.scene.getMatrixGlobal());
        clipPlanes.setSectionBox(bbox.min, bbox.max);
    };

    this.moveSectionPlane = function(planeName, offset) {
        clipPlanes.moveSectionPlane(planeName, offset);
    };

    this.rotateSectionBox = function(axis, offset) {
        clipPlanes.rotateSectionBox(axis, offset);
    };

    this.rotate = function (cx, cy) {
        if (this.selectIndex == 2 || this.selectIndex == 3) {
            clipPlanes.rotX(cy / 180 * Math.PI * 0.1);
        } else {
            clipPlanes.rotY(cx / 180 * Math.PI * 0.1);
        }
    };

    this.update = function (camera) {
        clipPlanes.update(camera);
    };

    this.cancelHighLight = function () {
        clipPlanes.cancelHighLight();
    };

    this.highLight = function () {
        clipPlanes.highLight();
    };
};

CLOUD.ClipPlanesTool.prototype = Object.create(CLOUD.EditTool.prototype);
CLOUD.ClipPlanesTool.prototype.constructor = CLOUD.ClipPlanesTool;

CLOUD.ClipPlanesTool.prototype.destroy = function () {
    this.cameraControl = null;
    this.intersectPoint = null;
    this.selectIndex = null;
    this.normal = null;
    this.plane = null;
    this.pickHelper = null;
    this.scene = null;
    this.viewer = null;
};

CLOUD.ClipPlanesTool.prototype.onExit = function () {
    this.toggle(false,false);
};

CLOUD.ClipPlanesTool.prototype.processMouseDown = function (event) {

    this.startPt.set(event.clientX, event.clientY);

    if (!this.enablePick && event.button === THREE.MOUSE.LEFT) {
        var ray = this.cameraControl.getRaycaster(event.clientX, event.clientY);
        var clipPlanes = this.scene.getClipPlanes();
        var clipResult = clipPlanes.hitTest(ray);

        var intersectContext = this.cameraControl.getIntersectContext(new THREE.Vector2(event.clientX, event.clientY));
        var result = this.cameraControl.intersector.intersect(intersectContext, null, true);

        if (result != null && result.distance <= clipResult.distance)
            return CLOUD.EditTool.prototype.processMouseDown(this, event);

        this.selectIndex = this.getSelectIndex();
        this.planeDistance = this.getPlaneDistanceInScreen();

        if (this.selectIndex != null) {
            this.highLight();
            this.cameraControl.needUpdateRenderList(true);
            this.cameraControl.update(true);

            this.enablePick = true;

            this.clipStartPoint = ray.ray.at(clipResult.distance, this.clipStartPoint);

            return true;
        }
    }

    return CLOUD.EditTool.prototype.processMouseDown(this, event);
};

CLOUD.ClipPlanesTool.prototype.processMouseUp = function (event) {

    if (this.enablePick && event.button === THREE.MOUSE.LEFT) {
        this.selectIndex = null;
        this.planeDistance = 0;

        this.cameraControl.needUpdateRenderList(true);
        this.cancelHighLight();
        this.cameraControl.update(true);

        this.enablePick = false;

        return true;
    }

    return CLOUD.EditTool.prototype.processMouseUp(this, event);
};


CLOUD.ClipPlanesTool.prototype.processMouseMove = function (event) {

    if (this.enablePick) {
        if (!this.isRotate()) {
            var equalPt = event.clientX==this.startPt.x && event.clientY==this.startPt.y;
            
            if(!equalPt){

                var clipPlanes = this.scene.getClipPlanes();
                var planeInfo = clipPlanes.clipplanes[this.selectIndex];
                var offset = this.cameraControl.movePlane(planeInfo, event, this.startPt, true, this.clipStartPoint);
                if(offset != null){
                    clipPlanes.offset(this.selectIndex, offset);
                }   
                
                this.startPt.set(event.clientX, event.clientY);
            }
            
        } else {
            this.rotate(event.clientX - this.startPt.x, event.clientY - this.startPt.y);
            this.startPt.set(event.clientX, event.clientY);
        }
        this.cameraControl.update(true);
        
        return true;
    }

    return CLOUD.EditTool.prototype.processMouseMove(this, event);
};

CLOUD.ClipPlanesTool.prototype.processTouchstart = function (event) {

    this.startPt.set(event.touches[0].clientX, event.touches[0].clientY);
    if (!this.enablePick) {
        var ray = this.cameraControl.getRaycaster(event.touches[0].clientX, event.touches[0].clientY);
        var clipPlanes = this.scene.getClipPlanes();
        clipPlanes.hitTest(ray);

        //this.cameraControl.getTrackingPoint(event.touches[0].clientX, event.touches[0].clientY);
        this.selectIndex = this.getSelectIndex();
        this.planeDistance = this.getPlaneDistanceInScreen();

        if (this.selectIndex != null) {
            this.highLight();
            this.cameraControl.needUpdateRenderList(true);
            this.cameraControl.update(true);

            this.update();
            return true;
        }
    }
    else {
        return CLOUD.EditTool.prototype.processTouchstart(this, event);
    }

};

CLOUD.ClipPlanesTool.prototype.processTouchmove = function (event) {

    if (this.selectIndex != null) {
        if (!this.isRotate()) {
            var delta = 0;
            if (this.selectIndex < 2) {
                delta = event.touches[0].clientX - this.startPt.x;
            }
            else {
                delta = event.touches[0].clientY - this.startPt.y;
            }

            this.offset(delta / this.planeDistance);
            this.startPt.set(event.touches[0].clientX, event.touches[0].clientY);
        }
        else {
            this.rotate(event.touches[0].clientX - this.startPt.x, event.touches[0].clientY - this.startPt.y);
            this.startPt.set(event.touches[0].clientX, event.touches[0].clientY);
        }
        this.cameraControl.update(true);

        this.update();

        return true;
    }
    else {
        return CLOUD.EditTool.prototype.processTouchmove(this, event);
    }

};

CLOUD.ClipPlanesTool.prototype.processTouchend = function (event) {

    this.selectIndex = null;
    this.planeDistance = 0;

    if (this.enablePick) {
        this.onUpdateUI({visible: false});

        if (this.startPt.x == event.touches[0].clientX && this.startPt.y == event.touches[0].clientY) {
            this.pickHelper.click(event);
        }
    }


    this.cameraControl.needUpdateRenderList(true);
    this.cancelHighLight();
    this.cameraControl.update(true);

    this.update();

    return CLOUD.EditTool.prototype.processTouchend(this, event);
    
};