CLOUD.MovePad = function (viewer) {
    this.viewer = viewer;
    this.camera = viewer.camera;

    this.group = null;
    this.oval = null;

    this.groupSize = null;
    this.ovalSize = null;

    this.startPt = new THREE.Vector2();
    this.center = new THREE.Vector2();
    this.leftButtonDown = false;

    this.movementSpeed = 0.005 * CLOUD.GlobalData.SceneSize;

    var scope = this;

    this.init = function () {
        window.addEventListener('resize', this.ovalInitBind, false);
        this.oval = document.createElement("div");
        this.oval.style.display = 'none';
        this.ovalInit();

        window.addEventListener('resize', this.groupInitBind, false);
        this.group = document.createElement("div");

        this.group.style.display = 'none';
        this.groupInit();

        this.addEventListener();

        var viewport = document.getElementById('viewport');
        viewport.appendChild(this.oval);
        viewport.appendChild(this.group);
    };

    this.addEventListener = function () {
        this.group.addEventListener('mousedown', this.groupOnMouseDownBind, false);
        this.group.addEventListener('mouseup', this.groupOnMouseUpBind, false);
        window.addEventListener('mousemove', this.groupOnMouseMoveBind, false);
        window.addEventListener('mouseup', this.groupOnMouseUpBind, false);

        this.group.addEventListener('touchstart', this.groupOnTouchStartBind, false);
        this.group.addEventListener('touchend', this.groupOnTouchEndBind, false);
        window.addEventListener('touchmove', this.groupOnTouchMoveBind, false);
        window.addEventListener('touchend', this.groupOnTouchEndBind, false);
    };

    this.ovalInit = function () {
        var viewport = document.getElementById('viewport');
        var width = viewport.clientWidth;
        var height = viewport.clientHeight;
        var size = width > height ? height : width;

        if (this.oval != null) {
            this.oval.style.backgroundImage = "url(images/Oval.png)";
            this.oval.style.backgroundSize = '100%';
            this.oval.style.position = 'absolute';
            this.oval.style.left = (0.06 * width + 0.105 * size).toString() + 'px';
            this.oval.style.bottom = (0.035 * height + 0.105 * size).toString() + 'px';

            this.ovalSize = 0.14 * size;
            this.oval.style.width = this.ovalSize.toString() + 'px';
            this.oval.style.height = this.ovalSize.toString() + 'px';

            this.ovalSize *= 0.5;
        }
    };

    this.groupInit = function () {
        var viewport = document.getElementById('viewport');
        var width = viewport.clientWidth;
        var height = viewport.clientHeight;
        var size = width > height ? height : width;

        if (this.group != null) {
            this.group.style.backgroundImage = "url(images/Group.png)";
            this.group.style.backgroundSize = '100%';
            this.group.style.position = 'absolute';
            this.group.style.left = '6%';
            this.group.style.bottom = '3.5%';

            this.groupSize = 0.35 * size;
            this.group.style.width = this.groupSize.toString() + 'px';
            this.group.style.height = this.groupSize.toString() + 'px';

            this.groupSize *= 0.5;

            this.center = new THREE.Vector2(width * 0.06 + this.groupSize, height * 0.035 + this.groupSize);
        }
    };

    this.showOverlay = function () {
        this.oval.style.display = '';
        this.group.style.display = '';
    };

    this.hideOverlay = function () {
        this.oval.style.display = 'none';
        this.group.style.display = 'none';
    };

    this.moveCamera = function (dir) {
        var ratio = dir.length() / this.groupSize;
        dir.normalize();

        var unitY = new THREE.Vector2(0.0, 1.0);
        var angle = Math.acos(unitY.dot(dir));
        if (dir.x < 0) {
            angle = -angle;
        }

        var cameraDir = this.camera.getWorldDirection();
        cameraDir = cameraDir.subVectors(this.camera.target, this.camera.position);
        var newDir = cameraDir.normalize().clone();
        newDir.applyAxisAngle(new THREE.Vector3(0.0, 1.0, 0.0), angle);
        newDir.multiplyScalar(this.movementSpeed * ratio);
        newDir.add(cameraDir);
        newDir.normalize();
        newDir.multiplyScalar(this.movementSpeed * ratio);

        this.camera.position.add(newDir);
        this.camera.target.add(newDir);

        this.viewer.cameraControl.update();
    };

    this.moveOvalAndCamera = function (x, y) {
        var viewport = document.getElementById('viewport');
        var offset = CLOUD.DomUtil.getContainerOffsetToClient(viewport);
        var pos = new THREE.Vector2(x, offset.height + offset.top - y );
        var dir = new THREE.Vector2();
        dir.subVectors(pos, this.center);
        if (dir.length() > this.groupSize) {
            dir.normalize();
            dir.multiplyScalar(this.groupSize);
            pos.addVectors(this.center, dir);
        }

        this.oval.style.left = (pos.x.toString() - this.ovalSize) + 'px';
        this.oval.style.bottom = (pos.y - this.ovalSize).toString() + 'px';

        this.moveCamera(dir);
    };

    function step(timestamp) {
        if (scope.leftButtonDown) {
            scope.moveOvalAndCamera(scope.startPt.x, scope.startPt.y);
            requestAnimationFrame(step);
        }
    }
    
    this.onMouseDown = function (event) {
        if (event.button === THREE.MOUSE.LEFT) {
            event.stopPropagation();
            this.leftButtonDown = true;
            this.moveOvalAndCamera(event.clientX, event.clientY);
            this.startPt.set(event.clientX, event.clientY);
            requestAnimationFrame(step);
        }
    };

    this.onMouseUp = function () {
        this.ovalInit();
        this.leftButtonDown = false;
        cancelAnimationFrame(step);
    };

    this.onMouseMove = function (event) {
        if (this.leftButtonDown) {
            event.stopPropagation();
            this.moveOvalAndCamera(event.clientX, event.clientY);
            this.startPt.set(event.clientX, event.clientY);
        }
    };

    this.onTouchStart = function (event) {
        if (event.touches.length == 1) {
            event.stopPropagation();
            this.leftButtonDown = true;
            this.moveOvalAndCamera(event.touches[0].clientX, event.touches[0].clientY);
            this.startPt.set(event.touches[0].clientX, event.touches[0].clientY);
            requestAnimationFrame(step);
        }
    };

    this.onTouchEnd = function () {
        this.ovalInit();
        this.leftButtonDown = false;
        cancelAnimationFrame(step);
    };

    this.onTouchMove = function (event) {
        if (this.leftButtonDown) {
            event.stopPropagation();
            this.moveOvalAndCamera(event.touches[0].clientX, event.touches[0].clientY);
            this.startPt.set(event.touches[0].clientX, event.touches[0].clientY);
        }
    };

    this.groupInitBind = this.groupInit.bind(this);
    this.ovalInitBind = this.ovalInit.bind(this);

    this.groupOnMouseDownBind = this.onMouseDown.bind(this);
    this.groupOnMouseUpBind = this.onMouseUp.bind(this);
    this.groupOnMouseMoveBind = this.onMouseMove.bind(this);

    this.groupOnTouchStartBind = this.onTouchStart.bind(this);
    this.groupOnTouchEndBind = this.onTouchEnd.bind(this);
    this.groupOnTouchMoveBind = this.onTouchMove.bind(this);

    this.init();
};