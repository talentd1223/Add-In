CLOUD.SelectPad = function (editor) {
    this.editor = editor;
    this.cameraControl = editor.cameraControl;
    this.dim = this.cameraControl.getContainerDimensions();

    this.pad = null;
    this.padSize = 96;

    this.startPt = new THREE.Vector2();
    this.position = new THREE.Vector2();

    this.callback = null;

    this.intersect = null;

    this.init = function () {
        window.addEventListener('resize', this.padInitBind, false);
        this.pad = document.createElement("div");

        this.padInit();

        var viewport = this.cameraControl.domElement;
        viewport.appendChild(this.pad);

        this.addEventListener();
    };

    this.addEventListener = function () {
        this.pad.addEventListener('touchstart', this.padOnTouchStartBind, false);
        this.pad.addEventListener('touchmove', this.padOnTouchMoveBind, false);
        this.pad.addEventListener('touchend', this.padOnTouchEndBind, false);
        //window.addEventListener('touchend', this.padOnTouchEndBind, false);
    };

    this.padInit = function () {
        if (this.pad != null) {
            this.pad.style.backgroundImage = "url(images/selectPad.png)";
            this.pad.style.backgroundSize = '100%';
            this.pad.style.position = 'absolute';
            this.pad.style.width = this.padSize.toString() + 'px';
            this.pad.style.height = this.padSize.toString() + 'px';
            this.pad.style.zIndex = '10';
            this.pad.style.display = 'none';
        }
    };

    this.showOverlay = function (position) {
        this.position = position;

        this.pad.style.left = this.position.x.toString() + 'px';
        this.pad.style.top = (this.position.y - this.dim.top).toString() + 'px';

        this.pad.style.display = '';

        this.pick();
    };

    this.hideOverlay = function () {
        this.pad.style.display = 'none';
    };

    this.pick = function () {
        var screenX = this.position.x;
        var screenY = this.position.y;

        var cameraControl = this.cameraControl;
        var pickHelper = this.editor.pickHelper;
        var sceneState = cameraControl.viewer.modelManager.sceneState;

        var scope = this;

        var screenPos = new THREE.Vector2(screenX, screenY);
        var intersectContext = cameraControl.getIntersectContext(screenPos);

        cameraControl.intersector.pick(intersectContext, function (intersect) {

            sceneState.clearSelection();
            
            if (!intersect) {
                
                cameraControl.updateView(true);
                scope.intersect = null;
                return;
            }

            var userId = intersect.userId;
            cameraControl.viewer.getScene().intersectToWorld(intersect);

            sceneState.addSelection([userId]);
            scope.intersect = intersect;

            cameraControl.updateView(true);
        });

        if (scope.intersect != null) {
            scope.intersect.cx = screenX;
            scope.intersect.cy = screenY;
        }
        
    };

    this.onTouchStart = function (event) {
        if (event.touches.length === 1) {
            event.stopPropagation();
            event.preventDefault();
            this.startPt.set(event.touches[0].clientX, event.touches[0].clientY);
        }
    };

    this.onTouchMove = function (event) {
        if (event.touches.length === 1) {
            event.stopPropagation();
            event.preventDefault();

            var deltaX = event.touches[0].clientX - this.startPt.x;
            var deltaY = event.touches[0].clientY - this.startPt.y;

            this.position.x += deltaX;
            this.position.y += deltaY;

            this.pad.style.left = this.position.x.toString() + 'px';
            this.pad.style.top = (this.position.y - this.dim.top).toString() + 'px';

            this.startPt.set(event.touches[0].clientX, event.touches[0].clientY);

            this.pick(event);
        }
    };

    this.onTouchEnd = function (event) {
        event.stopPropagation();

        if (this.callback != null) {
            this.callback(this.intersect);
        }
        else {
            console.log("selectPad click", this.intersect);
        }
    };

    this.padInitBind = this.padInit.bind(this);

    this.padOnTouchStartBind = this.onTouchStart.bind(this);
    this.padOnTouchEndBind = this.onTouchEnd.bind(this);
    this.padOnTouchMoveBind = this.onTouchMove.bind(this);

    this.init();
};