/**
 * Group for scene objects.
 * Every scene displayable object need to belong to a group.
 *
 * @param name    Group name, need to be unique
 * @param params  Parameters for objects in this group
 * @constructor
 */
CLOUD.ObjectGroup = function (name, params) {
	THREE.Group.call(this);
	
	this.name = name;

	// display priority
	this.priority = (params && params.priority) ? params.priority : 5;
	// flag if object in this group is selectable
	this.pickableType = (params && params.pickableType) ? params.pickableType : CLOUD.PICKABLETYPE.UnPickable;
	// flag if object in this group is in global space (space before scene transfer)
    // or in the space after scene transfer
    // if in global space, object need to be transfer with the scene matrix
    this.globalSpace = (params && params.globalSpace) ? params.globalSpace : false;

    // bounding box of the group
	this.boundingBox = null;

    // support group hover
    this.hoverEnabled = (params && params.hoverEnabled) ? params.hoverEnabled : false;
};

/**
 * Group for geometry objects to display
 */
CLOUD.ObjectGroup.prototype = Object.create(THREE.Group.prototype);
CLOUD.ObjectGroup.prototype.constructor = CLOUD.ObjectGroup;

// remove child according to its name
CLOUD.ObjectGroup.prototype.removeByName = function (name) {
    var children = this.children;

    for (var i = 0, len = children.length; i < len; ++i) {
        if (children[i].name === name) {
            children.splice(i, 1);
            break;
        }
    }

};

// clear all objects in this group
CLOUD.ObjectGroup.prototype.clear = function () {
    this.children.length = 0;
};

CLOUD.ObjectGroup.prototype.isGlobalSpace = function() {
    return this.globalSpace;
};


CLOUD.ObjectGroup.prototype.hasChild = function(name) {
    for (var i = 0, len = this.children.length; i< len; i++) {
        if (this.children[i].name == name) {
            return true;
        }
    }

    return false;
};

CLOUD.ObjectGroup.prototype.isPickable = function() {
    return this.pickableType !== CLOUD.PICKABLETYPE.UnPickable;
};
